using Implem.DefinitionAccessor;
using Implem.Libraries.DataSources.SqlServer;
using Implem.Libraries.Utilities;
using Implem.Pleasanter.Libraries.Server;
using Implem.Pleasanter.Libraries.Settings;
using Implem.Pleasanter.Models;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
namespace Implem.Pleasanter.Libraries.DataSources
{
    public static class Rds
    {
        public static void ExecuteNonQuery(
            string connectionString = "",
            bool transactional = false,
            bool writeSqlToDebugLog = true,
            params SqlStatement[] statements)
        {
            Def.SqlIoByUser(
                connectionString: connectionString,
                rdsUser: Sessions.RdsUser(),
                transactional: transactional,
                writeSqlToDebugLog: writeSqlToDebugLog,
                statements: statements).ExecuteNonQuery();
        }

        public static bool ExecuteScalar_bool(
            string connectionString = "",
            bool transactional = false,
            bool writeSqlToDebugLog = true,
            params SqlStatement[] statements)
        {
            return Def.SqlIoByUser(
                connectionString: connectionString,
                rdsUser: Sessions.RdsUser(),
                transactional: transactional,
                writeSqlToDebugLog: writeSqlToDebugLog,
                statements: statements).ExecuteScalar_bool();
        }

        public static string ExecuteScalar_string(
            string connectionString = "",
            bool transactional = false,
            bool writeSqlToDebugLog = true,
            params SqlStatement[] statements)
        {
            return Def.SqlIoByUser(
                connectionString: connectionString,
                rdsUser: Sessions.RdsUser(),
                transactional: transactional,
                writeSqlToDebugLog: writeSqlToDebugLog,
                statements: statements).ExecuteScalar_string();
        }

        public static int ExecuteScalar_int(
            string connectionString = "",
            bool transactional = false,
            bool writeSqlToDebugLog = true,
            params SqlStatement[] statements)
        {
            return Def.SqlIoByUser(
                connectionString: connectionString,
                rdsUser: Sessions.RdsUser(),
                transactional: transactional,
                writeSqlToDebugLog: writeSqlToDebugLog,
                statements: statements).ExecuteScalar_int();
        }

        public static long ExecuteScalar_long(
            string connectionString = "",
            bool transactional = false,
            bool writeSqlToDebugLog = true,
            params SqlStatement[] statements)
        {
            return Def.SqlIoByUser(
                connectionString: connectionString,
                rdsUser: Sessions.RdsUser(),
                transactional: transactional,
                writeSqlToDebugLog: writeSqlToDebugLog,
                statements: statements).ExecuteScalar_long();
        }

        public static decimal ExecuteScalar_decimal(
            string connectionString = "",
            bool transactional = false,
            bool writeSqlToDebugLog = true,
            params SqlStatement[] statements)
        {
            return Def.SqlIoByUser(
                connectionString: connectionString,
                rdsUser: Sessions.RdsUser(),
                transactional: transactional,
                writeSqlToDebugLog: writeSqlToDebugLog,
                statements: statements).ExecuteScalar_decimal();
        }

        public static DateTime ExecuteScalar_datetime(
            string connectionString = "",
            bool transactional = false,
            bool writeSqlToDebugLog = true,
            params SqlStatement[] statements)
        {
            return Def.SqlIoByUser(
                connectionString: connectionString,
                rdsUser: Sessions.RdsUser(),
                transactional: transactional,
                writeSqlToDebugLog: writeSqlToDebugLog,
                statements: statements).ExecuteScalar_datetime();
        }

        public static byte[] ExecuteScalar_bytes(
            string connectionString = "",
            bool transactional = false,
            bool writeSqlToDebugLog = true,
            params SqlStatement[] statements)
        {
            return Def.SqlIoByUser(
                connectionString: connectionString,
                rdsUser: Sessions.RdsUser(),
                transactional: transactional,
                writeSqlToDebugLog: writeSqlToDebugLog,
                statements: statements).ExecuteScalar_bytes();
        }

        public static DataTable ExecuteTable(
            string connectionString = "",
            bool transactional = false,
            bool writeSqlToDebugLog = true,
            params SqlStatement[] statements)
        {
            return Def.SqlIoByUser(
                connectionString: connectionString,
                rdsUser: Sessions.RdsUser(),
                transactional: transactional,
                writeSqlToDebugLog: writeSqlToDebugLog,
                statements: statements).ExecuteTable();
        }

        public static DataSet ExecuteDataSet(
            string connectionString = "",
            bool transactional = false,
            bool writeSqlToDebugLog = true,
            params SqlStatement[] statements)
        {
            return Def.SqlIoByUser(
                connectionString: connectionString,
                rdsUser: Sessions.RdsUser(),
                transactional: transactional,
                writeSqlToDebugLog: writeSqlToDebugLog,
                statements: statements).ExecuteDataSet();
        }

        public static SqlStatement If(string _if)
        {
            return new SqlStatement("if (" + _if + ") begin\n");
        }

        public static SqlStatement End()
        {
            return new SqlStatement("end\n");
        }

        public static SqlStatement Raw(string raw)
        {
            return new SqlStatement(raw);
        }

        public static int Count(DataSet dataSet)
        {
            return dataSet != null && dataSet.Tables.Contains("Count")
                ? dataSet.Tables["Count"].Rows[0][0].ToInt()
                : 0;
        }

        public static SqlStatement TenantsStatement(
            string commandText,
            SqlParamCollection param = null)
        {
            return new SqlStatement
            {
                CommandText = commandText,
                SqlParamCollection = param
            };
        }

        public static SqlStatement DemosStatement(
            string commandText,
            SqlParamCollection param = null)
        {
            return new SqlStatement
            {
                CommandText = commandText,
                SqlParamCollection = param
            };
        }

        public static SqlStatement SysLogsStatement(
            string commandText,
            SqlParamCollection param = null)
        {
            return new SqlStatement
            {
                CommandText = commandText,
                SqlParamCollection = param
            };
        }

        public static SqlStatement DeptsStatement(
            string commandText,
            SqlParamCollection param = null)
        {
            return new SqlStatement
            {
                CommandText = commandText,
                SqlParamCollection = param
            };
        }

        public static SqlStatement UsersStatement(
            string commandText,
            SqlParamCollection param = null)
        {
            return new SqlStatement
            {
                CommandText = commandText,
                SqlParamCollection = param
            };
        }

        public static SqlStatement MailAddressesStatement(
            string commandText,
            SqlParamCollection param = null)
        {
            return new SqlStatement
            {
                CommandText = commandText,
                SqlParamCollection = param
            };
        }

        public static SqlStatement PermissionsStatement(
            string commandText,
            SqlParamCollection param = null)
        {
            return new SqlStatement
            {
                CommandText = commandText,
                SqlParamCollection = param
            };
        }

        public static SqlStatement OutgoingMailsStatement(
            string commandText,
            SqlParamCollection param = null)
        {
            return new SqlStatement
            {
                CommandText = commandText,
                SqlParamCollection = param
            };
        }

        public static SqlStatement SearchIndexesStatement(
            string commandText,
            SqlParamCollection param = null)
        {
            return new SqlStatement
            {
                CommandText = commandText,
                SqlParamCollection = param
            };
        }

        public static SqlStatement ItemsStatement(
            string commandText,
            SqlParamCollection param = null)
        {
            return new SqlStatement
            {
                CommandText = commandText,
                SqlParamCollection = param
            };
        }

        public static SqlStatement SitesStatement(
            string commandText,
            SqlParamCollection param = null)
        {
            return new SqlStatement
            {
                CommandText = commandText,
                SqlParamCollection = param
            };
        }

        public static SqlStatement OrdersStatement(
            string commandText,
            SqlParamCollection param = null)
        {
            return new SqlStatement
            {
                CommandText = commandText,
                SqlParamCollection = param
            };
        }

        public static SqlStatement ExportSettingsStatement(
            string commandText,
            SqlParamCollection param = null)
        {
            return new SqlStatement
            {
                CommandText = commandText,
                SqlParamCollection = param
            };
        }

        public static SqlStatement LinksStatement(
            string commandText,
            SqlParamCollection param = null)
        {
            return new SqlStatement
            {
                CommandText = commandText,
                SqlParamCollection = param
            };
        }

        public static SqlStatement BinariesStatement(
            string commandText,
            SqlParamCollection param = null)
        {
            return new SqlStatement
            {
                CommandText = commandText,
                SqlParamCollection = param
            };
        }

        public static SqlStatement IssuesStatement(
            string commandText,
            SqlParamCollection param = null)
        {
            return new SqlStatement
            {
                CommandText = commandText,
                SqlParamCollection = param
            };
        }

        public static SqlStatement ResultsStatement(
            string commandText,
            SqlParamCollection param = null)
        {
            return new SqlStatement
            {
                CommandText = commandText,
                SqlParamCollection = param
            };
        }

        public static SqlStatement WikisStatement(
            string commandText,
            SqlParamCollection param = null)
        {
            return new SqlStatement
            {
                CommandText = commandText,
                SqlParamCollection = param
            };
        }

        public static SqlSelect SelectTenants(
            string dataTableName = "",
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlColumnCollection column = null,
            SqlJoinCollection join = null,
            SqlWhereCollection where = null,
            SqlGroupByCollection groupBy = null,
            SqlHavingCollection having = null,
            SqlOrderByCollection orderBy = null,
            SqlParamCollection param = null,
            bool distinct = false,
            int top = 0,
            int offset = 0,
            int pageSize = 0,
            bool countRecord = false,
            Sqls.UnionTypes unionType = Sqls.UnionTypes.None,
            bool _using = true)
        {
            return new SqlSelect
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[Tenants]",
                HistoryTableBracket = "[Tenants_history]",
                DeletedTableBracket = "[Tenants_deleted]",
                SqlColumnCollection = column,
                SqlJoinCollection = join,
                SqlWhereCollection = where,
                SqlGroupByCollection = groupBy,
                SqlHavingCollection = having,
                SqlOrderByCollection = orderBy,
                SqlParamCollection = param,
                Distinct = distinct,
                Top = top,
                Offset = offset,
                PageSize = pageSize,
                CountRecord = countRecord,
                UnionType = unionType,
                Using = _using
            };
        }

        public static SqlSelect SelectDemos(
            string dataTableName = "",
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlColumnCollection column = null,
            SqlJoinCollection join = null,
            SqlWhereCollection where = null,
            SqlGroupByCollection groupBy = null,
            SqlHavingCollection having = null,
            SqlOrderByCollection orderBy = null,
            SqlParamCollection param = null,
            bool distinct = false,
            int top = 0,
            int offset = 0,
            int pageSize = 0,
            bool countRecord = false,
            Sqls.UnionTypes unionType = Sqls.UnionTypes.None,
            bool _using = true)
        {
            return new SqlSelect
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[Demos]",
                HistoryTableBracket = "[Demos_history]",
                DeletedTableBracket = "[Demos_deleted]",
                SqlColumnCollection = column,
                SqlJoinCollection = join,
                SqlWhereCollection = where,
                SqlGroupByCollection = groupBy,
                SqlHavingCollection = having,
                SqlOrderByCollection = orderBy,
                SqlParamCollection = param,
                Distinct = distinct,
                Top = top,
                Offset = offset,
                PageSize = pageSize,
                CountRecord = countRecord,
                UnionType = unionType,
                Using = _using
            };
        }

        public static SqlSelect SelectSysLogs(
            string dataTableName = "",
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlColumnCollection column = null,
            SqlJoinCollection join = null,
            SqlWhereCollection where = null,
            SqlGroupByCollection groupBy = null,
            SqlHavingCollection having = null,
            SqlOrderByCollection orderBy = null,
            SqlParamCollection param = null,
            bool distinct = false,
            int top = 0,
            int offset = 0,
            int pageSize = 0,
            bool countRecord = false,
            Sqls.UnionTypes unionType = Sqls.UnionTypes.None,
            bool _using = true)
        {
            return new SqlSelect
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[SysLogs]",
                HistoryTableBracket = "[SysLogs_history]",
                DeletedTableBracket = "[SysLogs_deleted]",
                SqlColumnCollection = column,
                SqlJoinCollection = join,
                SqlWhereCollection = where,
                SqlGroupByCollection = groupBy,
                SqlHavingCollection = having,
                SqlOrderByCollection = orderBy,
                SqlParamCollection = param,
                Distinct = distinct,
                Top = top,
                Offset = offset,
                PageSize = pageSize,
                CountRecord = countRecord,
                UnionType = unionType,
                Using = _using
            };
        }

        public static SqlSelect SelectDepts(
            string dataTableName = "",
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlColumnCollection column = null,
            SqlJoinCollection join = null,
            SqlWhereCollection where = null,
            SqlGroupByCollection groupBy = null,
            SqlHavingCollection having = null,
            SqlOrderByCollection orderBy = null,
            SqlParamCollection param = null,
            bool distinct = false,
            int top = 0,
            int offset = 0,
            int pageSize = 0,
            bool countRecord = false,
            Sqls.UnionTypes unionType = Sqls.UnionTypes.None,
            bool _using = true)
        {
            return new SqlSelect
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[Depts]",
                HistoryTableBracket = "[Depts_history]",
                DeletedTableBracket = "[Depts_deleted]",
                SqlColumnCollection = column,
                SqlJoinCollection = join,
                SqlWhereCollection = where,
                SqlGroupByCollection = groupBy,
                SqlHavingCollection = having,
                SqlOrderByCollection = orderBy,
                SqlParamCollection = param,
                Distinct = distinct,
                Top = top,
                Offset = offset,
                PageSize = pageSize,
                CountRecord = countRecord,
                UnionType = unionType,
                Using = _using
            };
        }

        public static SqlSelect SelectUsers(
            string dataTableName = "",
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlColumnCollection column = null,
            SqlJoinCollection join = null,
            SqlWhereCollection where = null,
            SqlGroupByCollection groupBy = null,
            SqlHavingCollection having = null,
            SqlOrderByCollection orderBy = null,
            SqlParamCollection param = null,
            bool distinct = false,
            int top = 0,
            int offset = 0,
            int pageSize = 0,
            bool countRecord = false,
            Sqls.UnionTypes unionType = Sqls.UnionTypes.None,
            bool _using = true)
        {
            return new SqlSelect
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[Users]",
                HistoryTableBracket = "[Users_history]",
                DeletedTableBracket = "[Users_deleted]",
                SqlColumnCollection = column,
                SqlJoinCollection = join,
                SqlWhereCollection = where,
                SqlGroupByCollection = groupBy,
                SqlHavingCollection = having,
                SqlOrderByCollection = orderBy,
                SqlParamCollection = param,
                Distinct = distinct,
                Top = top,
                Offset = offset,
                PageSize = pageSize,
                CountRecord = countRecord,
                UnionType = unionType,
                Using = _using
            };
        }

        public static SqlSelect SelectMailAddresses(
            string dataTableName = "",
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlColumnCollection column = null,
            SqlJoinCollection join = null,
            SqlWhereCollection where = null,
            SqlGroupByCollection groupBy = null,
            SqlHavingCollection having = null,
            SqlOrderByCollection orderBy = null,
            SqlParamCollection param = null,
            bool distinct = false,
            int top = 0,
            int offset = 0,
            int pageSize = 0,
            bool countRecord = false,
            Sqls.UnionTypes unionType = Sqls.UnionTypes.None,
            bool _using = true)
        {
            return new SqlSelect
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[MailAddresses]",
                HistoryTableBracket = "[MailAddresses_history]",
                DeletedTableBracket = "[MailAddresses_deleted]",
                SqlColumnCollection = column,
                SqlJoinCollection = join,
                SqlWhereCollection = where,
                SqlGroupByCollection = groupBy,
                SqlHavingCollection = having,
                SqlOrderByCollection = orderBy,
                SqlParamCollection = param,
                Distinct = distinct,
                Top = top,
                Offset = offset,
                PageSize = pageSize,
                CountRecord = countRecord,
                UnionType = unionType,
                Using = _using
            };
        }

        public static SqlSelect SelectPermissions(
            string dataTableName = "",
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlColumnCollection column = null,
            SqlJoinCollection join = null,
            SqlWhereCollection where = null,
            SqlGroupByCollection groupBy = null,
            SqlHavingCollection having = null,
            SqlOrderByCollection orderBy = null,
            SqlParamCollection param = null,
            bool distinct = false,
            int top = 0,
            int offset = 0,
            int pageSize = 0,
            bool countRecord = false,
            Sqls.UnionTypes unionType = Sqls.UnionTypes.None,
            bool _using = true)
        {
            return new SqlSelect
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[Permissions]",
                HistoryTableBracket = "[Permissions_history]",
                DeletedTableBracket = "[Permissions_deleted]",
                SqlColumnCollection = column,
                SqlJoinCollection = join,
                SqlWhereCollection = where,
                SqlGroupByCollection = groupBy,
                SqlHavingCollection = having,
                SqlOrderByCollection = orderBy,
                SqlParamCollection = param,
                Distinct = distinct,
                Top = top,
                Offset = offset,
                PageSize = pageSize,
                CountRecord = countRecord,
                UnionType = unionType,
                Using = _using
            };
        }

        public static SqlSelect SelectOutgoingMails(
            string dataTableName = "",
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlColumnCollection column = null,
            SqlJoinCollection join = null,
            SqlWhereCollection where = null,
            SqlGroupByCollection groupBy = null,
            SqlHavingCollection having = null,
            SqlOrderByCollection orderBy = null,
            SqlParamCollection param = null,
            bool distinct = false,
            int top = 0,
            int offset = 0,
            int pageSize = 0,
            bool countRecord = false,
            Sqls.UnionTypes unionType = Sqls.UnionTypes.None,
            bool _using = true)
        {
            return new SqlSelect
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[OutgoingMails]",
                HistoryTableBracket = "[OutgoingMails_history]",
                DeletedTableBracket = "[OutgoingMails_deleted]",
                SqlColumnCollection = column,
                SqlJoinCollection = join,
                SqlWhereCollection = where,
                SqlGroupByCollection = groupBy,
                SqlHavingCollection = having,
                SqlOrderByCollection = orderBy,
                SqlParamCollection = param,
                Distinct = distinct,
                Top = top,
                Offset = offset,
                PageSize = pageSize,
                CountRecord = countRecord,
                UnionType = unionType,
                Using = _using
            };
        }

        public static SqlSelect SelectSearchIndexes(
            string dataTableName = "",
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlColumnCollection column = null,
            SqlJoinCollection join = null,
            SqlWhereCollection where = null,
            SqlGroupByCollection groupBy = null,
            SqlHavingCollection having = null,
            SqlOrderByCollection orderBy = null,
            SqlParamCollection param = null,
            bool distinct = false,
            int top = 0,
            int offset = 0,
            int pageSize = 0,
            bool countRecord = false,
            Sqls.UnionTypes unionType = Sqls.UnionTypes.None,
            bool _using = true)
        {
            return new SqlSelect
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[SearchIndexes]",
                HistoryTableBracket = "[SearchIndexes_history]",
                DeletedTableBracket = "[SearchIndexes_deleted]",
                SqlColumnCollection = column,
                SqlJoinCollection = join,
                SqlWhereCollection = where,
                SqlGroupByCollection = groupBy,
                SqlHavingCollection = having,
                SqlOrderByCollection = orderBy,
                SqlParamCollection = param,
                Distinct = distinct,
                Top = top,
                Offset = offset,
                PageSize = pageSize,
                CountRecord = countRecord,
                UnionType = unionType,
                Using = _using
            };
        }

        public static SqlSelect SelectItems(
            string dataTableName = "",
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlColumnCollection column = null,
            SqlJoinCollection join = null,
            SqlWhereCollection where = null,
            SqlGroupByCollection groupBy = null,
            SqlHavingCollection having = null,
            SqlOrderByCollection orderBy = null,
            SqlParamCollection param = null,
            bool distinct = false,
            int top = 0,
            int offset = 0,
            int pageSize = 0,
            bool countRecord = false,
            Sqls.UnionTypes unionType = Sqls.UnionTypes.None,
            bool _using = true)
        {
            return new SqlSelect
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[Items]",
                HistoryTableBracket = "[Items_history]",
                DeletedTableBracket = "[Items_deleted]",
                SqlColumnCollection = column,
                SqlJoinCollection = join,
                SqlWhereCollection = where,
                SqlGroupByCollection = groupBy,
                SqlHavingCollection = having,
                SqlOrderByCollection = orderBy,
                SqlParamCollection = param,
                Distinct = distinct,
                Top = top,
                Offset = offset,
                PageSize = pageSize,
                CountRecord = countRecord,
                UnionType = unionType,
                Using = _using
            };
        }

        public static SqlSelect SelectSites(
            string dataTableName = "",
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlColumnCollection column = null,
            SqlJoinCollection join = null,
            SqlWhereCollection where = null,
            SqlGroupByCollection groupBy = null,
            SqlHavingCollection having = null,
            SqlOrderByCollection orderBy = null,
            SqlParamCollection param = null,
            bool distinct = false,
            int top = 0,
            int offset = 0,
            int pageSize = 0,
            bool countRecord = false,
            Sqls.UnionTypes unionType = Sqls.UnionTypes.None,
            bool _using = true)
        {
            return new SqlSelect
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[Sites]",
                HistoryTableBracket = "[Sites_history]",
                DeletedTableBracket = "[Sites_deleted]",
                SqlColumnCollection = column,
                SqlJoinCollection = join,
                SqlWhereCollection = where,
                SqlGroupByCollection = groupBy,
                SqlHavingCollection = having,
                SqlOrderByCollection = orderBy,
                SqlParamCollection = param,
                Distinct = distinct,
                Top = top,
                Offset = offset,
                PageSize = pageSize,
                CountRecord = countRecord,
                UnionType = unionType,
                Using = _using
            };
        }

        public static SqlSelect SelectOrders(
            string dataTableName = "",
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlColumnCollection column = null,
            SqlJoinCollection join = null,
            SqlWhereCollection where = null,
            SqlGroupByCollection groupBy = null,
            SqlHavingCollection having = null,
            SqlOrderByCollection orderBy = null,
            SqlParamCollection param = null,
            bool distinct = false,
            int top = 0,
            int offset = 0,
            int pageSize = 0,
            bool countRecord = false,
            Sqls.UnionTypes unionType = Sqls.UnionTypes.None,
            bool _using = true)
        {
            return new SqlSelect
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[Orders]",
                HistoryTableBracket = "[Orders_history]",
                DeletedTableBracket = "[Orders_deleted]",
                SqlColumnCollection = column,
                SqlJoinCollection = join,
                SqlWhereCollection = where,
                SqlGroupByCollection = groupBy,
                SqlHavingCollection = having,
                SqlOrderByCollection = orderBy,
                SqlParamCollection = param,
                Distinct = distinct,
                Top = top,
                Offset = offset,
                PageSize = pageSize,
                CountRecord = countRecord,
                UnionType = unionType,
                Using = _using
            };
        }

        public static SqlSelect SelectExportSettings(
            string dataTableName = "",
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlColumnCollection column = null,
            SqlJoinCollection join = null,
            SqlWhereCollection where = null,
            SqlGroupByCollection groupBy = null,
            SqlHavingCollection having = null,
            SqlOrderByCollection orderBy = null,
            SqlParamCollection param = null,
            bool distinct = false,
            int top = 0,
            int offset = 0,
            int pageSize = 0,
            bool countRecord = false,
            Sqls.UnionTypes unionType = Sqls.UnionTypes.None,
            bool _using = true)
        {
            return new SqlSelect
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[ExportSettings]",
                HistoryTableBracket = "[ExportSettings_history]",
                DeletedTableBracket = "[ExportSettings_deleted]",
                SqlColumnCollection = column,
                SqlJoinCollection = join,
                SqlWhereCollection = where,
                SqlGroupByCollection = groupBy,
                SqlHavingCollection = having,
                SqlOrderByCollection = orderBy,
                SqlParamCollection = param,
                Distinct = distinct,
                Top = top,
                Offset = offset,
                PageSize = pageSize,
                CountRecord = countRecord,
                UnionType = unionType,
                Using = _using
            };
        }

        public static SqlSelect SelectLinks(
            string dataTableName = "",
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlColumnCollection column = null,
            SqlJoinCollection join = null,
            SqlWhereCollection where = null,
            SqlGroupByCollection groupBy = null,
            SqlHavingCollection having = null,
            SqlOrderByCollection orderBy = null,
            SqlParamCollection param = null,
            bool distinct = false,
            int top = 0,
            int offset = 0,
            int pageSize = 0,
            bool countRecord = false,
            Sqls.UnionTypes unionType = Sqls.UnionTypes.None,
            bool _using = true)
        {
            return new SqlSelect
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[Links]",
                HistoryTableBracket = "[Links_history]",
                DeletedTableBracket = "[Links_deleted]",
                SqlColumnCollection = column,
                SqlJoinCollection = join,
                SqlWhereCollection = where,
                SqlGroupByCollection = groupBy,
                SqlHavingCollection = having,
                SqlOrderByCollection = orderBy,
                SqlParamCollection = param,
                Distinct = distinct,
                Top = top,
                Offset = offset,
                PageSize = pageSize,
                CountRecord = countRecord,
                UnionType = unionType,
                Using = _using
            };
        }

        public static SqlSelect SelectBinaries(
            string dataTableName = "",
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlColumnCollection column = null,
            SqlJoinCollection join = null,
            SqlWhereCollection where = null,
            SqlGroupByCollection groupBy = null,
            SqlHavingCollection having = null,
            SqlOrderByCollection orderBy = null,
            SqlParamCollection param = null,
            bool distinct = false,
            int top = 0,
            int offset = 0,
            int pageSize = 0,
            bool countRecord = false,
            Sqls.UnionTypes unionType = Sqls.UnionTypes.None,
            bool _using = true)
        {
            return new SqlSelect
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[Binaries]",
                HistoryTableBracket = "[Binaries_history]",
                DeletedTableBracket = "[Binaries_deleted]",
                SqlColumnCollection = column,
                SqlJoinCollection = join,
                SqlWhereCollection = where,
                SqlGroupByCollection = groupBy,
                SqlHavingCollection = having,
                SqlOrderByCollection = orderBy,
                SqlParamCollection = param,
                Distinct = distinct,
                Top = top,
                Offset = offset,
                PageSize = pageSize,
                CountRecord = countRecord,
                UnionType = unionType,
                Using = _using
            };
        }

        public static SqlSelect SelectIssues(
            string dataTableName = "",
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlColumnCollection column = null,
            SqlJoinCollection join = null,
            SqlWhereCollection where = null,
            SqlGroupByCollection groupBy = null,
            SqlHavingCollection having = null,
            SqlOrderByCollection orderBy = null,
            SqlParamCollection param = null,
            bool distinct = false,
            int top = 0,
            int offset = 0,
            int pageSize = 0,
            bool countRecord = false,
            Sqls.UnionTypes unionType = Sqls.UnionTypes.None,
            bool _using = true)
        {
            return new SqlSelect
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[Issues]",
                HistoryTableBracket = "[Issues_history]",
                DeletedTableBracket = "[Issues_deleted]",
                SqlColumnCollection = column,
                SqlJoinCollection = join,
                SqlWhereCollection = where,
                SqlGroupByCollection = groupBy,
                SqlHavingCollection = having,
                SqlOrderByCollection = orderBy,
                SqlParamCollection = param,
                Distinct = distinct,
                Top = top,
                Offset = offset,
                PageSize = pageSize,
                CountRecord = countRecord,
                UnionType = unionType,
                Using = _using
            };
        }

        public static SqlSelect SelectResults(
            string dataTableName = "",
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlColumnCollection column = null,
            SqlJoinCollection join = null,
            SqlWhereCollection where = null,
            SqlGroupByCollection groupBy = null,
            SqlHavingCollection having = null,
            SqlOrderByCollection orderBy = null,
            SqlParamCollection param = null,
            bool distinct = false,
            int top = 0,
            int offset = 0,
            int pageSize = 0,
            bool countRecord = false,
            Sqls.UnionTypes unionType = Sqls.UnionTypes.None,
            bool _using = true)
        {
            return new SqlSelect
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[Results]",
                HistoryTableBracket = "[Results_history]",
                DeletedTableBracket = "[Results_deleted]",
                SqlColumnCollection = column,
                SqlJoinCollection = join,
                SqlWhereCollection = where,
                SqlGroupByCollection = groupBy,
                SqlHavingCollection = having,
                SqlOrderByCollection = orderBy,
                SqlParamCollection = param,
                Distinct = distinct,
                Top = top,
                Offset = offset,
                PageSize = pageSize,
                CountRecord = countRecord,
                UnionType = unionType,
                Using = _using
            };
        }

        public static SqlSelect SelectWikis(
            string dataTableName = "",
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlColumnCollection column = null,
            SqlJoinCollection join = null,
            SqlWhereCollection where = null,
            SqlGroupByCollection groupBy = null,
            SqlHavingCollection having = null,
            SqlOrderByCollection orderBy = null,
            SqlParamCollection param = null,
            bool distinct = false,
            int top = 0,
            int offset = 0,
            int pageSize = 0,
            bool countRecord = false,
            Sqls.UnionTypes unionType = Sqls.UnionTypes.None,
            bool _using = true)
        {
            return new SqlSelect
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[Wikis]",
                HistoryTableBracket = "[Wikis_history]",
                DeletedTableBracket = "[Wikis_deleted]",
                SqlColumnCollection = column,
                SqlJoinCollection = join,
                SqlWhereCollection = where,
                SqlGroupByCollection = groupBy,
                SqlHavingCollection = having,
                SqlOrderByCollection = orderBy,
                SqlParamCollection = param,
                Distinct = distinct,
                Top = top,
                Offset = offset,
                PageSize = pageSize,
                CountRecord = countRecord,
                UnionType = unionType,
                Using = _using
            };
        }

        public static SqlExists ExistsTenants(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlJoinCollection join = null,
            SqlWhereCollection where = null,
            bool _using = true)
        {
            return new SqlExists
            {
                TableType = tableType,
                TableBracket = "[Tenants]",
                HistoryTableBracket = "[Tenants_history]",
                DeletedTableBracket = "[Tenants_deleted]",
                SqlJoinCollection = join,
                SqlWhereCollection = where,
                Using = _using
            };
        }

        public static SqlExists ExistsDemos(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlJoinCollection join = null,
            SqlWhereCollection where = null,
            bool _using = true)
        {
            return new SqlExists
            {
                TableType = tableType,
                TableBracket = "[Demos]",
                HistoryTableBracket = "[Demos_history]",
                DeletedTableBracket = "[Demos_deleted]",
                SqlJoinCollection = join,
                SqlWhereCollection = where,
                Using = _using
            };
        }

        public static SqlExists ExistsSysLogs(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlJoinCollection join = null,
            SqlWhereCollection where = null,
            bool _using = true)
        {
            return new SqlExists
            {
                TableType = tableType,
                TableBracket = "[SysLogs]",
                HistoryTableBracket = "[SysLogs_history]",
                DeletedTableBracket = "[SysLogs_deleted]",
                SqlJoinCollection = join,
                SqlWhereCollection = where,
                Using = _using
            };
        }

        public static SqlExists ExistsDepts(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlJoinCollection join = null,
            SqlWhereCollection where = null,
            bool _using = true)
        {
            return new SqlExists
            {
                TableType = tableType,
                TableBracket = "[Depts]",
                HistoryTableBracket = "[Depts_history]",
                DeletedTableBracket = "[Depts_deleted]",
                SqlJoinCollection = join,
                SqlWhereCollection = where,
                Using = _using
            };
        }

        public static SqlExists ExistsUsers(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlJoinCollection join = null,
            SqlWhereCollection where = null,
            bool _using = true)
        {
            return new SqlExists
            {
                TableType = tableType,
                TableBracket = "[Users]",
                HistoryTableBracket = "[Users_history]",
                DeletedTableBracket = "[Users_deleted]",
                SqlJoinCollection = join,
                SqlWhereCollection = where,
                Using = _using
            };
        }

        public static SqlExists ExistsMailAddresses(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlJoinCollection join = null,
            SqlWhereCollection where = null,
            bool _using = true)
        {
            return new SqlExists
            {
                TableType = tableType,
                TableBracket = "[MailAddresses]",
                HistoryTableBracket = "[MailAddresses_history]",
                DeletedTableBracket = "[MailAddresses_deleted]",
                SqlJoinCollection = join,
                SqlWhereCollection = where,
                Using = _using
            };
        }

        public static SqlExists ExistsPermissions(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlJoinCollection join = null,
            SqlWhereCollection where = null,
            bool _using = true)
        {
            return new SqlExists
            {
                TableType = tableType,
                TableBracket = "[Permissions]",
                HistoryTableBracket = "[Permissions_history]",
                DeletedTableBracket = "[Permissions_deleted]",
                SqlJoinCollection = join,
                SqlWhereCollection = where,
                Using = _using
            };
        }

        public static SqlExists ExistsOutgoingMails(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlJoinCollection join = null,
            SqlWhereCollection where = null,
            bool _using = true)
        {
            return new SqlExists
            {
                TableType = tableType,
                TableBracket = "[OutgoingMails]",
                HistoryTableBracket = "[OutgoingMails_history]",
                DeletedTableBracket = "[OutgoingMails_deleted]",
                SqlJoinCollection = join,
                SqlWhereCollection = where,
                Using = _using
            };
        }

        public static SqlExists ExistsSearchIndexes(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlJoinCollection join = null,
            SqlWhereCollection where = null,
            bool _using = true)
        {
            return new SqlExists
            {
                TableType = tableType,
                TableBracket = "[SearchIndexes]",
                HistoryTableBracket = "[SearchIndexes_history]",
                DeletedTableBracket = "[SearchIndexes_deleted]",
                SqlJoinCollection = join,
                SqlWhereCollection = where,
                Using = _using
            };
        }

        public static SqlExists ExistsItems(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlJoinCollection join = null,
            SqlWhereCollection where = null,
            bool _using = true)
        {
            return new SqlExists
            {
                TableType = tableType,
                TableBracket = "[Items]",
                HistoryTableBracket = "[Items_history]",
                DeletedTableBracket = "[Items_deleted]",
                SqlJoinCollection = join,
                SqlWhereCollection = where,
                Using = _using
            };
        }

        public static SqlExists ExistsSites(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlJoinCollection join = null,
            SqlWhereCollection where = null,
            bool _using = true)
        {
            return new SqlExists
            {
                TableType = tableType,
                TableBracket = "[Sites]",
                HistoryTableBracket = "[Sites_history]",
                DeletedTableBracket = "[Sites_deleted]",
                SqlJoinCollection = join,
                SqlWhereCollection = where,
                Using = _using
            };
        }

        public static SqlExists ExistsOrders(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlJoinCollection join = null,
            SqlWhereCollection where = null,
            bool _using = true)
        {
            return new SqlExists
            {
                TableType = tableType,
                TableBracket = "[Orders]",
                HistoryTableBracket = "[Orders_history]",
                DeletedTableBracket = "[Orders_deleted]",
                SqlJoinCollection = join,
                SqlWhereCollection = where,
                Using = _using
            };
        }

        public static SqlExists ExistsExportSettings(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlJoinCollection join = null,
            SqlWhereCollection where = null,
            bool _using = true)
        {
            return new SqlExists
            {
                TableType = tableType,
                TableBracket = "[ExportSettings]",
                HistoryTableBracket = "[ExportSettings_history]",
                DeletedTableBracket = "[ExportSettings_deleted]",
                SqlJoinCollection = join,
                SqlWhereCollection = where,
                Using = _using
            };
        }

        public static SqlExists ExistsLinks(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlJoinCollection join = null,
            SqlWhereCollection where = null,
            bool _using = true)
        {
            return new SqlExists
            {
                TableType = tableType,
                TableBracket = "[Links]",
                HistoryTableBracket = "[Links_history]",
                DeletedTableBracket = "[Links_deleted]",
                SqlJoinCollection = join,
                SqlWhereCollection = where,
                Using = _using
            };
        }

        public static SqlExists ExistsBinaries(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlJoinCollection join = null,
            SqlWhereCollection where = null,
            bool _using = true)
        {
            return new SqlExists
            {
                TableType = tableType,
                TableBracket = "[Binaries]",
                HistoryTableBracket = "[Binaries_history]",
                DeletedTableBracket = "[Binaries_deleted]",
                SqlJoinCollection = join,
                SqlWhereCollection = where,
                Using = _using
            };
        }

        public static SqlExists ExistsIssues(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlJoinCollection join = null,
            SqlWhereCollection where = null,
            bool _using = true)
        {
            return new SqlExists
            {
                TableType = tableType,
                TableBracket = "[Issues]",
                HistoryTableBracket = "[Issues_history]",
                DeletedTableBracket = "[Issues_deleted]",
                SqlJoinCollection = join,
                SqlWhereCollection = where,
                Using = _using
            };
        }

        public static SqlExists ExistsResults(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlJoinCollection join = null,
            SqlWhereCollection where = null,
            bool _using = true)
        {
            return new SqlExists
            {
                TableType = tableType,
                TableBracket = "[Results]",
                HistoryTableBracket = "[Results_history]",
                DeletedTableBracket = "[Results_deleted]",
                SqlJoinCollection = join,
                SqlWhereCollection = where,
                Using = _using
            };
        }

        public static SqlExists ExistsWikis(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlJoinCollection join = null,
            SqlWhereCollection where = null,
            bool _using = true)
        {
            return new SqlExists
            {
                TableType = tableType,
                TableBracket = "[Wikis]",
                HistoryTableBracket = "[Wikis_history]",
                DeletedTableBracket = "[Wikis_deleted]",
                SqlJoinCollection = join,
                SqlWhereCollection = where,
                Using = _using
            };
        }

        public static SqlInsert InsertTenants(
            bool selectIdentity = false,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlParamCollection param = null,
            SqlStatement select = null,
            bool addUpdatorParam = true,
            string _if = "",
            bool _using = true)
        {
            return new SqlInsert
            {
                TableType = tableType,
                TableBracket = "[Tenants]",
                HistoryTableBracket = "[Tenants_history]",
                DeletedTableBracket = "[Tenants_deleted]",
                SelectIdentity = selectIdentity,
                SqlParamCollection = param,
                Select = select,
                AddUpdatorParam = addUpdatorParam,
                If = _if,
                Using = _using
            };
        }

        public static SqlStatement IdentityInsertTenants(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [Tenants] on;")
                : new SqlStatement("set identity_insert [Tenants] off;");
        }

        public static SqlStatement IdentityInsertTenants_Deleted(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [Tenants_Deleted] on;")
                : new SqlStatement("set identity_insert [Tenants_Deleted] off;");
        }

        public static SqlStatement IdentityInsertTenants_History(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [Tenants_History] on;")
                : new SqlStatement("set identity_insert [Tenants_History] off;");
        }

        public static SqlInsert InsertDemos(
            bool selectIdentity = false,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlParamCollection param = null,
            SqlStatement select = null,
            bool addUpdatorParam = true,
            string _if = "",
            bool _using = true)
        {
            return new SqlInsert
            {
                TableType = tableType,
                TableBracket = "[Demos]",
                HistoryTableBracket = "[Demos_history]",
                DeletedTableBracket = "[Demos_deleted]",
                SelectIdentity = selectIdentity,
                SqlParamCollection = param,
                Select = select,
                AddUpdatorParam = addUpdatorParam,
                If = _if,
                Using = _using
            };
        }

        public static SqlStatement IdentityInsertDemos(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [Demos] on;")
                : new SqlStatement("set identity_insert [Demos] off;");
        }

        public static SqlStatement IdentityInsertDemos_Deleted(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [Demos_Deleted] on;")
                : new SqlStatement("set identity_insert [Demos_Deleted] off;");
        }

        public static SqlStatement IdentityInsertDemos_History(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [Demos_History] on;")
                : new SqlStatement("set identity_insert [Demos_History] off;");
        }

        public static SqlInsert InsertSysLogs(
            bool selectIdentity = false,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlParamCollection param = null,
            SqlStatement select = null,
            bool addUpdatorParam = true,
            string _if = "",
            bool _using = true)
        {
            return new SqlInsert
            {
                TableType = tableType,
                TableBracket = "[SysLogs]",
                HistoryTableBracket = "[SysLogs_history]",
                DeletedTableBracket = "[SysLogs_deleted]",
                SelectIdentity = selectIdentity,
                SqlParamCollection = param,
                Select = select,
                AddUpdatorParam = addUpdatorParam,
                If = _if,
                Using = _using
            };
        }

        public static SqlStatement IdentityInsertSysLogs(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [SysLogs] on;")
                : new SqlStatement("set identity_insert [SysLogs] off;");
        }

        public static SqlStatement IdentityInsertSysLogs_Deleted(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [SysLogs_Deleted] on;")
                : new SqlStatement("set identity_insert [SysLogs_Deleted] off;");
        }

        public static SqlStatement IdentityInsertSysLogs_History(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [SysLogs_History] on;")
                : new SqlStatement("set identity_insert [SysLogs_History] off;");
        }

        public static SqlInsert InsertDepts(
            bool selectIdentity = false,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlParamCollection param = null,
            SqlStatement select = null,
            bool addUpdatorParam = true,
            string _if = "",
            bool _using = true)
        {
            return new SqlInsert
            {
                TableType = tableType,
                TableBracket = "[Depts]",
                HistoryTableBracket = "[Depts_history]",
                DeletedTableBracket = "[Depts_deleted]",
                SelectIdentity = selectIdentity,
                SqlParamCollection = param,
                Select = select,
                AddUpdatorParam = addUpdatorParam,
                If = _if,
                Using = _using
            };
        }

        public static SqlStatement IdentityInsertDepts(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [Depts] on;")
                : new SqlStatement("set identity_insert [Depts] off;");
        }

        public static SqlStatement IdentityInsertDepts_Deleted(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [Depts_Deleted] on;")
                : new SqlStatement("set identity_insert [Depts_Deleted] off;");
        }

        public static SqlStatement IdentityInsertDepts_History(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [Depts_History] on;")
                : new SqlStatement("set identity_insert [Depts_History] off;");
        }

        public static SqlInsert InsertUsers(
            bool selectIdentity = false,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlParamCollection param = null,
            SqlStatement select = null,
            bool addUpdatorParam = true,
            string _if = "",
            bool _using = true)
        {
            return new SqlInsert
            {
                TableType = tableType,
                TableBracket = "[Users]",
                HistoryTableBracket = "[Users_history]",
                DeletedTableBracket = "[Users_deleted]",
                SelectIdentity = selectIdentity,
                SqlParamCollection = param,
                Select = select,
                AddUpdatorParam = addUpdatorParam,
                If = _if,
                Using = _using
            };
        }

        public static SqlStatement IdentityInsertUsers(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [Users] on;")
                : new SqlStatement("set identity_insert [Users] off;");
        }

        public static SqlStatement IdentityInsertUsers_Deleted(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [Users_Deleted] on;")
                : new SqlStatement("set identity_insert [Users_Deleted] off;");
        }

        public static SqlStatement IdentityInsertUsers_History(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [Users_History] on;")
                : new SqlStatement("set identity_insert [Users_History] off;");
        }

        public static SqlInsert InsertMailAddresses(
            bool selectIdentity = false,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlParamCollection param = null,
            SqlStatement select = null,
            bool addUpdatorParam = true,
            string _if = "",
            bool _using = true)
        {
            return new SqlInsert
            {
                TableType = tableType,
                TableBracket = "[MailAddresses]",
                HistoryTableBracket = "[MailAddresses_history]",
                DeletedTableBracket = "[MailAddresses_deleted]",
                SelectIdentity = selectIdentity,
                SqlParamCollection = param,
                Select = select,
                AddUpdatorParam = addUpdatorParam,
                If = _if,
                Using = _using
            };
        }

        public static SqlStatement IdentityInsertMailAddresses(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [MailAddresses] on;")
                : new SqlStatement("set identity_insert [MailAddresses] off;");
        }

        public static SqlStatement IdentityInsertMailAddresses_Deleted(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [MailAddresses_Deleted] on;")
                : new SqlStatement("set identity_insert [MailAddresses_Deleted] off;");
        }

        public static SqlStatement IdentityInsertMailAddresses_History(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [MailAddresses_History] on;")
                : new SqlStatement("set identity_insert [MailAddresses_History] off;");
        }

        public static SqlInsert InsertPermissions(
            bool selectIdentity = false,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlParamCollection param = null,
            SqlStatement select = null,
            bool addUpdatorParam = true,
            string _if = "",
            bool _using = true)
        {
            return new SqlInsert
            {
                TableType = tableType,
                TableBracket = "[Permissions]",
                HistoryTableBracket = "[Permissions_history]",
                DeletedTableBracket = "[Permissions_deleted]",
                SelectIdentity = selectIdentity,
                SqlParamCollection = param,
                Select = select,
                AddUpdatorParam = addUpdatorParam,
                If = _if,
                Using = _using
            };
        }

        public static SqlStatement IdentityInsertPermissions(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [Permissions] on;")
                : new SqlStatement("set identity_insert [Permissions] off;");
        }

        public static SqlStatement IdentityInsertPermissions_Deleted(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [Permissions_Deleted] on;")
                : new SqlStatement("set identity_insert [Permissions_Deleted] off;");
        }

        public static SqlStatement IdentityInsertPermissions_History(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [Permissions_History] on;")
                : new SqlStatement("set identity_insert [Permissions_History] off;");
        }

        public static SqlInsert InsertOutgoingMails(
            bool selectIdentity = false,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlParamCollection param = null,
            SqlStatement select = null,
            bool addUpdatorParam = true,
            string _if = "",
            bool _using = true)
        {
            return new SqlInsert
            {
                TableType = tableType,
                TableBracket = "[OutgoingMails]",
                HistoryTableBracket = "[OutgoingMails_history]",
                DeletedTableBracket = "[OutgoingMails_deleted]",
                SelectIdentity = selectIdentity,
                SqlParamCollection = param,
                Select = select,
                AddUpdatorParam = addUpdatorParam,
                If = _if,
                Using = _using
            };
        }

        public static SqlStatement IdentityInsertOutgoingMails(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [OutgoingMails] on;")
                : new SqlStatement("set identity_insert [OutgoingMails] off;");
        }

        public static SqlStatement IdentityInsertOutgoingMails_Deleted(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [OutgoingMails_Deleted] on;")
                : new SqlStatement("set identity_insert [OutgoingMails_Deleted] off;");
        }

        public static SqlStatement IdentityInsertOutgoingMails_History(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [OutgoingMails_History] on;")
                : new SqlStatement("set identity_insert [OutgoingMails_History] off;");
        }

        public static SqlInsert InsertSearchIndexes(
            bool selectIdentity = false,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlParamCollection param = null,
            SqlStatement select = null,
            bool addUpdatorParam = true,
            string _if = "",
            bool _using = true)
        {
            return new SqlInsert
            {
                TableType = tableType,
                TableBracket = "[SearchIndexes]",
                HistoryTableBracket = "[SearchIndexes_history]",
                DeletedTableBracket = "[SearchIndexes_deleted]",
                SelectIdentity = selectIdentity,
                SqlParamCollection = param,
                Select = select,
                AddUpdatorParam = addUpdatorParam,
                If = _if,
                Using = _using
            };
        }

        public static SqlStatement IdentityInsertSearchIndexes(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [SearchIndexes] on;")
                : new SqlStatement("set identity_insert [SearchIndexes] off;");
        }

        public static SqlStatement IdentityInsertSearchIndexes_Deleted(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [SearchIndexes_Deleted] on;")
                : new SqlStatement("set identity_insert [SearchIndexes_Deleted] off;");
        }

        public static SqlStatement IdentityInsertSearchIndexes_History(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [SearchIndexes_History] on;")
                : new SqlStatement("set identity_insert [SearchIndexes_History] off;");
        }

        public static SqlInsert InsertItems(
            bool selectIdentity = false,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlParamCollection param = null,
            SqlStatement select = null,
            bool addUpdatorParam = true,
            string _if = "",
            bool _using = true)
        {
            return new SqlInsert
            {
                TableType = tableType,
                TableBracket = "[Items]",
                HistoryTableBracket = "[Items_history]",
                DeletedTableBracket = "[Items_deleted]",
                SelectIdentity = selectIdentity,
                SqlParamCollection = param,
                Select = select,
                AddUpdatorParam = addUpdatorParam,
                If = _if,
                Using = _using
            };
        }

        public static SqlStatement IdentityInsertItems(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [Items] on;")
                : new SqlStatement("set identity_insert [Items] off;");
        }

        public static SqlStatement IdentityInsertItems_Deleted(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [Items_Deleted] on;")
                : new SqlStatement("set identity_insert [Items_Deleted] off;");
        }

        public static SqlStatement IdentityInsertItems_History(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [Items_History] on;")
                : new SqlStatement("set identity_insert [Items_History] off;");
        }

        public static SqlInsert InsertSites(
            bool selectIdentity = false,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlParamCollection param = null,
            SqlStatement select = null,
            bool addUpdatorParam = true,
            string _if = "",
            bool _using = true)
        {
            return new SqlInsert
            {
                TableType = tableType,
                TableBracket = "[Sites]",
                HistoryTableBracket = "[Sites_history]",
                DeletedTableBracket = "[Sites_deleted]",
                SelectIdentity = selectIdentity,
                SqlParamCollection = param,
                Select = select,
                AddUpdatorParam = addUpdatorParam,
                If = _if,
                Using = _using
            };
        }

        public static SqlStatement IdentityInsertSites(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [Sites] on;")
                : new SqlStatement("set identity_insert [Sites] off;");
        }

        public static SqlStatement IdentityInsertSites_Deleted(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [Sites_Deleted] on;")
                : new SqlStatement("set identity_insert [Sites_Deleted] off;");
        }

        public static SqlStatement IdentityInsertSites_History(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [Sites_History] on;")
                : new SqlStatement("set identity_insert [Sites_History] off;");
        }

        public static SqlInsert InsertOrders(
            bool selectIdentity = false,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlParamCollection param = null,
            SqlStatement select = null,
            bool addUpdatorParam = true,
            string _if = "",
            bool _using = true)
        {
            return new SqlInsert
            {
                TableType = tableType,
                TableBracket = "[Orders]",
                HistoryTableBracket = "[Orders_history]",
                DeletedTableBracket = "[Orders_deleted]",
                SelectIdentity = selectIdentity,
                SqlParamCollection = param,
                Select = select,
                AddUpdatorParam = addUpdatorParam,
                If = _if,
                Using = _using
            };
        }

        public static SqlStatement IdentityInsertOrders(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [Orders] on;")
                : new SqlStatement("set identity_insert [Orders] off;");
        }

        public static SqlStatement IdentityInsertOrders_Deleted(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [Orders_Deleted] on;")
                : new SqlStatement("set identity_insert [Orders_Deleted] off;");
        }

        public static SqlStatement IdentityInsertOrders_History(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [Orders_History] on;")
                : new SqlStatement("set identity_insert [Orders_History] off;");
        }

        public static SqlInsert InsertExportSettings(
            bool selectIdentity = false,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlParamCollection param = null,
            SqlStatement select = null,
            bool addUpdatorParam = true,
            string _if = "",
            bool _using = true)
        {
            return new SqlInsert
            {
                TableType = tableType,
                TableBracket = "[ExportSettings]",
                HistoryTableBracket = "[ExportSettings_history]",
                DeletedTableBracket = "[ExportSettings_deleted]",
                SelectIdentity = selectIdentity,
                SqlParamCollection = param,
                Select = select,
                AddUpdatorParam = addUpdatorParam,
                If = _if,
                Using = _using
            };
        }

        public static SqlStatement IdentityInsertExportSettings(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [ExportSettings] on;")
                : new SqlStatement("set identity_insert [ExportSettings] off;");
        }

        public static SqlStatement IdentityInsertExportSettings_Deleted(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [ExportSettings_Deleted] on;")
                : new SqlStatement("set identity_insert [ExportSettings_Deleted] off;");
        }

        public static SqlStatement IdentityInsertExportSettings_History(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [ExportSettings_History] on;")
                : new SqlStatement("set identity_insert [ExportSettings_History] off;");
        }

        public static SqlInsert InsertLinks(
            bool selectIdentity = false,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlParamCollection param = null,
            SqlStatement select = null,
            bool addUpdatorParam = true,
            string _if = "",
            bool _using = true)
        {
            return new SqlInsert
            {
                TableType = tableType,
                TableBracket = "[Links]",
                HistoryTableBracket = "[Links_history]",
                DeletedTableBracket = "[Links_deleted]",
                SelectIdentity = selectIdentity,
                SqlParamCollection = param,
                Select = select,
                AddUpdatorParam = addUpdatorParam,
                If = _if,
                Using = _using
            };
        }

        public static SqlStatement IdentityInsertLinks(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [Links] on;")
                : new SqlStatement("set identity_insert [Links] off;");
        }

        public static SqlStatement IdentityInsertLinks_Deleted(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [Links_Deleted] on;")
                : new SqlStatement("set identity_insert [Links_Deleted] off;");
        }

        public static SqlStatement IdentityInsertLinks_History(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [Links_History] on;")
                : new SqlStatement("set identity_insert [Links_History] off;");
        }

        public static SqlInsert InsertBinaries(
            bool selectIdentity = false,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlParamCollection param = null,
            SqlStatement select = null,
            bool addUpdatorParam = true,
            string _if = "",
            bool _using = true)
        {
            return new SqlInsert
            {
                TableType = tableType,
                TableBracket = "[Binaries]",
                HistoryTableBracket = "[Binaries_history]",
                DeletedTableBracket = "[Binaries_deleted]",
                SelectIdentity = selectIdentity,
                SqlParamCollection = param,
                Select = select,
                AddUpdatorParam = addUpdatorParam,
                If = _if,
                Using = _using
            };
        }

        public static SqlStatement IdentityInsertBinaries(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [Binaries] on;")
                : new SqlStatement("set identity_insert [Binaries] off;");
        }

        public static SqlStatement IdentityInsertBinaries_Deleted(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [Binaries_Deleted] on;")
                : new SqlStatement("set identity_insert [Binaries_Deleted] off;");
        }

        public static SqlStatement IdentityInsertBinaries_History(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [Binaries_History] on;")
                : new SqlStatement("set identity_insert [Binaries_History] off;");
        }

        public static SqlInsert InsertIssues(
            bool selectIdentity = false,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlParamCollection param = null,
            SqlStatement select = null,
            bool addUpdatorParam = true,
            string _if = "",
            bool _using = true)
        {
            return new SqlInsert
            {
                TableType = tableType,
                TableBracket = "[Issues]",
                HistoryTableBracket = "[Issues_history]",
                DeletedTableBracket = "[Issues_deleted]",
                SelectIdentity = selectIdentity,
                SqlParamCollection = param,
                Select = select,
                AddUpdatorParam = addUpdatorParam,
                If = _if,
                Using = _using
            };
        }

        public static SqlStatement IdentityInsertIssues(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [Issues] on;")
                : new SqlStatement("set identity_insert [Issues] off;");
        }

        public static SqlStatement IdentityInsertIssues_Deleted(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [Issues_Deleted] on;")
                : new SqlStatement("set identity_insert [Issues_Deleted] off;");
        }

        public static SqlStatement IdentityInsertIssues_History(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [Issues_History] on;")
                : new SqlStatement("set identity_insert [Issues_History] off;");
        }

        public static SqlInsert InsertResults(
            bool selectIdentity = false,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlParamCollection param = null,
            SqlStatement select = null,
            bool addUpdatorParam = true,
            string _if = "",
            bool _using = true)
        {
            return new SqlInsert
            {
                TableType = tableType,
                TableBracket = "[Results]",
                HistoryTableBracket = "[Results_history]",
                DeletedTableBracket = "[Results_deleted]",
                SelectIdentity = selectIdentity,
                SqlParamCollection = param,
                Select = select,
                AddUpdatorParam = addUpdatorParam,
                If = _if,
                Using = _using
            };
        }

        public static SqlStatement IdentityInsertResults(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [Results] on;")
                : new SqlStatement("set identity_insert [Results] off;");
        }

        public static SqlStatement IdentityInsertResults_Deleted(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [Results_Deleted] on;")
                : new SqlStatement("set identity_insert [Results_Deleted] off;");
        }

        public static SqlStatement IdentityInsertResults_History(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [Results_History] on;")
                : new SqlStatement("set identity_insert [Results_History] off;");
        }

        public static SqlInsert InsertWikis(
            bool selectIdentity = false,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlParamCollection param = null,
            SqlStatement select = null,
            bool addUpdatorParam = true,
            string _if = "",
            bool _using = true)
        {
            return new SqlInsert
            {
                TableType = tableType,
                TableBracket = "[Wikis]",
                HistoryTableBracket = "[Wikis_history]",
                DeletedTableBracket = "[Wikis_deleted]",
                SelectIdentity = selectIdentity,
                SqlParamCollection = param,
                Select = select,
                AddUpdatorParam = addUpdatorParam,
                If = _if,
                Using = _using
            };
        }

        public static SqlStatement IdentityInsertWikis(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [Wikis] on;")
                : new SqlStatement("set identity_insert [Wikis] off;");
        }

        public static SqlStatement IdentityInsertWikis_Deleted(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [Wikis_Deleted] on;")
                : new SqlStatement("set identity_insert [Wikis_Deleted] off;");
        }

        public static SqlStatement IdentityInsertWikis_History(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [Wikis_History] on;")
                : new SqlStatement("set identity_insert [Wikis_History] off;");
        }

        public static SqlUpdate UpdateTenants(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool verUp = false,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool addUpdatorParam = true,
            bool addUpdatedTimeParam = true,
            bool countRecord = false,
            string _if = "",
            bool _using = true)
        {
            return new SqlUpdate
            {
                TableType = tableType,
                TableBracket = "[Tenants]",
                HistoryTableBracket = "[Tenants_history]",
                DeletedTableBracket = "[Tenants_deleted]",
                SaveHistoryCommandText = verUp ? SaveTenantsHistoryStatement : string.Empty,
                SqlWhereCollection = where,
                SqlParamCollection = param,
                AddUpdatorParam = addUpdatorParam,
                AddUpdatedTimeParam = addUpdatedTimeParam,
                CountRecord = countRecord,
                If = _if,
                Using = _using
            };
        }

        public static SqlUpdate UpdateDemos(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool verUp = false,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool addUpdatorParam = true,
            bool addUpdatedTimeParam = true,
            bool countRecord = false,
            string _if = "",
            bool _using = true)
        {
            return new SqlUpdate
            {
                TableType = tableType,
                TableBracket = "[Demos]",
                HistoryTableBracket = "[Demos_history]",
                DeletedTableBracket = "[Demos_deleted]",
                SaveHistoryCommandText = verUp ? SaveDemosHistoryStatement : string.Empty,
                SqlWhereCollection = where,
                SqlParamCollection = param,
                AddUpdatorParam = addUpdatorParam,
                AddUpdatedTimeParam = addUpdatedTimeParam,
                CountRecord = countRecord,
                If = _if,
                Using = _using
            };
        }

        public static SqlUpdate UpdateSysLogs(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool verUp = false,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool addUpdatorParam = true,
            bool addUpdatedTimeParam = true,
            bool countRecord = false,
            string _if = "",
            bool _using = true)
        {
            return new SqlUpdate
            {
                TableType = tableType,
                TableBracket = "[SysLogs]",
                HistoryTableBracket = "[SysLogs_history]",
                DeletedTableBracket = "[SysLogs_deleted]",
                SaveHistoryCommandText = verUp ? SaveSysLogsHistoryStatement : string.Empty,
                SqlWhereCollection = where,
                SqlParamCollection = param,
                AddUpdatorParam = addUpdatorParam,
                AddUpdatedTimeParam = addUpdatedTimeParam,
                CountRecord = countRecord,
                If = _if,
                Using = _using
            };
        }

        public static SqlUpdate UpdateDepts(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool verUp = false,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool addUpdatorParam = true,
            bool addUpdatedTimeParam = true,
            bool countRecord = false,
            string _if = "",
            bool _using = true)
        {
            return new SqlUpdate
            {
                TableType = tableType,
                TableBracket = "[Depts]",
                HistoryTableBracket = "[Depts_history]",
                DeletedTableBracket = "[Depts_deleted]",
                SaveHistoryCommandText = verUp ? SaveDeptsHistoryStatement : string.Empty,
                SqlWhereCollection = where,
                SqlParamCollection = param,
                AddUpdatorParam = addUpdatorParam,
                AddUpdatedTimeParam = addUpdatedTimeParam,
                CountRecord = countRecord,
                If = _if,
                Using = _using
            };
        }

        public static SqlUpdate UpdateUsers(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool verUp = false,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool addUpdatorParam = true,
            bool addUpdatedTimeParam = true,
            bool countRecord = false,
            string _if = "",
            bool _using = true)
        {
            return new SqlUpdate
            {
                TableType = tableType,
                TableBracket = "[Users]",
                HistoryTableBracket = "[Users_history]",
                DeletedTableBracket = "[Users_deleted]",
                SaveHistoryCommandText = verUp ? SaveUsersHistoryStatement : string.Empty,
                SqlWhereCollection = where,
                SqlParamCollection = param,
                AddUpdatorParam = addUpdatorParam,
                AddUpdatedTimeParam = addUpdatedTimeParam,
                CountRecord = countRecord,
                If = _if,
                Using = _using
            };
        }

        public static SqlUpdate UpdateMailAddresses(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool verUp = false,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool addUpdatorParam = true,
            bool addUpdatedTimeParam = true,
            bool countRecord = false,
            string _if = "",
            bool _using = true)
        {
            return new SqlUpdate
            {
                TableType = tableType,
                TableBracket = "[MailAddresses]",
                HistoryTableBracket = "[MailAddresses_history]",
                DeletedTableBracket = "[MailAddresses_deleted]",
                SaveHistoryCommandText = verUp ? SaveMailAddressesHistoryStatement : string.Empty,
                SqlWhereCollection = where,
                SqlParamCollection = param,
                AddUpdatorParam = addUpdatorParam,
                AddUpdatedTimeParam = addUpdatedTimeParam,
                CountRecord = countRecord,
                If = _if,
                Using = _using
            };
        }

        public static SqlUpdate UpdatePermissions(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool verUp = false,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool addUpdatorParam = true,
            bool addUpdatedTimeParam = true,
            bool countRecord = false,
            string _if = "",
            bool _using = true)
        {
            return new SqlUpdate
            {
                TableType = tableType,
                TableBracket = "[Permissions]",
                HistoryTableBracket = "[Permissions_history]",
                DeletedTableBracket = "[Permissions_deleted]",
                SaveHistoryCommandText = verUp ? SavePermissionsHistoryStatement : string.Empty,
                SqlWhereCollection = where,
                SqlParamCollection = param,
                AddUpdatorParam = addUpdatorParam,
                AddUpdatedTimeParam = addUpdatedTimeParam,
                CountRecord = countRecord,
                If = _if,
                Using = _using
            };
        }

        public static SqlUpdate UpdateOutgoingMails(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool verUp = false,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool addUpdatorParam = true,
            bool addUpdatedTimeParam = true,
            bool countRecord = false,
            string _if = "",
            bool _using = true)
        {
            return new SqlUpdate
            {
                TableType = tableType,
                TableBracket = "[OutgoingMails]",
                HistoryTableBracket = "[OutgoingMails_history]",
                DeletedTableBracket = "[OutgoingMails_deleted]",
                SaveHistoryCommandText = verUp ? SaveOutgoingMailsHistoryStatement : string.Empty,
                SqlWhereCollection = where,
                SqlParamCollection = param,
                AddUpdatorParam = addUpdatorParam,
                AddUpdatedTimeParam = addUpdatedTimeParam,
                CountRecord = countRecord,
                If = _if,
                Using = _using
            };
        }

        public static SqlUpdate UpdateSearchIndexes(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool verUp = false,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool addUpdatorParam = true,
            bool addUpdatedTimeParam = true,
            bool countRecord = false,
            string _if = "",
            bool _using = true)
        {
            return new SqlUpdate
            {
                TableType = tableType,
                TableBracket = "[SearchIndexes]",
                HistoryTableBracket = "[SearchIndexes_history]",
                DeletedTableBracket = "[SearchIndexes_deleted]",
                SaveHistoryCommandText = verUp ? SaveSearchIndexesHistoryStatement : string.Empty,
                SqlWhereCollection = where,
                SqlParamCollection = param,
                AddUpdatorParam = addUpdatorParam,
                AddUpdatedTimeParam = addUpdatedTimeParam,
                CountRecord = countRecord,
                If = _if,
                Using = _using
            };
        }

        public static SqlUpdate UpdateItems(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool verUp = false,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool addUpdatorParam = true,
            bool addUpdatedTimeParam = true,
            bool countRecord = false,
            string _if = "",
            bool _using = true)
        {
            return new SqlUpdate
            {
                TableType = tableType,
                TableBracket = "[Items]",
                HistoryTableBracket = "[Items_history]",
                DeletedTableBracket = "[Items_deleted]",
                SaveHistoryCommandText = verUp ? SaveItemsHistoryStatement : string.Empty,
                SqlWhereCollection = where,
                SqlParamCollection = param,
                AddUpdatorParam = addUpdatorParam,
                AddUpdatedTimeParam = addUpdatedTimeParam,
                CountRecord = countRecord,
                If = _if,
                Using = _using
            };
        }

        public static SqlUpdate UpdateSites(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool verUp = false,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool addUpdatorParam = true,
            bool addUpdatedTimeParam = true,
            bool countRecord = false,
            string _if = "",
            bool _using = true)
        {
            return new SqlUpdate
            {
                TableType = tableType,
                TableBracket = "[Sites]",
                HistoryTableBracket = "[Sites_history]",
                DeletedTableBracket = "[Sites_deleted]",
                SaveHistoryCommandText = verUp ? SaveSitesHistoryStatement : string.Empty,
                SqlWhereCollection = where,
                SqlParamCollection = param,
                AddUpdatorParam = addUpdatorParam,
                AddUpdatedTimeParam = addUpdatedTimeParam,
                CountRecord = countRecord,
                If = _if,
                Using = _using
            };
        }

        public static SqlUpdate UpdateOrders(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool verUp = false,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool addUpdatorParam = true,
            bool addUpdatedTimeParam = true,
            bool countRecord = false,
            string _if = "",
            bool _using = true)
        {
            return new SqlUpdate
            {
                TableType = tableType,
                TableBracket = "[Orders]",
                HistoryTableBracket = "[Orders_history]",
                DeletedTableBracket = "[Orders_deleted]",
                SaveHistoryCommandText = verUp ? SaveOrdersHistoryStatement : string.Empty,
                SqlWhereCollection = where,
                SqlParamCollection = param,
                AddUpdatorParam = addUpdatorParam,
                AddUpdatedTimeParam = addUpdatedTimeParam,
                CountRecord = countRecord,
                If = _if,
                Using = _using
            };
        }

        public static SqlUpdate UpdateExportSettings(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool verUp = false,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool addUpdatorParam = true,
            bool addUpdatedTimeParam = true,
            bool countRecord = false,
            string _if = "",
            bool _using = true)
        {
            return new SqlUpdate
            {
                TableType = tableType,
                TableBracket = "[ExportSettings]",
                HistoryTableBracket = "[ExportSettings_history]",
                DeletedTableBracket = "[ExportSettings_deleted]",
                SaveHistoryCommandText = verUp ? SaveExportSettingsHistoryStatement : string.Empty,
                SqlWhereCollection = where,
                SqlParamCollection = param,
                AddUpdatorParam = addUpdatorParam,
                AddUpdatedTimeParam = addUpdatedTimeParam,
                CountRecord = countRecord,
                If = _if,
                Using = _using
            };
        }

        public static SqlUpdate UpdateLinks(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool verUp = false,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool addUpdatorParam = true,
            bool addUpdatedTimeParam = true,
            bool countRecord = false,
            string _if = "",
            bool _using = true)
        {
            return new SqlUpdate
            {
                TableType = tableType,
                TableBracket = "[Links]",
                HistoryTableBracket = "[Links_history]",
                DeletedTableBracket = "[Links_deleted]",
                SaveHistoryCommandText = verUp ? SaveLinksHistoryStatement : string.Empty,
                SqlWhereCollection = where,
                SqlParamCollection = param,
                AddUpdatorParam = addUpdatorParam,
                AddUpdatedTimeParam = addUpdatedTimeParam,
                CountRecord = countRecord,
                If = _if,
                Using = _using
            };
        }

        public static SqlUpdate UpdateBinaries(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool verUp = false,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool addUpdatorParam = true,
            bool addUpdatedTimeParam = true,
            bool countRecord = false,
            string _if = "",
            bool _using = true)
        {
            return new SqlUpdate
            {
                TableType = tableType,
                TableBracket = "[Binaries]",
                HistoryTableBracket = "[Binaries_history]",
                DeletedTableBracket = "[Binaries_deleted]",
                SaveHistoryCommandText = verUp ? SaveBinariesHistoryStatement : string.Empty,
                SqlWhereCollection = where,
                SqlParamCollection = param,
                AddUpdatorParam = addUpdatorParam,
                AddUpdatedTimeParam = addUpdatedTimeParam,
                CountRecord = countRecord,
                If = _if,
                Using = _using
            };
        }

        public static SqlUpdate UpdateIssues(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool verUp = false,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool addUpdatorParam = true,
            bool addUpdatedTimeParam = true,
            bool countRecord = false,
            string _if = "",
            bool _using = true)
        {
            return new SqlUpdate
            {
                TableType = tableType,
                TableBracket = "[Issues]",
                HistoryTableBracket = "[Issues_history]",
                DeletedTableBracket = "[Issues_deleted]",
                SaveHistoryCommandText = verUp ? SaveIssuesHistoryStatement : string.Empty,
                SqlWhereCollection = where,
                SqlParamCollection = param,
                AddUpdatorParam = addUpdatorParam,
                AddUpdatedTimeParam = addUpdatedTimeParam,
                CountRecord = countRecord,
                If = _if,
                Using = _using
            };
        }

        public static SqlUpdate UpdateResults(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool verUp = false,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool addUpdatorParam = true,
            bool addUpdatedTimeParam = true,
            bool countRecord = false,
            string _if = "",
            bool _using = true)
        {
            return new SqlUpdate
            {
                TableType = tableType,
                TableBracket = "[Results]",
                HistoryTableBracket = "[Results_history]",
                DeletedTableBracket = "[Results_deleted]",
                SaveHistoryCommandText = verUp ? SaveResultsHistoryStatement : string.Empty,
                SqlWhereCollection = where,
                SqlParamCollection = param,
                AddUpdatorParam = addUpdatorParam,
                AddUpdatedTimeParam = addUpdatedTimeParam,
                CountRecord = countRecord,
                If = _if,
                Using = _using
            };
        }

        public static SqlUpdate UpdateWikis(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool verUp = false,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool addUpdatorParam = true,
            bool addUpdatedTimeParam = true,
            bool countRecord = false,
            string _if = "",
            bool _using = true)
        {
            return new SqlUpdate
            {
                TableType = tableType,
                TableBracket = "[Wikis]",
                HistoryTableBracket = "[Wikis_history]",
                DeletedTableBracket = "[Wikis_deleted]",
                SaveHistoryCommandText = verUp ? SaveWikisHistoryStatement : string.Empty,
                SqlWhereCollection = where,
                SqlParamCollection = param,
                AddUpdatorParam = addUpdatorParam,
                AddUpdatedTimeParam = addUpdatedTimeParam,
                CountRecord = countRecord,
                If = _if,
                Using = _using
            };
        }

        public static SqlUpdateOrInsert UpdateOrInsertTenants(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool selectIdentity = false,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool addUpdatorParam = true,
            bool addUpdatedTimeParam = true,
            bool countRecord = false,
            string _if = "",
            bool _using = true)
        {
            return new SqlUpdateOrInsert
            {
                TableType = tableType,
                TableBracket = "[Tenants]",
                HistoryTableBracket = "[Tenants_history]",
                DeletedTableBracket = "[Tenants_deleted]",
                SelectIdentity = selectIdentity,
                SqlWhereCollection = where,
                SqlParamCollection = param,
                AddUpdatorParam = addUpdatorParam,
                AddUpdatedTimeParam = addUpdatedTimeParam,
                CountRecord = countRecord,
                If = _if,
                Using = _using
            };
        }

        public static SqlUpdateOrInsert UpdateOrInsertDemos(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool selectIdentity = false,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool addUpdatorParam = true,
            bool addUpdatedTimeParam = true,
            bool countRecord = false,
            string _if = "",
            bool _using = true)
        {
            return new SqlUpdateOrInsert
            {
                TableType = tableType,
                TableBracket = "[Demos]",
                HistoryTableBracket = "[Demos_history]",
                DeletedTableBracket = "[Demos_deleted]",
                SelectIdentity = selectIdentity,
                SqlWhereCollection = where,
                SqlParamCollection = param,
                AddUpdatorParam = addUpdatorParam,
                AddUpdatedTimeParam = addUpdatedTimeParam,
                CountRecord = countRecord,
                If = _if,
                Using = _using
            };
        }

        public static SqlUpdateOrInsert UpdateOrInsertSysLogs(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool selectIdentity = false,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool addUpdatorParam = true,
            bool addUpdatedTimeParam = true,
            bool countRecord = false,
            string _if = "",
            bool _using = true)
        {
            return new SqlUpdateOrInsert
            {
                TableType = tableType,
                TableBracket = "[SysLogs]",
                HistoryTableBracket = "[SysLogs_history]",
                DeletedTableBracket = "[SysLogs_deleted]",
                SelectIdentity = selectIdentity,
                SqlWhereCollection = where,
                SqlParamCollection = param,
                AddUpdatorParam = addUpdatorParam,
                AddUpdatedTimeParam = addUpdatedTimeParam,
                CountRecord = countRecord,
                If = _if,
                Using = _using
            };
        }

        public static SqlUpdateOrInsert UpdateOrInsertDepts(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool selectIdentity = false,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool addUpdatorParam = true,
            bool addUpdatedTimeParam = true,
            bool countRecord = false,
            string _if = "",
            bool _using = true)
        {
            return new SqlUpdateOrInsert
            {
                TableType = tableType,
                TableBracket = "[Depts]",
                HistoryTableBracket = "[Depts_history]",
                DeletedTableBracket = "[Depts_deleted]",
                SelectIdentity = selectIdentity,
                SqlWhereCollection = where,
                SqlParamCollection = param,
                AddUpdatorParam = addUpdatorParam,
                AddUpdatedTimeParam = addUpdatedTimeParam,
                CountRecord = countRecord,
                If = _if,
                Using = _using
            };
        }

        public static SqlUpdateOrInsert UpdateOrInsertUsers(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool selectIdentity = false,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool addUpdatorParam = true,
            bool addUpdatedTimeParam = true,
            bool countRecord = false,
            string _if = "",
            bool _using = true)
        {
            return new SqlUpdateOrInsert
            {
                TableType = tableType,
                TableBracket = "[Users]",
                HistoryTableBracket = "[Users_history]",
                DeletedTableBracket = "[Users_deleted]",
                SelectIdentity = selectIdentity,
                SqlWhereCollection = where,
                SqlParamCollection = param,
                AddUpdatorParam = addUpdatorParam,
                AddUpdatedTimeParam = addUpdatedTimeParam,
                CountRecord = countRecord,
                If = _if,
                Using = _using
            };
        }

        public static SqlUpdateOrInsert UpdateOrInsertMailAddresses(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool selectIdentity = false,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool addUpdatorParam = true,
            bool addUpdatedTimeParam = true,
            bool countRecord = false,
            string _if = "",
            bool _using = true)
        {
            return new SqlUpdateOrInsert
            {
                TableType = tableType,
                TableBracket = "[MailAddresses]",
                HistoryTableBracket = "[MailAddresses_history]",
                DeletedTableBracket = "[MailAddresses_deleted]",
                SelectIdentity = selectIdentity,
                SqlWhereCollection = where,
                SqlParamCollection = param,
                AddUpdatorParam = addUpdatorParam,
                AddUpdatedTimeParam = addUpdatedTimeParam,
                CountRecord = countRecord,
                If = _if,
                Using = _using
            };
        }

        public static SqlUpdateOrInsert UpdateOrInsertPermissions(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool selectIdentity = false,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool addUpdatorParam = true,
            bool addUpdatedTimeParam = true,
            bool countRecord = false,
            string _if = "",
            bool _using = true)
        {
            return new SqlUpdateOrInsert
            {
                TableType = tableType,
                TableBracket = "[Permissions]",
                HistoryTableBracket = "[Permissions_history]",
                DeletedTableBracket = "[Permissions_deleted]",
                SelectIdentity = selectIdentity,
                SqlWhereCollection = where,
                SqlParamCollection = param,
                AddUpdatorParam = addUpdatorParam,
                AddUpdatedTimeParam = addUpdatedTimeParam,
                CountRecord = countRecord,
                If = _if,
                Using = _using
            };
        }

        public static SqlUpdateOrInsert UpdateOrInsertOutgoingMails(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool selectIdentity = false,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool addUpdatorParam = true,
            bool addUpdatedTimeParam = true,
            bool countRecord = false,
            string _if = "",
            bool _using = true)
        {
            return new SqlUpdateOrInsert
            {
                TableType = tableType,
                TableBracket = "[OutgoingMails]",
                HistoryTableBracket = "[OutgoingMails_history]",
                DeletedTableBracket = "[OutgoingMails_deleted]",
                SelectIdentity = selectIdentity,
                SqlWhereCollection = where,
                SqlParamCollection = param,
                AddUpdatorParam = addUpdatorParam,
                AddUpdatedTimeParam = addUpdatedTimeParam,
                CountRecord = countRecord,
                If = _if,
                Using = _using
            };
        }

        public static SqlUpdateOrInsert UpdateOrInsertSearchIndexes(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool selectIdentity = false,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool addUpdatorParam = true,
            bool addUpdatedTimeParam = true,
            bool countRecord = false,
            string _if = "",
            bool _using = true)
        {
            return new SqlUpdateOrInsert
            {
                TableType = tableType,
                TableBracket = "[SearchIndexes]",
                HistoryTableBracket = "[SearchIndexes_history]",
                DeletedTableBracket = "[SearchIndexes_deleted]",
                SelectIdentity = selectIdentity,
                SqlWhereCollection = where,
                SqlParamCollection = param,
                AddUpdatorParam = addUpdatorParam,
                AddUpdatedTimeParam = addUpdatedTimeParam,
                CountRecord = countRecord,
                If = _if,
                Using = _using
            };
        }

        public static SqlUpdateOrInsert UpdateOrInsertItems(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool selectIdentity = false,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool addUpdatorParam = true,
            bool addUpdatedTimeParam = true,
            bool countRecord = false,
            string _if = "",
            bool _using = true)
        {
            return new SqlUpdateOrInsert
            {
                TableType = tableType,
                TableBracket = "[Items]",
                HistoryTableBracket = "[Items_history]",
                DeletedTableBracket = "[Items_deleted]",
                SelectIdentity = selectIdentity,
                SqlWhereCollection = where,
                SqlParamCollection = param,
                AddUpdatorParam = addUpdatorParam,
                AddUpdatedTimeParam = addUpdatedTimeParam,
                CountRecord = countRecord,
                If = _if,
                Using = _using
            };
        }

        public static SqlUpdateOrInsert UpdateOrInsertSites(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool selectIdentity = false,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool addUpdatorParam = true,
            bool addUpdatedTimeParam = true,
            bool countRecord = false,
            string _if = "",
            bool _using = true)
        {
            return new SqlUpdateOrInsert
            {
                TableType = tableType,
                TableBracket = "[Sites]",
                HistoryTableBracket = "[Sites_history]",
                DeletedTableBracket = "[Sites_deleted]",
                SelectIdentity = selectIdentity,
                SqlWhereCollection = where,
                SqlParamCollection = param,
                AddUpdatorParam = addUpdatorParam,
                AddUpdatedTimeParam = addUpdatedTimeParam,
                CountRecord = countRecord,
                If = _if,
                Using = _using
            };
        }

        public static SqlUpdateOrInsert UpdateOrInsertOrders(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool selectIdentity = false,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool addUpdatorParam = true,
            bool addUpdatedTimeParam = true,
            bool countRecord = false,
            string _if = "",
            bool _using = true)
        {
            return new SqlUpdateOrInsert
            {
                TableType = tableType,
                TableBracket = "[Orders]",
                HistoryTableBracket = "[Orders_history]",
                DeletedTableBracket = "[Orders_deleted]",
                SelectIdentity = selectIdentity,
                SqlWhereCollection = where,
                SqlParamCollection = param,
                AddUpdatorParam = addUpdatorParam,
                AddUpdatedTimeParam = addUpdatedTimeParam,
                CountRecord = countRecord,
                If = _if,
                Using = _using
            };
        }

        public static SqlUpdateOrInsert UpdateOrInsertExportSettings(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool selectIdentity = false,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool addUpdatorParam = true,
            bool addUpdatedTimeParam = true,
            bool countRecord = false,
            string _if = "",
            bool _using = true)
        {
            return new SqlUpdateOrInsert
            {
                TableType = tableType,
                TableBracket = "[ExportSettings]",
                HistoryTableBracket = "[ExportSettings_history]",
                DeletedTableBracket = "[ExportSettings_deleted]",
                SelectIdentity = selectIdentity,
                SqlWhereCollection = where,
                SqlParamCollection = param,
                AddUpdatorParam = addUpdatorParam,
                AddUpdatedTimeParam = addUpdatedTimeParam,
                CountRecord = countRecord,
                If = _if,
                Using = _using
            };
        }

        public static SqlUpdateOrInsert UpdateOrInsertLinks(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool selectIdentity = false,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool addUpdatorParam = true,
            bool addUpdatedTimeParam = true,
            bool countRecord = false,
            string _if = "",
            bool _using = true)
        {
            return new SqlUpdateOrInsert
            {
                TableType = tableType,
                TableBracket = "[Links]",
                HistoryTableBracket = "[Links_history]",
                DeletedTableBracket = "[Links_deleted]",
                SelectIdentity = selectIdentity,
                SqlWhereCollection = where,
                SqlParamCollection = param,
                AddUpdatorParam = addUpdatorParam,
                AddUpdatedTimeParam = addUpdatedTimeParam,
                CountRecord = countRecord,
                If = _if,
                Using = _using
            };
        }

        public static SqlUpdateOrInsert UpdateOrInsertBinaries(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool selectIdentity = false,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool addUpdatorParam = true,
            bool addUpdatedTimeParam = true,
            bool countRecord = false,
            string _if = "",
            bool _using = true)
        {
            return new SqlUpdateOrInsert
            {
                TableType = tableType,
                TableBracket = "[Binaries]",
                HistoryTableBracket = "[Binaries_history]",
                DeletedTableBracket = "[Binaries_deleted]",
                SelectIdentity = selectIdentity,
                SqlWhereCollection = where,
                SqlParamCollection = param,
                AddUpdatorParam = addUpdatorParam,
                AddUpdatedTimeParam = addUpdatedTimeParam,
                CountRecord = countRecord,
                If = _if,
                Using = _using
            };
        }

        public static SqlUpdateOrInsert UpdateOrInsertIssues(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool selectIdentity = false,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool addUpdatorParam = true,
            bool addUpdatedTimeParam = true,
            bool countRecord = false,
            string _if = "",
            bool _using = true)
        {
            return new SqlUpdateOrInsert
            {
                TableType = tableType,
                TableBracket = "[Issues]",
                HistoryTableBracket = "[Issues_history]",
                DeletedTableBracket = "[Issues_deleted]",
                SelectIdentity = selectIdentity,
                SqlWhereCollection = where,
                SqlParamCollection = param,
                AddUpdatorParam = addUpdatorParam,
                AddUpdatedTimeParam = addUpdatedTimeParam,
                CountRecord = countRecord,
                If = _if,
                Using = _using
            };
        }

        public static SqlUpdateOrInsert UpdateOrInsertResults(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool selectIdentity = false,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool addUpdatorParam = true,
            bool addUpdatedTimeParam = true,
            bool countRecord = false,
            string _if = "",
            bool _using = true)
        {
            return new SqlUpdateOrInsert
            {
                TableType = tableType,
                TableBracket = "[Results]",
                HistoryTableBracket = "[Results_history]",
                DeletedTableBracket = "[Results_deleted]",
                SelectIdentity = selectIdentity,
                SqlWhereCollection = where,
                SqlParamCollection = param,
                AddUpdatorParam = addUpdatorParam,
                AddUpdatedTimeParam = addUpdatedTimeParam,
                CountRecord = countRecord,
                If = _if,
                Using = _using
            };
        }

        public static SqlUpdateOrInsert UpdateOrInsertWikis(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool selectIdentity = false,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool addUpdatorParam = true,
            bool addUpdatedTimeParam = true,
            bool countRecord = false,
            string _if = "",
            bool _using = true)
        {
            return new SqlUpdateOrInsert
            {
                TableType = tableType,
                TableBracket = "[Wikis]",
                HistoryTableBracket = "[Wikis_history]",
                DeletedTableBracket = "[Wikis_deleted]",
                SelectIdentity = selectIdentity,
                SqlWhereCollection = where,
                SqlParamCollection = param,
                AddUpdatorParam = addUpdatorParam,
                AddUpdatedTimeParam = addUpdatedTimeParam,
                CountRecord = countRecord,
                If = _if,
                Using = _using
            };
        }

        public static SqlDelete DeleteTenants(
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool countRecord = false,
            string _if = "",
            bool _using = true)
        {
            return new SqlDelete()
            {
                CommandText = DeleteTenantsStatement, 
                TableBracket = "[Tenants]",
                HistoryTableBracket = "[Tenants_history]",
                DeletedTableBracket = "[Tenants_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                CountRecord = countRecord,
                If = _if,
                Using = _using
            };
        }

        public static SqlDelete DeleteDemos(
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool countRecord = false,
            string _if = "",
            bool _using = true)
        {
            return new SqlDelete()
            {
                CommandText = DeleteDemosStatement, 
                TableBracket = "[Demos]",
                HistoryTableBracket = "[Demos_history]",
                DeletedTableBracket = "[Demos_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                CountRecord = countRecord,
                If = _if,
                Using = _using
            };
        }

        public static SqlDelete DeleteSysLogs(
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool countRecord = false,
            string _if = "",
            bool _using = true)
        {
            return new SqlDelete()
            {
                CommandText = DeleteSysLogsStatement, 
                TableBracket = "[SysLogs]",
                HistoryTableBracket = "[SysLogs_history]",
                DeletedTableBracket = "[SysLogs_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                CountRecord = countRecord,
                If = _if,
                Using = _using
            };
        }

        public static SqlDelete DeleteDepts(
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool countRecord = false,
            string _if = "",
            bool _using = true)
        {
            return new SqlDelete()
            {
                CommandText = DeleteDeptsStatement, 
                TableBracket = "[Depts]",
                HistoryTableBracket = "[Depts_history]",
                DeletedTableBracket = "[Depts_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                CountRecord = countRecord,
                If = _if,
                Using = _using
            };
        }

        public static SqlDelete DeleteUsers(
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool countRecord = false,
            string _if = "",
            bool _using = true)
        {
            return new SqlDelete()
            {
                CommandText = DeleteUsersStatement, 
                TableBracket = "[Users]",
                HistoryTableBracket = "[Users_history]",
                DeletedTableBracket = "[Users_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                CountRecord = countRecord,
                If = _if,
                Using = _using
            };
        }

        public static SqlDelete DeleteMailAddresses(
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool countRecord = false,
            string _if = "",
            bool _using = true)
        {
            return new SqlDelete()
            {
                CommandText = DeleteMailAddressesStatement, 
                TableBracket = "[MailAddresses]",
                HistoryTableBracket = "[MailAddresses_history]",
                DeletedTableBracket = "[MailAddresses_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                CountRecord = countRecord,
                If = _if,
                Using = _using
            };
        }

        public static SqlDelete DeletePermissions(
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool countRecord = false,
            string _if = "",
            bool _using = true)
        {
            return new SqlDelete()
            {
                CommandText = DeletePermissionsStatement, 
                TableBracket = "[Permissions]",
                HistoryTableBracket = "[Permissions_history]",
                DeletedTableBracket = "[Permissions_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                CountRecord = countRecord,
                If = _if,
                Using = _using
            };
        }

        public static SqlDelete DeleteOutgoingMails(
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool countRecord = false,
            string _if = "",
            bool _using = true)
        {
            return new SqlDelete()
            {
                CommandText = DeleteOutgoingMailsStatement, 
                TableBracket = "[OutgoingMails]",
                HistoryTableBracket = "[OutgoingMails_history]",
                DeletedTableBracket = "[OutgoingMails_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                CountRecord = countRecord,
                If = _if,
                Using = _using
            };
        }

        public static SqlDelete DeleteSearchIndexes(
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool countRecord = false,
            string _if = "",
            bool _using = true)
        {
            return new SqlDelete()
            {
                CommandText = DeleteSearchIndexesStatement, 
                TableBracket = "[SearchIndexes]",
                HistoryTableBracket = "[SearchIndexes_history]",
                DeletedTableBracket = "[SearchIndexes_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                CountRecord = countRecord,
                If = _if,
                Using = _using
            };
        }

        public static SqlDelete DeleteItems(
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool countRecord = false,
            string _if = "",
            bool _using = true)
        {
            return new SqlDelete()
            {
                CommandText = DeleteItemsStatement, 
                TableBracket = "[Items]",
                HistoryTableBracket = "[Items_history]",
                DeletedTableBracket = "[Items_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                CountRecord = countRecord,
                If = _if,
                Using = _using
            };
        }

        public static SqlDelete DeleteSites(
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool countRecord = false,
            string _if = "",
            bool _using = true)
        {
            return new SqlDelete()
            {
                CommandText = DeleteSitesStatement, 
                TableBracket = "[Sites]",
                HistoryTableBracket = "[Sites_history]",
                DeletedTableBracket = "[Sites_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                CountRecord = countRecord,
                If = _if,
                Using = _using
            };
        }

        public static SqlDelete DeleteOrders(
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool countRecord = false,
            string _if = "",
            bool _using = true)
        {
            return new SqlDelete()
            {
                CommandText = DeleteOrdersStatement, 
                TableBracket = "[Orders]",
                HistoryTableBracket = "[Orders_history]",
                DeletedTableBracket = "[Orders_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                CountRecord = countRecord,
                If = _if,
                Using = _using
            };
        }

        public static SqlDelete DeleteExportSettings(
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool countRecord = false,
            string _if = "",
            bool _using = true)
        {
            return new SqlDelete()
            {
                CommandText = DeleteExportSettingsStatement, 
                TableBracket = "[ExportSettings]",
                HistoryTableBracket = "[ExportSettings_history]",
                DeletedTableBracket = "[ExportSettings_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                CountRecord = countRecord,
                If = _if,
                Using = _using
            };
        }

        public static SqlDelete DeleteLinks(
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool countRecord = false,
            string _if = "",
            bool _using = true)
        {
            return new SqlDelete()
            {
                CommandText = DeleteLinksStatement, 
                TableBracket = "[Links]",
                HistoryTableBracket = "[Links_history]",
                DeletedTableBracket = "[Links_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                CountRecord = countRecord,
                If = _if,
                Using = _using
            };
        }

        public static SqlDelete DeleteBinaries(
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool countRecord = false,
            string _if = "",
            bool _using = true)
        {
            return new SqlDelete()
            {
                CommandText = DeleteBinariesStatement, 
                TableBracket = "[Binaries]",
                HistoryTableBracket = "[Binaries_history]",
                DeletedTableBracket = "[Binaries_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                CountRecord = countRecord,
                If = _if,
                Using = _using
            };
        }

        public static SqlDelete DeleteIssues(
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool countRecord = false,
            string _if = "",
            bool _using = true)
        {
            return new SqlDelete()
            {
                CommandText = DeleteIssuesStatement, 
                TableBracket = "[Issues]",
                HistoryTableBracket = "[Issues_history]",
                DeletedTableBracket = "[Issues_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                CountRecord = countRecord,
                If = _if,
                Using = _using
            };
        }

        public static SqlDelete DeleteResults(
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool countRecord = false,
            string _if = "",
            bool _using = true)
        {
            return new SqlDelete()
            {
                CommandText = DeleteResultsStatement, 
                TableBracket = "[Results]",
                HistoryTableBracket = "[Results_history]",
                DeletedTableBracket = "[Results_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                CountRecord = countRecord,
                If = _if,
                Using = _using
            };
        }

        public static SqlDelete DeleteWikis(
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool countRecord = false,
            string _if = "",
            bool _using = true)
        {
            return new SqlDelete()
            {
                CommandText = DeleteWikisStatement, 
                TableBracket = "[Wikis]",
                HistoryTableBracket = "[Wikis_history]",
                DeletedTableBracket = "[Wikis_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                CountRecord = countRecord,
                If = _if,
                Using = _using
            };
        }

        public static SqlPhysicalDelete PhysicalDeleteTenants(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool selectIdentity = false,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool countRecord = false,
            string _if = "",
            bool _using = true)
        {
            return new SqlPhysicalDelete()
            {
                TableType = tableType,
                TableBracket = "[Tenants]",
                HistoryTableBracket = "[Tenants_history]",
                DeletedTableBracket = "[Tenants_deleted]",
                SelectIdentity = selectIdentity,
                SqlWhereCollection = where,
                SqlParamCollection = param,
                CountRecord = countRecord,
                If = _if,
                Using = _using
            };
        }

        public static SqlPhysicalDelete PhysicalDeleteDemos(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool selectIdentity = false,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool countRecord = false,
            string _if = "",
            bool _using = true)
        {
            return new SqlPhysicalDelete()
            {
                TableType = tableType,
                TableBracket = "[Demos]",
                HistoryTableBracket = "[Demos_history]",
                DeletedTableBracket = "[Demos_deleted]",
                SelectIdentity = selectIdentity,
                SqlWhereCollection = where,
                SqlParamCollection = param,
                CountRecord = countRecord,
                If = _if,
                Using = _using
            };
        }

        public static SqlPhysicalDelete PhysicalDeleteSysLogs(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool selectIdentity = false,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool countRecord = false,
            string _if = "",
            bool _using = true)
        {
            return new SqlPhysicalDelete()
            {
                TableType = tableType,
                TableBracket = "[SysLogs]",
                HistoryTableBracket = "[SysLogs_history]",
                DeletedTableBracket = "[SysLogs_deleted]",
                SelectIdentity = selectIdentity,
                SqlWhereCollection = where,
                SqlParamCollection = param,
                CountRecord = countRecord,
                If = _if,
                Using = _using
            };
        }

        public static SqlPhysicalDelete PhysicalDeleteDepts(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool selectIdentity = false,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool countRecord = false,
            string _if = "",
            bool _using = true)
        {
            return new SqlPhysicalDelete()
            {
                TableType = tableType,
                TableBracket = "[Depts]",
                HistoryTableBracket = "[Depts_history]",
                DeletedTableBracket = "[Depts_deleted]",
                SelectIdentity = selectIdentity,
                SqlWhereCollection = where,
                SqlParamCollection = param,
                CountRecord = countRecord,
                If = _if,
                Using = _using
            };
        }

        public static SqlPhysicalDelete PhysicalDeleteUsers(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool selectIdentity = false,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool countRecord = false,
            string _if = "",
            bool _using = true)
        {
            return new SqlPhysicalDelete()
            {
                TableType = tableType,
                TableBracket = "[Users]",
                HistoryTableBracket = "[Users_history]",
                DeletedTableBracket = "[Users_deleted]",
                SelectIdentity = selectIdentity,
                SqlWhereCollection = where,
                SqlParamCollection = param,
                CountRecord = countRecord,
                If = _if,
                Using = _using
            };
        }

        public static SqlPhysicalDelete PhysicalDeleteMailAddresses(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool selectIdentity = false,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool countRecord = false,
            string _if = "",
            bool _using = true)
        {
            return new SqlPhysicalDelete()
            {
                TableType = tableType,
                TableBracket = "[MailAddresses]",
                HistoryTableBracket = "[MailAddresses_history]",
                DeletedTableBracket = "[MailAddresses_deleted]",
                SelectIdentity = selectIdentity,
                SqlWhereCollection = where,
                SqlParamCollection = param,
                CountRecord = countRecord,
                If = _if,
                Using = _using
            };
        }

        public static SqlPhysicalDelete PhysicalDeletePermissions(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool selectIdentity = false,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool countRecord = false,
            string _if = "",
            bool _using = true)
        {
            return new SqlPhysicalDelete()
            {
                TableType = tableType,
                TableBracket = "[Permissions]",
                HistoryTableBracket = "[Permissions_history]",
                DeletedTableBracket = "[Permissions_deleted]",
                SelectIdentity = selectIdentity,
                SqlWhereCollection = where,
                SqlParamCollection = param,
                CountRecord = countRecord,
                If = _if,
                Using = _using
            };
        }

        public static SqlPhysicalDelete PhysicalDeleteOutgoingMails(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool selectIdentity = false,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool countRecord = false,
            string _if = "",
            bool _using = true)
        {
            return new SqlPhysicalDelete()
            {
                TableType = tableType,
                TableBracket = "[OutgoingMails]",
                HistoryTableBracket = "[OutgoingMails_history]",
                DeletedTableBracket = "[OutgoingMails_deleted]",
                SelectIdentity = selectIdentity,
                SqlWhereCollection = where,
                SqlParamCollection = param,
                CountRecord = countRecord,
                If = _if,
                Using = _using
            };
        }

        public static SqlPhysicalDelete PhysicalDeleteSearchIndexes(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool selectIdentity = false,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool countRecord = false,
            string _if = "",
            bool _using = true)
        {
            return new SqlPhysicalDelete()
            {
                TableType = tableType,
                TableBracket = "[SearchIndexes]",
                HistoryTableBracket = "[SearchIndexes_history]",
                DeletedTableBracket = "[SearchIndexes_deleted]",
                SelectIdentity = selectIdentity,
                SqlWhereCollection = where,
                SqlParamCollection = param,
                CountRecord = countRecord,
                If = _if,
                Using = _using
            };
        }

        public static SqlPhysicalDelete PhysicalDeleteItems(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool selectIdentity = false,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool countRecord = false,
            string _if = "",
            bool _using = true)
        {
            return new SqlPhysicalDelete()
            {
                TableType = tableType,
                TableBracket = "[Items]",
                HistoryTableBracket = "[Items_history]",
                DeletedTableBracket = "[Items_deleted]",
                SelectIdentity = selectIdentity,
                SqlWhereCollection = where,
                SqlParamCollection = param,
                CountRecord = countRecord,
                If = _if,
                Using = _using
            };
        }

        public static SqlPhysicalDelete PhysicalDeleteSites(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool selectIdentity = false,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool countRecord = false,
            string _if = "",
            bool _using = true)
        {
            return new SqlPhysicalDelete()
            {
                TableType = tableType,
                TableBracket = "[Sites]",
                HistoryTableBracket = "[Sites_history]",
                DeletedTableBracket = "[Sites_deleted]",
                SelectIdentity = selectIdentity,
                SqlWhereCollection = where,
                SqlParamCollection = param,
                CountRecord = countRecord,
                If = _if,
                Using = _using
            };
        }

        public static SqlPhysicalDelete PhysicalDeleteOrders(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool selectIdentity = false,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool countRecord = false,
            string _if = "",
            bool _using = true)
        {
            return new SqlPhysicalDelete()
            {
                TableType = tableType,
                TableBracket = "[Orders]",
                HistoryTableBracket = "[Orders_history]",
                DeletedTableBracket = "[Orders_deleted]",
                SelectIdentity = selectIdentity,
                SqlWhereCollection = where,
                SqlParamCollection = param,
                CountRecord = countRecord,
                If = _if,
                Using = _using
            };
        }

        public static SqlPhysicalDelete PhysicalDeleteExportSettings(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool selectIdentity = false,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool countRecord = false,
            string _if = "",
            bool _using = true)
        {
            return new SqlPhysicalDelete()
            {
                TableType = tableType,
                TableBracket = "[ExportSettings]",
                HistoryTableBracket = "[ExportSettings_history]",
                DeletedTableBracket = "[ExportSettings_deleted]",
                SelectIdentity = selectIdentity,
                SqlWhereCollection = where,
                SqlParamCollection = param,
                CountRecord = countRecord,
                If = _if,
                Using = _using
            };
        }

        public static SqlPhysicalDelete PhysicalDeleteLinks(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool selectIdentity = false,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool countRecord = false,
            string _if = "",
            bool _using = true)
        {
            return new SqlPhysicalDelete()
            {
                TableType = tableType,
                TableBracket = "[Links]",
                HistoryTableBracket = "[Links_history]",
                DeletedTableBracket = "[Links_deleted]",
                SelectIdentity = selectIdentity,
                SqlWhereCollection = where,
                SqlParamCollection = param,
                CountRecord = countRecord,
                If = _if,
                Using = _using
            };
        }

        public static SqlPhysicalDelete PhysicalDeleteBinaries(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool selectIdentity = false,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool countRecord = false,
            string _if = "",
            bool _using = true)
        {
            return new SqlPhysicalDelete()
            {
                TableType = tableType,
                TableBracket = "[Binaries]",
                HistoryTableBracket = "[Binaries_history]",
                DeletedTableBracket = "[Binaries_deleted]",
                SelectIdentity = selectIdentity,
                SqlWhereCollection = where,
                SqlParamCollection = param,
                CountRecord = countRecord,
                If = _if,
                Using = _using
            };
        }

        public static SqlPhysicalDelete PhysicalDeleteIssues(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool selectIdentity = false,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool countRecord = false,
            string _if = "",
            bool _using = true)
        {
            return new SqlPhysicalDelete()
            {
                TableType = tableType,
                TableBracket = "[Issues]",
                HistoryTableBracket = "[Issues_history]",
                DeletedTableBracket = "[Issues_deleted]",
                SelectIdentity = selectIdentity,
                SqlWhereCollection = where,
                SqlParamCollection = param,
                CountRecord = countRecord,
                If = _if,
                Using = _using
            };
        }

        public static SqlPhysicalDelete PhysicalDeleteResults(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool selectIdentity = false,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool countRecord = false,
            string _if = "",
            bool _using = true)
        {
            return new SqlPhysicalDelete()
            {
                TableType = tableType,
                TableBracket = "[Results]",
                HistoryTableBracket = "[Results_history]",
                DeletedTableBracket = "[Results_deleted]",
                SelectIdentity = selectIdentity,
                SqlWhereCollection = where,
                SqlParamCollection = param,
                CountRecord = countRecord,
                If = _if,
                Using = _using
            };
        }

        public static SqlPhysicalDelete PhysicalDeleteWikis(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool selectIdentity = false,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool countRecord = false,
            string _if = "",
            bool _using = true)
        {
            return new SqlPhysicalDelete()
            {
                TableType = tableType,
                TableBracket = "[Wikis]",
                HistoryTableBracket = "[Wikis_history]",
                DeletedTableBracket = "[Wikis_deleted]",
                SelectIdentity = selectIdentity,
                SqlWhereCollection = where,
                SqlParamCollection = param,
                CountRecord = countRecord,
                If = _if,
                Using = _using
            };
        }

        public static SqlRestore RestoreTenants(
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool countRecord = false,
            string _if = "",
            bool _using = true)
        {
            return new SqlRestore()
            {
                CommandText = RestoreTenantsStatement, 
                TableBracket = "[Tenants]",
                HistoryTableBracket = "[Tenants_history]",
                DeletedTableBracket = "[Tenants_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                CountRecord = countRecord,
                If = _if,
                Using = _using
            };
        }

        public static SqlRestore RestoreDemos(
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool countRecord = false,
            string _if = "",
            bool _using = true)
        {
            return new SqlRestore()
            {
                CommandText = RestoreDemosStatement, 
                TableBracket = "[Demos]",
                HistoryTableBracket = "[Demos_history]",
                DeletedTableBracket = "[Demos_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                CountRecord = countRecord,
                If = _if,
                Using = _using
            };
        }

        public static SqlRestore RestoreSysLogs(
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool countRecord = false,
            string _if = "",
            bool _using = true)
        {
            return new SqlRestore()
            {
                CommandText = RestoreSysLogsStatement, 
                TableBracket = "[SysLogs]",
                HistoryTableBracket = "[SysLogs_history]",
                DeletedTableBracket = "[SysLogs_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                CountRecord = countRecord,
                If = _if,
                Using = _using
            };
        }

        public static SqlRestore RestoreDepts(
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool countRecord = false,
            string _if = "",
            bool _using = true)
        {
            return new SqlRestore()
            {
                CommandText = RestoreDeptsStatement, 
                TableBracket = "[Depts]",
                HistoryTableBracket = "[Depts_history]",
                DeletedTableBracket = "[Depts_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                CountRecord = countRecord,
                If = _if,
                Using = _using
            };
        }

        public static SqlRestore RestoreUsers(
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool countRecord = false,
            string _if = "",
            bool _using = true)
        {
            return new SqlRestore()
            {
                CommandText = RestoreUsersStatement, 
                TableBracket = "[Users]",
                HistoryTableBracket = "[Users_history]",
                DeletedTableBracket = "[Users_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                CountRecord = countRecord,
                If = _if,
                Using = _using
            };
        }

        public static SqlRestore RestoreMailAddresses(
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool countRecord = false,
            string _if = "",
            bool _using = true)
        {
            return new SqlRestore()
            {
                CommandText = RestoreMailAddressesStatement, 
                TableBracket = "[MailAddresses]",
                HistoryTableBracket = "[MailAddresses_history]",
                DeletedTableBracket = "[MailAddresses_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                CountRecord = countRecord,
                If = _if,
                Using = _using
            };
        }

        public static SqlRestore RestorePermissions(
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool countRecord = false,
            string _if = "",
            bool _using = true)
        {
            return new SqlRestore()
            {
                CommandText = RestorePermissionsStatement, 
                TableBracket = "[Permissions]",
                HistoryTableBracket = "[Permissions_history]",
                DeletedTableBracket = "[Permissions_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                CountRecord = countRecord,
                If = _if,
                Using = _using
            };
        }

        public static SqlRestore RestoreOutgoingMails(
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool countRecord = false,
            string _if = "",
            bool _using = true)
        {
            return new SqlRestore()
            {
                CommandText = RestoreOutgoingMailsStatement, 
                TableBracket = "[OutgoingMails]",
                HistoryTableBracket = "[OutgoingMails_history]",
                DeletedTableBracket = "[OutgoingMails_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                CountRecord = countRecord,
                If = _if,
                Using = _using
            };
        }

        public static SqlRestore RestoreSearchIndexes(
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool countRecord = false,
            string _if = "",
            bool _using = true)
        {
            return new SqlRestore()
            {
                CommandText = RestoreSearchIndexesStatement, 
                TableBracket = "[SearchIndexes]",
                HistoryTableBracket = "[SearchIndexes_history]",
                DeletedTableBracket = "[SearchIndexes_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                CountRecord = countRecord,
                If = _if,
                Using = _using
            };
        }

        public static SqlRestore RestoreItems(
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool countRecord = false,
            string _if = "",
            bool _using = true)
        {
            return new SqlRestore()
            {
                CommandText = RestoreItemsStatement, 
                TableBracket = "[Items]",
                HistoryTableBracket = "[Items_history]",
                DeletedTableBracket = "[Items_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                CountRecord = countRecord,
                If = _if,
                Using = _using
            };
        }

        public static SqlRestore RestoreSites(
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool countRecord = false,
            string _if = "",
            bool _using = true)
        {
            return new SqlRestore()
            {
                CommandText = RestoreSitesStatement, 
                TableBracket = "[Sites]",
                HistoryTableBracket = "[Sites_history]",
                DeletedTableBracket = "[Sites_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                CountRecord = countRecord,
                If = _if,
                Using = _using
            };
        }

        public static SqlRestore RestoreOrders(
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool countRecord = false,
            string _if = "",
            bool _using = true)
        {
            return new SqlRestore()
            {
                CommandText = RestoreOrdersStatement, 
                TableBracket = "[Orders]",
                HistoryTableBracket = "[Orders_history]",
                DeletedTableBracket = "[Orders_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                CountRecord = countRecord,
                If = _if,
                Using = _using
            };
        }

        public static SqlRestore RestoreExportSettings(
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool countRecord = false,
            string _if = "",
            bool _using = true)
        {
            return new SqlRestore()
            {
                CommandText = RestoreExportSettingsStatement, 
                TableBracket = "[ExportSettings]",
                HistoryTableBracket = "[ExportSettings_history]",
                DeletedTableBracket = "[ExportSettings_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                CountRecord = countRecord,
                If = _if,
                Using = _using
            };
        }

        public static SqlRestore RestoreLinks(
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool countRecord = false,
            string _if = "",
            bool _using = true)
        {
            return new SqlRestore()
            {
                CommandText = RestoreLinksStatement, 
                TableBracket = "[Links]",
                HistoryTableBracket = "[Links_history]",
                DeletedTableBracket = "[Links_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                CountRecord = countRecord,
                If = _if,
                Using = _using
            };
        }

        public static SqlRestore RestoreBinaries(
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool countRecord = false,
            string _if = "",
            bool _using = true)
        {
            return new SqlRestore()
            {
                CommandText = RestoreBinariesStatement, 
                TableBracket = "[Binaries]",
                HistoryTableBracket = "[Binaries_history]",
                DeletedTableBracket = "[Binaries_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                CountRecord = countRecord,
                If = _if,
                Using = _using
            };
        }

        public static SqlRestore RestoreIssues(
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool countRecord = false,
            string _if = "",
            bool _using = true)
        {
            return new SqlRestore()
            {
                CommandText = RestoreIssuesStatement, 
                TableBracket = "[Issues]",
                HistoryTableBracket = "[Issues_history]",
                DeletedTableBracket = "[Issues_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                CountRecord = countRecord,
                If = _if,
                Using = _using
            };
        }

        public static SqlRestore RestoreResults(
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool countRecord = false,
            string _if = "",
            bool _using = true)
        {
            return new SqlRestore()
            {
                CommandText = RestoreResultsStatement, 
                TableBracket = "[Results]",
                HistoryTableBracket = "[Results_history]",
                DeletedTableBracket = "[Results_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                CountRecord = countRecord,
                If = _if,
                Using = _using
            };
        }

        public static SqlRestore RestoreWikis(
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool countRecord = false,
            string _if = "",
            bool _using = true)
        {
            return new SqlRestore()
            {
                CommandText = RestoreWikisStatement, 
                TableBracket = "[Wikis]",
                HistoryTableBracket = "[Wikis_history]",
                DeletedTableBracket = "[Wikis_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                CountRecord = countRecord,
                If = _if,
                Using = _using
            };
        }

        public static IEnumerable<SqlStatement> TenantsAggregations(
            IEnumerable<Aggregation> aggregationCollection,
            SqlWhereCollection where)
        {
            var statementCollection = new List<SqlStatement>();
            aggregationCollection
                .Select((o, i) => new { Aggregation = o, Index = i })
                .ForEach(data =>
                {
                    var groupBy = TenantsGroupBy();
                    var column = TenantsColumn();
                    switch (data.Aggregation.GroupBy)
                    {
                        default: break;
                    }
                    switch (data.Aggregation.Type)
                    {
                        case Aggregation.Types.Count:
                            column.TenantsCount(); break;
                        case Aggregation.Types.Total:
                            switch (data.Aggregation.Target)
                            {
                                default: break;
                            }
                            break;
                        case Aggregation.Types.Average:
                            switch (data.Aggregation.Target)
                            {
                                default: break;
                            }
                            break;
                        default: break;
                    }
                    var statement = SelectTenants(
                        dataTableName: "Aggregation" + data.Index,
                        column: column,
                        where: where,
                        groupBy: groupBy);
                    statementCollection.Add(statement);
                });
            return statementCollection;
        }

        public static IEnumerable<SqlStatement> DemosAggregations(
            IEnumerable<Aggregation> aggregationCollection,
            SqlWhereCollection where)
        {
            var statementCollection = new List<SqlStatement>();
            aggregationCollection
                .Select((o, i) => new { Aggregation = o, Index = i })
                .ForEach(data =>
                {
                    var groupBy = DemosGroupBy();
                    var column = DemosColumn();
                    switch (data.Aggregation.GroupBy)
                    {
                        default: break;
                    }
                    switch (data.Aggregation.Type)
                    {
                        case Aggregation.Types.Count:
                            column.DemosCount(); break;
                        case Aggregation.Types.Total:
                            switch (data.Aggregation.Target)
                            {
                                default: break;
                            }
                            break;
                        case Aggregation.Types.Average:
                            switch (data.Aggregation.Target)
                            {
                                default: break;
                            }
                            break;
                        default: break;
                    }
                    var statement = SelectDemos(
                        dataTableName: "Aggregation" + data.Index,
                        column: column,
                        where: where,
                        groupBy: groupBy);
                    statementCollection.Add(statement);
                });
            return statementCollection;
        }

        public static IEnumerable<SqlStatement> SysLogsAggregations(
            IEnumerable<Aggregation> aggregationCollection,
            SqlWhereCollection where)
        {
            var statementCollection = new List<SqlStatement>();
            aggregationCollection
                .Select((o, i) => new { Aggregation = o, Index = i })
                .ForEach(data =>
                {
                    var groupBy = SysLogsGroupBy();
                    var column = SysLogsColumn();
                    switch (data.Aggregation.GroupBy)
                    {
                        default: break;
                    }
                    switch (data.Aggregation.Type)
                    {
                        case Aggregation.Types.Count:
                            column.SysLogsCount(); break;
                        case Aggregation.Types.Total:
                            switch (data.Aggregation.Target)
                            {
                                default: break;
                            }
                            break;
                        case Aggregation.Types.Average:
                            switch (data.Aggregation.Target)
                            {
                                default: break;
                            }
                            break;
                        default: break;
                    }
                    var statement = SelectSysLogs(
                        dataTableName: "Aggregation" + data.Index,
                        column: column,
                        where: where,
                        groupBy: groupBy);
                    statementCollection.Add(statement);
                });
            return statementCollection;
        }

        public static IEnumerable<SqlStatement> DeptsAggregations(
            IEnumerable<Aggregation> aggregationCollection,
            SqlWhereCollection where)
        {
            var statementCollection = new List<SqlStatement>();
            aggregationCollection
                .Select((o, i) => new { Aggregation = o, Index = i })
                .ForEach(data =>
                {
                    var groupBy = DeptsGroupBy();
                    var column = DeptsColumn();
                    switch (data.Aggregation.GroupBy)
                    {
                        default: break;
                    }
                    switch (data.Aggregation.Type)
                    {
                        case Aggregation.Types.Count:
                            column.DeptsCount(); break;
                        case Aggregation.Types.Total:
                            switch (data.Aggregation.Target)
                            {
                                default: break;
                            }
                            break;
                        case Aggregation.Types.Average:
                            switch (data.Aggregation.Target)
                            {
                                default: break;
                            }
                            break;
                        default: break;
                    }
                    var statement = SelectDepts(
                        dataTableName: "Aggregation" + data.Index,
                        column: column,
                        where: where,
                        groupBy: groupBy);
                    statementCollection.Add(statement);
                });
            return statementCollection;
        }

        public static IEnumerable<SqlStatement> UsersAggregations(
            IEnumerable<Aggregation> aggregationCollection,
            SqlWhereCollection where)
        {
            var statementCollection = new List<SqlStatement>();
            aggregationCollection
                .Select((o, i) => new { Aggregation = o, Index = i })
                .ForEach(data =>
                {
                    var groupBy = UsersGroupBy();
                    var column = UsersColumn();
                    switch (data.Aggregation.GroupBy)
                    {
                        default: break;
                    }
                    switch (data.Aggregation.Type)
                    {
                        case Aggregation.Types.Count:
                            column.UsersCount(); break;
                        case Aggregation.Types.Total:
                            switch (data.Aggregation.Target)
                            {
                                default: break;
                            }
                            break;
                        case Aggregation.Types.Average:
                            switch (data.Aggregation.Target)
                            {
                                default: break;
                            }
                            break;
                        default: break;
                    }
                    var statement = SelectUsers(
                        dataTableName: "Aggregation" + data.Index,
                        column: column,
                        where: where,
                        groupBy: groupBy);
                    statementCollection.Add(statement);
                });
            return statementCollection;
        }

        public static IEnumerable<SqlStatement> MailAddressesAggregations(
            IEnumerable<Aggregation> aggregationCollection,
            SqlWhereCollection where)
        {
            var statementCollection = new List<SqlStatement>();
            aggregationCollection
                .Select((o, i) => new { Aggregation = o, Index = i })
                .ForEach(data =>
                {
                    var groupBy = MailAddressesGroupBy();
                    var column = MailAddressesColumn();
                    switch (data.Aggregation.GroupBy)
                    {
                        default: break;
                    }
                    switch (data.Aggregation.Type)
                    {
                        case Aggregation.Types.Count:
                            column.MailAddressesCount(); break;
                        case Aggregation.Types.Total:
                            switch (data.Aggregation.Target)
                            {
                                default: break;
                            }
                            break;
                        case Aggregation.Types.Average:
                            switch (data.Aggregation.Target)
                            {
                                default: break;
                            }
                            break;
                        default: break;
                    }
                    var statement = SelectMailAddresses(
                        dataTableName: "Aggregation" + data.Index,
                        column: column,
                        where: where,
                        groupBy: groupBy);
                    statementCollection.Add(statement);
                });
            return statementCollection;
        }

        public static IEnumerable<SqlStatement> PermissionsAggregations(
            IEnumerable<Aggregation> aggregationCollection,
            SqlWhereCollection where)
        {
            var statementCollection = new List<SqlStatement>();
            aggregationCollection
                .Select((o, i) => new { Aggregation = o, Index = i })
                .ForEach(data =>
                {
                    var groupBy = PermissionsGroupBy();
                    var column = PermissionsColumn();
                    switch (data.Aggregation.GroupBy)
                    {
                        default: break;
                    }
                    switch (data.Aggregation.Type)
                    {
                        case Aggregation.Types.Count:
                            column.PermissionsCount(); break;
                        case Aggregation.Types.Total:
                            switch (data.Aggregation.Target)
                            {
                                default: break;
                            }
                            break;
                        case Aggregation.Types.Average:
                            switch (data.Aggregation.Target)
                            {
                                default: break;
                            }
                            break;
                        default: break;
                    }
                    var statement = SelectPermissions(
                        dataTableName: "Aggregation" + data.Index,
                        column: column,
                        where: where,
                        groupBy: groupBy);
                    statementCollection.Add(statement);
                });
            return statementCollection;
        }

        public static IEnumerable<SqlStatement> OutgoingMailsAggregations(
            IEnumerable<Aggregation> aggregationCollection,
            SqlWhereCollection where)
        {
            var statementCollection = new List<SqlStatement>();
            aggregationCollection
                .Select((o, i) => new { Aggregation = o, Index = i })
                .ForEach(data =>
                {
                    var groupBy = OutgoingMailsGroupBy();
                    var column = OutgoingMailsColumn();
                    switch (data.Aggregation.GroupBy)
                    {
                        default: break;
                    }
                    switch (data.Aggregation.Type)
                    {
                        case Aggregation.Types.Count:
                            column.OutgoingMailsCount(); break;
                        case Aggregation.Types.Total:
                            switch (data.Aggregation.Target)
                            {
                                default: break;
                            }
                            break;
                        case Aggregation.Types.Average:
                            switch (data.Aggregation.Target)
                            {
                                default: break;
                            }
                            break;
                        default: break;
                    }
                    var statement = SelectOutgoingMails(
                        dataTableName: "Aggregation" + data.Index,
                        column: column,
                        where: where,
                        groupBy: groupBy);
                    statementCollection.Add(statement);
                });
            return statementCollection;
        }

        public static IEnumerable<SqlStatement> SearchIndexesAggregations(
            IEnumerable<Aggregation> aggregationCollection,
            SqlWhereCollection where)
        {
            var statementCollection = new List<SqlStatement>();
            aggregationCollection
                .Select((o, i) => new { Aggregation = o, Index = i })
                .ForEach(data =>
                {
                    var groupBy = SearchIndexesGroupBy();
                    var column = SearchIndexesColumn();
                    switch (data.Aggregation.GroupBy)
                    {
                        default: break;
                    }
                    switch (data.Aggregation.Type)
                    {
                        case Aggregation.Types.Count:
                            column.SearchIndexesCount(); break;
                        case Aggregation.Types.Total:
                            switch (data.Aggregation.Target)
                            {
                                case "Priority": column.PriorityTotal(); break;
                                default: break;
                            }
                            break;
                        case Aggregation.Types.Average:
                            switch (data.Aggregation.Target)
                            {
                                case "Priority": column.PriorityAverage(); break;
                                default: break;
                            }
                            break;
                        default: break;
                    }
                    var statement = SelectSearchIndexes(
                        dataTableName: "Aggregation" + data.Index,
                        column: column,
                        where: where,
                        groupBy: groupBy);
                    statementCollection.Add(statement);
                });
            return statementCollection;
        }

        public static IEnumerable<SqlStatement> ItemsAggregations(
            IEnumerable<Aggregation> aggregationCollection,
            SqlWhereCollection where)
        {
            var statementCollection = new List<SqlStatement>();
            aggregationCollection
                .Select((o, i) => new { Aggregation = o, Index = i })
                .ForEach(data =>
                {
                    var groupBy = ItemsGroupBy();
                    var column = ItemsColumn();
                    switch (data.Aggregation.GroupBy)
                    {
                        default: break;
                    }
                    switch (data.Aggregation.Type)
                    {
                        case Aggregation.Types.Count:
                            column.ItemsCount(); break;
                        case Aggregation.Types.Total:
                            switch (data.Aggregation.Target)
                            {
                                default: break;
                            }
                            break;
                        case Aggregation.Types.Average:
                            switch (data.Aggregation.Target)
                            {
                                default: break;
                            }
                            break;
                        default: break;
                    }
                    var statement = SelectItems(
                        dataTableName: "Aggregation" + data.Index,
                        column: column,
                        where: where,
                        groupBy: groupBy);
                    statementCollection.Add(statement);
                });
            return statementCollection;
        }

        public static IEnumerable<SqlStatement> SitesAggregations(
            IEnumerable<Aggregation> aggregationCollection,
            SqlWhereCollection where)
        {
            var statementCollection = new List<SqlStatement>();
            aggregationCollection
                .Select((o, i) => new { Aggregation = o, Index = i })
                .ForEach(data =>
                {
                    var groupBy = SitesGroupBy();
                    var column = SitesColumn();
                    switch (data.Aggregation.GroupBy)
                    {
                        default: break;
                    }
                    switch (data.Aggregation.Type)
                    {
                        case Aggregation.Types.Count:
                            column.SitesCount(); break;
                        case Aggregation.Types.Total:
                            switch (data.Aggregation.Target)
                            {
                                default: break;
                            }
                            break;
                        case Aggregation.Types.Average:
                            switch (data.Aggregation.Target)
                            {
                                default: break;
                            }
                            break;
                        default: break;
                    }
                    var statement = SelectSites(
                        dataTableName: "Aggregation" + data.Index,
                        column: column,
                        where: where,
                        groupBy: groupBy);
                    statementCollection.Add(statement);
                });
            return statementCollection;
        }

        public static IEnumerable<SqlStatement> OrdersAggregations(
            IEnumerable<Aggregation> aggregationCollection,
            SqlWhereCollection where)
        {
            var statementCollection = new List<SqlStatement>();
            aggregationCollection
                .Select((o, i) => new { Aggregation = o, Index = i })
                .ForEach(data =>
                {
                    var groupBy = OrdersGroupBy();
                    var column = OrdersColumn();
                    switch (data.Aggregation.GroupBy)
                    {
                        default: break;
                    }
                    switch (data.Aggregation.Type)
                    {
                        case Aggregation.Types.Count:
                            column.OrdersCount(); break;
                        case Aggregation.Types.Total:
                            switch (data.Aggregation.Target)
                            {
                                default: break;
                            }
                            break;
                        case Aggregation.Types.Average:
                            switch (data.Aggregation.Target)
                            {
                                default: break;
                            }
                            break;
                        default: break;
                    }
                    var statement = SelectOrders(
                        dataTableName: "Aggregation" + data.Index,
                        column: column,
                        where: where,
                        groupBy: groupBy);
                    statementCollection.Add(statement);
                });
            return statementCollection;
        }

        public static IEnumerable<SqlStatement> ExportSettingsAggregations(
            IEnumerable<Aggregation> aggregationCollection,
            SqlWhereCollection where)
        {
            var statementCollection = new List<SqlStatement>();
            aggregationCollection
                .Select((o, i) => new { Aggregation = o, Index = i })
                .ForEach(data =>
                {
                    var groupBy = ExportSettingsGroupBy();
                    var column = ExportSettingsColumn();
                    switch (data.Aggregation.GroupBy)
                    {
                        default: break;
                    }
                    switch (data.Aggregation.Type)
                    {
                        case Aggregation.Types.Count:
                            column.ExportSettingsCount(); break;
                        case Aggregation.Types.Total:
                            switch (data.Aggregation.Target)
                            {
                                default: break;
                            }
                            break;
                        case Aggregation.Types.Average:
                            switch (data.Aggregation.Target)
                            {
                                default: break;
                            }
                            break;
                        default: break;
                    }
                    var statement = SelectExportSettings(
                        dataTableName: "Aggregation" + data.Index,
                        column: column,
                        where: where,
                        groupBy: groupBy);
                    statementCollection.Add(statement);
                });
            return statementCollection;
        }

        public static IEnumerable<SqlStatement> LinksAggregations(
            IEnumerable<Aggregation> aggregationCollection,
            SqlWhereCollection where)
        {
            var statementCollection = new List<SqlStatement>();
            aggregationCollection
                .Select((o, i) => new { Aggregation = o, Index = i })
                .ForEach(data =>
                {
                    var groupBy = LinksGroupBy();
                    var column = LinksColumn();
                    switch (data.Aggregation.GroupBy)
                    {
                        default: break;
                    }
                    switch (data.Aggregation.Type)
                    {
                        case Aggregation.Types.Count:
                            column.LinksCount(); break;
                        case Aggregation.Types.Total:
                            switch (data.Aggregation.Target)
                            {
                                default: break;
                            }
                            break;
                        case Aggregation.Types.Average:
                            switch (data.Aggregation.Target)
                            {
                                default: break;
                            }
                            break;
                        default: break;
                    }
                    var statement = SelectLinks(
                        dataTableName: "Aggregation" + data.Index,
                        column: column,
                        where: where,
                        groupBy: groupBy);
                    statementCollection.Add(statement);
                });
            return statementCollection;
        }

        public static IEnumerable<SqlStatement> BinariesAggregations(
            IEnumerable<Aggregation> aggregationCollection,
            SqlWhereCollection where)
        {
            var statementCollection = new List<SqlStatement>();
            aggregationCollection
                .Select((o, i) => new { Aggregation = o, Index = i })
                .ForEach(data =>
                {
                    var groupBy = BinariesGroupBy();
                    var column = BinariesColumn();
                    switch (data.Aggregation.GroupBy)
                    {
                        default: break;
                    }
                    switch (data.Aggregation.Type)
                    {
                        case Aggregation.Types.Count:
                            column.BinariesCount(); break;
                        case Aggregation.Types.Total:
                            switch (data.Aggregation.Target)
                            {
                                default: break;
                            }
                            break;
                        case Aggregation.Types.Average:
                            switch (data.Aggregation.Target)
                            {
                                default: break;
                            }
                            break;
                        default: break;
                    }
                    var statement = SelectBinaries(
                        dataTableName: "Aggregation" + data.Index,
                        column: column,
                        where: where,
                        groupBy: groupBy);
                    statementCollection.Add(statement);
                });
            return statementCollection;
        }

        public static IEnumerable<SqlStatement> IssuesAggregations(
            IEnumerable<Aggregation> aggregationCollection,
            SqlWhereCollection where)
        {
            var statementCollection = new List<SqlStatement>();
            aggregationCollection
                .Select((o, i) => new { Aggregation = o, Index = i })
                .ForEach(data =>
                {
                    var groupBy = IssuesGroupBy();
                    var column = IssuesColumn();
                    switch (data.Aggregation.GroupBy)
                    {
                        case "Status": groupBy.Status(); column.Status(); break;
                        case "Manager": groupBy.Manager(); column.Manager(); break;
                        case "Owner": groupBy.Owner(); column.Owner(); break;
                        case "ClassA": groupBy.ClassA(); column.ClassA(); break;
                        case "ClassB": groupBy.ClassB(); column.ClassB(); break;
                        case "ClassC": groupBy.ClassC(); column.ClassC(); break;
                        case "ClassD": groupBy.ClassD(); column.ClassD(); break;
                        case "ClassE": groupBy.ClassE(); column.ClassE(); break;
                        case "ClassF": groupBy.ClassF(); column.ClassF(); break;
                        case "ClassG": groupBy.ClassG(); column.ClassG(); break;
                        case "ClassH": groupBy.ClassH(); column.ClassH(); break;
                        case "ClassI": groupBy.ClassI(); column.ClassI(); break;
                        case "ClassJ": groupBy.ClassJ(); column.ClassJ(); break;
                        case "ClassK": groupBy.ClassK(); column.ClassK(); break;
                        case "ClassL": groupBy.ClassL(); column.ClassL(); break;
                        case "ClassM": groupBy.ClassM(); column.ClassM(); break;
                        case "ClassN": groupBy.ClassN(); column.ClassN(); break;
                        case "ClassO": groupBy.ClassO(); column.ClassO(); break;
                        case "ClassP": groupBy.ClassP(); column.ClassP(); break;
                        default: break;
                    }
                    switch (data.Aggregation.Type)
                    {
                        case Aggregation.Types.Count:
                            column.IssuesCount(); break;
                        case Aggregation.Types.Total:
                            switch (data.Aggregation.Target)
                            {
                                case "WorkValue": column.WorkValueTotal(); break;
                                case "RemainingWorkValue": column.RemainingWorkValueTotal(); break;
                                case "NumA": column.NumATotal(); break;
                                case "NumB": column.NumBTotal(); break;
                                case "NumC": column.NumCTotal(); break;
                                case "NumD": column.NumDTotal(); break;
                                case "NumE": column.NumETotal(); break;
                                case "NumF": column.NumFTotal(); break;
                                case "NumG": column.NumGTotal(); break;
                                case "NumH": column.NumHTotal(); break;
                                case "NumI": column.NumITotal(); break;
                                case "NumJ": column.NumJTotal(); break;
                                case "NumK": column.NumKTotal(); break;
                                case "NumL": column.NumLTotal(); break;
                                case "NumM": column.NumMTotal(); break;
                                case "NumN": column.NumNTotal(); break;
                                case "NumO": column.NumOTotal(); break;
                                case "NumP": column.NumPTotal(); break;
                                default: break;
                            }
                            break;
                        case Aggregation.Types.Average:
                            switch (data.Aggregation.Target)
                            {
                                case "WorkValue": column.WorkValueAverage(); break;
                                case "RemainingWorkValue": column.RemainingWorkValueAverage(); break;
                                case "NumA": column.NumAAverage(); break;
                                case "NumB": column.NumBAverage(); break;
                                case "NumC": column.NumCAverage(); break;
                                case "NumD": column.NumDAverage(); break;
                                case "NumE": column.NumEAverage(); break;
                                case "NumF": column.NumFAverage(); break;
                                case "NumG": column.NumGAverage(); break;
                                case "NumH": column.NumHAverage(); break;
                                case "NumI": column.NumIAverage(); break;
                                case "NumJ": column.NumJAverage(); break;
                                case "NumK": column.NumKAverage(); break;
                                case "NumL": column.NumLAverage(); break;
                                case "NumM": column.NumMAverage(); break;
                                case "NumN": column.NumNAverage(); break;
                                case "NumO": column.NumOAverage(); break;
                                case "NumP": column.NumPAverage(); break;
                                default: break;
                            }
                            break;
                        default: break;
                    }
                    var statement = SelectIssues(
                        dataTableName: "Aggregation" + data.Index,
                        column: column,
                        where: where,
                        groupBy: groupBy);
                    statementCollection.Add(statement);
                });
            return statementCollection;
        }

        public static IEnumerable<SqlStatement> ResultsAggregations(
            IEnumerable<Aggregation> aggregationCollection,
            SqlWhereCollection where)
        {
            var statementCollection = new List<SqlStatement>();
            aggregationCollection
                .Select((o, i) => new { Aggregation = o, Index = i })
                .ForEach(data =>
                {
                    var groupBy = ResultsGroupBy();
                    var column = ResultsColumn();
                    switch (data.Aggregation.GroupBy)
                    {
                        case "Status": groupBy.Status(); column.Status(); break;
                        case "Manager": groupBy.Manager(); column.Manager(); break;
                        case "Owner": groupBy.Owner(); column.Owner(); break;
                        case "ClassA": groupBy.ClassA(); column.ClassA(); break;
                        case "ClassB": groupBy.ClassB(); column.ClassB(); break;
                        case "ClassC": groupBy.ClassC(); column.ClassC(); break;
                        case "ClassD": groupBy.ClassD(); column.ClassD(); break;
                        case "ClassE": groupBy.ClassE(); column.ClassE(); break;
                        case "ClassF": groupBy.ClassF(); column.ClassF(); break;
                        case "ClassG": groupBy.ClassG(); column.ClassG(); break;
                        case "ClassH": groupBy.ClassH(); column.ClassH(); break;
                        case "ClassI": groupBy.ClassI(); column.ClassI(); break;
                        case "ClassJ": groupBy.ClassJ(); column.ClassJ(); break;
                        case "ClassK": groupBy.ClassK(); column.ClassK(); break;
                        case "ClassL": groupBy.ClassL(); column.ClassL(); break;
                        case "ClassM": groupBy.ClassM(); column.ClassM(); break;
                        case "ClassN": groupBy.ClassN(); column.ClassN(); break;
                        case "ClassO": groupBy.ClassO(); column.ClassO(); break;
                        case "ClassP": groupBy.ClassP(); column.ClassP(); break;
                        default: break;
                    }
                    switch (data.Aggregation.Type)
                    {
                        case Aggregation.Types.Count:
                            column.ResultsCount(); break;
                        case Aggregation.Types.Total:
                            switch (data.Aggregation.Target)
                            {
                                case "NumA": column.NumATotal(); break;
                                case "NumB": column.NumBTotal(); break;
                                case "NumC": column.NumCTotal(); break;
                                case "NumD": column.NumDTotal(); break;
                                case "NumE": column.NumETotal(); break;
                                case "NumF": column.NumFTotal(); break;
                                case "NumG": column.NumGTotal(); break;
                                case "NumH": column.NumHTotal(); break;
                                case "NumI": column.NumITotal(); break;
                                case "NumJ": column.NumJTotal(); break;
                                case "NumK": column.NumKTotal(); break;
                                case "NumL": column.NumLTotal(); break;
                                case "NumM": column.NumMTotal(); break;
                                case "NumN": column.NumNTotal(); break;
                                case "NumO": column.NumOTotal(); break;
                                case "NumP": column.NumPTotal(); break;
                                default: break;
                            }
                            break;
                        case Aggregation.Types.Average:
                            switch (data.Aggregation.Target)
                            {
                                case "NumA": column.NumAAverage(); break;
                                case "NumB": column.NumBAverage(); break;
                                case "NumC": column.NumCAverage(); break;
                                case "NumD": column.NumDAverage(); break;
                                case "NumE": column.NumEAverage(); break;
                                case "NumF": column.NumFAverage(); break;
                                case "NumG": column.NumGAverage(); break;
                                case "NumH": column.NumHAverage(); break;
                                case "NumI": column.NumIAverage(); break;
                                case "NumJ": column.NumJAverage(); break;
                                case "NumK": column.NumKAverage(); break;
                                case "NumL": column.NumLAverage(); break;
                                case "NumM": column.NumMAverage(); break;
                                case "NumN": column.NumNAverage(); break;
                                case "NumO": column.NumOAverage(); break;
                                case "NumP": column.NumPAverage(); break;
                                default: break;
                            }
                            break;
                        default: break;
                    }
                    var statement = SelectResults(
                        dataTableName: "Aggregation" + data.Index,
                        column: column,
                        where: where,
                        groupBy: groupBy);
                    statementCollection.Add(statement);
                });
            return statementCollection;
        }

        public static IEnumerable<SqlStatement> WikisAggregations(
            IEnumerable<Aggregation> aggregationCollection,
            SqlWhereCollection where)
        {
            var statementCollection = new List<SqlStatement>();
            aggregationCollection
                .Select((o, i) => new { Aggregation = o, Index = i })
                .ForEach(data =>
                {
                    var groupBy = WikisGroupBy();
                    var column = WikisColumn();
                    switch (data.Aggregation.GroupBy)
                    {
                        default: break;
                    }
                    switch (data.Aggregation.Type)
                    {
                        case Aggregation.Types.Count:
                            column.WikisCount(); break;
                        case Aggregation.Types.Total:
                            switch (data.Aggregation.Target)
                            {
                                default: break;
                            }
                            break;
                        case Aggregation.Types.Average:
                            switch (data.Aggregation.Target)
                            {
                                default: break;
                            }
                            break;
                        default: break;
                    }
                    var statement = SelectWikis(
                        dataTableName: "Aggregation" + data.Index,
                        column: column,
                        where: where,
                        groupBy: groupBy);
                    statementCollection.Add(statement);
                });
            return statementCollection;
        }

        public const string SaveTenantsHistoryStatement = "insert into [Tenants_history]([Tenants_history].[TenantId], [Tenants_history].[Ver], [Tenants_history].[TenantName], [Tenants_history].[Title], [Tenants_history].[Body], [Tenants_history].[Comments], [Tenants_history].[Creator], [Tenants_history].[Updator], [Tenants_history].[CreatedTime], [Tenants_history].[UpdatedTime]) (select [Tenants].[TenantId], [Tenants].[Ver], [Tenants].[TenantName], [Tenants].[Title], [Tenants].[Body], [Tenants].[Comments], [Tenants].[Creator], [Tenants].[Updator], [Tenants].[CreatedTime], [Tenants].[UpdatedTime] from [Tenants] where  and [Tenants].[UpdatedTime]=@UpdatedTime[[CommandCount]])";
        public const string SaveDemosHistoryStatement = "insert into [Demos_history]([Demos_history].[DemoId], [Demos_history].[Ver], [Demos_history].[TenantId], [Demos_history].[Title], [Demos_history].[Passphrase], [Demos_history].[MailAddress], [Demos_history].[Initialized], [Demos_history].[Comments], [Demos_history].[Creator], [Demos_history].[Updator], [Demos_history].[CreatedTime], [Demos_history].[UpdatedTime]) (select [Demos].[DemoId], [Demos].[Ver], [Demos].[TenantId], [Demos].[Title], [Demos].[Passphrase], [Demos].[MailAddress], [Demos].[Initialized], [Demos].[Comments], [Demos].[Creator], [Demos].[Updator], [Demos].[CreatedTime], [Demos].[UpdatedTime] from [Demos] where  and [Demos].[UpdatedTime]=@UpdatedTime[[CommandCount]])";
        public const string SaveSysLogsHistoryStatement = "insert into [SysLogs_history]([SysLogs_history].[CreatedTime], [SysLogs_history].[SysLogId], [SysLogs_history].[Ver], [SysLogs_history].[SysLogType], [SysLogs_history].[OnAzure], [SysLogs_history].[MachineName], [SysLogs_history].[ServiceName], [SysLogs_history].[TenantName], [SysLogs_history].[Application], [SysLogs_history].[Class], [SysLogs_history].[Method], [SysLogs_history].[RequestData], [SysLogs_history].[HttpMethod], [SysLogs_history].[RequestSize], [SysLogs_history].[ResponseSize], [SysLogs_history].[Elapsed], [SysLogs_history].[ApplicationAge], [SysLogs_history].[ApplicationRequestInterval], [SysLogs_history].[SessionAge], [SysLogs_history].[SessionRequestInterval], [SysLogs_history].[WorkingSet64], [SysLogs_history].[VirtualMemorySize64], [SysLogs_history].[ProcessId], [SysLogs_history].[ProcessName], [SysLogs_history].[BasePriority], [SysLogs_history].[Url], [SysLogs_history].[UrlReferer], [SysLogs_history].[UserHostName], [SysLogs_history].[UserHostAddress], [SysLogs_history].[UserLanguage], [SysLogs_history].[UserAgent], [SysLogs_history].[SessionGuid], [SysLogs_history].[ErrMessage], [SysLogs_history].[ErrStackTrace], [SysLogs_history].[InDebug], [SysLogs_history].[AssemblyVersion], [SysLogs_history].[Comments], [SysLogs_history].[Creator], [SysLogs_history].[Updator], [SysLogs_history].[UpdatedTime]) (select [SysLogs].[CreatedTime], [SysLogs].[SysLogId], [SysLogs].[Ver], [SysLogs].[SysLogType], [SysLogs].[OnAzure], [SysLogs].[MachineName], [SysLogs].[ServiceName], [SysLogs].[TenantName], [SysLogs].[Application], [SysLogs].[Class], [SysLogs].[Method], [SysLogs].[RequestData], [SysLogs].[HttpMethod], [SysLogs].[RequestSize], [SysLogs].[ResponseSize], [SysLogs].[Elapsed], [SysLogs].[ApplicationAge], [SysLogs].[ApplicationRequestInterval], [SysLogs].[SessionAge], [SysLogs].[SessionRequestInterval], [SysLogs].[WorkingSet64], [SysLogs].[VirtualMemorySize64], [SysLogs].[ProcessId], [SysLogs].[ProcessName], [SysLogs].[BasePriority], [SysLogs].[Url], [SysLogs].[UrlReferer], [SysLogs].[UserHostName], [SysLogs].[UserHostAddress], [SysLogs].[UserLanguage], [SysLogs].[UserAgent], [SysLogs].[SessionGuid], [SysLogs].[ErrMessage], [SysLogs].[ErrStackTrace], [SysLogs].[InDebug], [SysLogs].[AssemblyVersion], [SysLogs].[Comments], [SysLogs].[Creator], [SysLogs].[Updator], [SysLogs].[UpdatedTime] from [SysLogs] where [SysLogs].[CreatedTime]=@CreatedTime[[CommandCount]] and [SysLogs].[SysLogId]=@SysLogId[[CommandCount]] and [SysLogs].[UpdatedTime]=@UpdatedTime[[CommandCount]])";
        public const string SaveDeptsHistoryStatement = "insert into [Depts_history]([Depts_history].[TenantId], [Depts_history].[DeptId], [Depts_history].[Ver], [Depts_history].[ParentDeptId], [Depts_history].[DeptCode], [Depts_history].[DeptName], [Depts_history].[Body], [Depts_history].[Comments], [Depts_history].[Creator], [Depts_history].[Updator], [Depts_history].[CreatedTime], [Depts_history].[UpdatedTime]) (select [Depts].[TenantId], [Depts].[DeptId], [Depts].[Ver], [Depts].[ParentDeptId], [Depts].[DeptCode], [Depts].[DeptName], [Depts].[Body], [Depts].[Comments], [Depts].[Creator], [Depts].[Updator], [Depts].[CreatedTime], [Depts].[UpdatedTime] from [Depts] where [Depts].[TenantId]=@TenantId[[CommandCount]] and [Depts].[DeptId]=@DeptId[[CommandCount]] and [Depts].[UpdatedTime]=@UpdatedTime[[CommandCount]])";
        public const string SaveUsersHistoryStatement = "insert into [Users_history]([Users_history].[TenantId], [Users_history].[UserId], [Users_history].[Ver], [Users_history].[LoginId], [Users_history].[Disabled], [Users_history].[UserCode], [Users_history].[Password], [Users_history].[LastName], [Users_history].[FirstName], [Users_history].[Birthday], [Users_history].[Sex], [Users_history].[Language], [Users_history].[TimeZone], [Users_history].[DeptId], [Users_history].[FirstAndLastNameOrder], [Users_history].[LastLoginTime], [Users_history].[PasswordExpirationTime], [Users_history].[PasswordChangeTime], [Users_history].[NumberOfLogins], [Users_history].[NumberOfDenial], [Users_history].[TenantAdmin], [Users_history].[ServiceAdmin], [Users_history].[Developer], [Users_history].[Comments], [Users_history].[Creator], [Users_history].[Updator], [Users_history].[CreatedTime], [Users_history].[UpdatedTime]) (select [Users].[TenantId], [Users].[UserId], [Users].[Ver], [Users].[LoginId], [Users].[Disabled], [Users].[UserCode], [Users].[Password], [Users].[LastName], [Users].[FirstName], [Users].[Birthday], [Users].[Sex], [Users].[Language], [Users].[TimeZone], [Users].[DeptId], [Users].[FirstAndLastNameOrder], [Users].[LastLoginTime], [Users].[PasswordExpirationTime], [Users].[PasswordChangeTime], [Users].[NumberOfLogins], [Users].[NumberOfDenial], [Users].[TenantAdmin], [Users].[ServiceAdmin], [Users].[Developer], [Users].[Comments], [Users].[Creator], [Users].[Updator], [Users].[CreatedTime], [Users].[UpdatedTime] from [Users] where [Users].[TenantId]=@TenantId[[CommandCount]] and [Users].[UserId]=@UserId[[CommandCount]] and [Users].[UpdatedTime]=@UpdatedTime[[CommandCount]])";
        public const string SaveMailAddressesHistoryStatement = "insert into [MailAddresses_history]([MailAddresses_history].[OwnerId], [MailAddresses_history].[OwnerType], [MailAddresses_history].[MailAddressId], [MailAddresses_history].[Ver], [MailAddresses_history].[MailAddress], [MailAddresses_history].[Comments], [MailAddresses_history].[Creator], [MailAddresses_history].[Updator], [MailAddresses_history].[CreatedTime], [MailAddresses_history].[UpdatedTime]) (select [MailAddresses].[OwnerId], [MailAddresses].[OwnerType], [MailAddresses].[MailAddressId], [MailAddresses].[Ver], [MailAddresses].[MailAddress], [MailAddresses].[Comments], [MailAddresses].[Creator], [MailAddresses].[Updator], [MailAddresses].[CreatedTime], [MailAddresses].[UpdatedTime] from [MailAddresses] where [MailAddresses].[OwnerId]=@OwnerId[[CommandCount]] and [MailAddresses].[OwnerType]=@OwnerType[[CommandCount]] and [MailAddresses].[MailAddressId]=@MailAddressId[[CommandCount]] and [MailAddresses].[UpdatedTime]=@UpdatedTime[[CommandCount]])";
        public const string SavePermissionsHistoryStatement = "insert into [Permissions_history]([Permissions_history].[ReferenceType], [Permissions_history].[ReferenceId], [Permissions_history].[DeptId], [Permissions_history].[UserId], [Permissions_history].[Ver], [Permissions_history].[PermissionType], [Permissions_history].[Comments], [Permissions_history].[Creator], [Permissions_history].[Updator], [Permissions_history].[CreatedTime], [Permissions_history].[UpdatedTime]) (select [Permissions].[ReferenceType], [Permissions].[ReferenceId], [Permissions].[DeptId], [Permissions].[UserId], [Permissions].[Ver], [Permissions].[PermissionType], [Permissions].[Comments], [Permissions].[Creator], [Permissions].[Updator], [Permissions].[CreatedTime], [Permissions].[UpdatedTime] from [Permissions] where [Permissions].[ReferenceType]=@ReferenceType[[CommandCount]] and [Permissions].[ReferenceId]=@ReferenceId[[CommandCount]] and [Permissions].[DeptId]=@DeptId[[CommandCount]] and [Permissions].[UserId]=@UserId[[CommandCount]] and [Permissions].[UpdatedTime]=@UpdatedTime[[CommandCount]])";
        public const string SaveOutgoingMailsHistoryStatement = "insert into [OutgoingMails_history]([OutgoingMails_history].[ReferenceType], [OutgoingMails_history].[ReferenceId], [OutgoingMails_history].[ReferenceVer], [OutgoingMails_history].[OutgoingMailId], [OutgoingMails_history].[Ver], [OutgoingMails_history].[Host], [OutgoingMails_history].[Port], [OutgoingMails_history].[From], [OutgoingMails_history].[To], [OutgoingMails_history].[Cc], [OutgoingMails_history].[Bcc], [OutgoingMails_history].[Title], [OutgoingMails_history].[Body], [OutgoingMails_history].[SentTime], [OutgoingMails_history].[Comments], [OutgoingMails_history].[Creator], [OutgoingMails_history].[Updator], [OutgoingMails_history].[CreatedTime], [OutgoingMails_history].[UpdatedTime]) (select [OutgoingMails].[ReferenceType], [OutgoingMails].[ReferenceId], [OutgoingMails].[ReferenceVer], [OutgoingMails].[OutgoingMailId], [OutgoingMails].[Ver], [OutgoingMails].[Host], [OutgoingMails].[Port], [OutgoingMails].[From], [OutgoingMails].[To], [OutgoingMails].[Cc], [OutgoingMails].[Bcc], [OutgoingMails].[Title], [OutgoingMails].[Body], [OutgoingMails].[SentTime], [OutgoingMails].[Comments], [OutgoingMails].[Creator], [OutgoingMails].[Updator], [OutgoingMails].[CreatedTime], [OutgoingMails].[UpdatedTime] from [OutgoingMails] where [OutgoingMails].[ReferenceType]=@ReferenceType[[CommandCount]] and [OutgoingMails].[ReferenceId]=@ReferenceId[[CommandCount]] and [OutgoingMails].[ReferenceVer]=@ReferenceVer[[CommandCount]] and [OutgoingMails].[OutgoingMailId]=@OutgoingMailId[[CommandCount]] and [OutgoingMails].[UpdatedTime]=@UpdatedTime[[CommandCount]])";
        public const string SaveSearchIndexesHistoryStatement = "insert into [SearchIndexes_history]([SearchIndexes_history].[Word], [SearchIndexes_history].[ReferenceId], [SearchIndexes_history].[Ver], [SearchIndexes_history].[Priority], [SearchIndexes_history].[Comments], [SearchIndexes_history].[Creator], [SearchIndexes_history].[Updator], [SearchIndexes_history].[CreatedTime], [SearchIndexes_history].[UpdatedTime]) (select [SearchIndexes].[Word], [SearchIndexes].[ReferenceId], [SearchIndexes].[Ver], [SearchIndexes].[Priority], [SearchIndexes].[Comments], [SearchIndexes].[Creator], [SearchIndexes].[Updator], [SearchIndexes].[CreatedTime], [SearchIndexes].[UpdatedTime] from [SearchIndexes] where [SearchIndexes].[Word]=@Word[[CommandCount]] and [SearchIndexes].[ReferenceId]=@ReferenceId[[CommandCount]] and [SearchIndexes].[UpdatedTime]=@UpdatedTime[[CommandCount]])";
        public const string SaveItemsHistoryStatement = "insert into [Items_history]([Items_history].[ReferenceId], [Items_history].[Ver], [Items_history].[ReferenceType], [Items_history].[SiteId], [Items_history].[Title], [Items_history].[Subset], [Items_history].[MaintenanceTarget], [Items_history].[Comments], [Items_history].[Creator], [Items_history].[Updator], [Items_history].[CreatedTime], [Items_history].[UpdatedTime]) (select [Items].[ReferenceId], [Items].[Ver], [Items].[ReferenceType], [Items].[SiteId], [Items].[Title], [Items].[Subset], [Items].[MaintenanceTarget], [Items].[Comments], [Items].[Creator], [Items].[Updator], [Items].[CreatedTime], [Items].[UpdatedTime] from [Items] where [Items].[ReferenceId]=@ReferenceId[[CommandCount]] and [Items].[UpdatedTime]=@UpdatedTime[[CommandCount]])";
        public const string SaveSitesHistoryStatement = "insert into [Sites_history]([Sites_history].[TenantId], [Sites_history].[SiteId], [Sites_history].[Ver], [Sites_history].[Title], [Sites_history].[Body], [Sites_history].[ReferenceType], [Sites_history].[ParentId], [Sites_history].[InheritPermission], [Sites_history].[SiteSettings], [Sites_history].[Comments], [Sites_history].[Creator], [Sites_history].[Updator], [Sites_history].[UpdatedTime], [Sites_history].[CreatedTime]) (select [Sites].[TenantId], [Sites].[SiteId], [Sites].[Ver], [Sites].[Title], [Sites].[Body], [Sites].[ReferenceType], [Sites].[ParentId], [Sites].[InheritPermission], [Sites].[SiteSettings], [Sites].[Comments], [Sites].[Creator], [Sites].[Updator], [Sites].[UpdatedTime], [Sites].[CreatedTime] from [Sites] where [Sites].[TenantId]=@TenantId[[CommandCount]] and [Sites].[SiteId]=@SiteId[[CommandCount]] and [Sites].[UpdatedTime]=@UpdatedTime[[CommandCount]])";
        public const string SaveOrdersHistoryStatement = "insert into [Orders_history]([Orders_history].[ReferenceId], [Orders_history].[ReferenceType], [Orders_history].[OwnerId], [Orders_history].[Ver], [Orders_history].[Data], [Orders_history].[Comments], [Orders_history].[Creator], [Orders_history].[Updator], [Orders_history].[CreatedTime], [Orders_history].[UpdatedTime]) (select [Orders].[ReferenceId], [Orders].[ReferenceType], [Orders].[OwnerId], [Orders].[Ver], [Orders].[Data], [Orders].[Comments], [Orders].[Creator], [Orders].[Updator], [Orders].[CreatedTime], [Orders].[UpdatedTime] from [Orders] where  and [Orders].[UpdatedTime]=@UpdatedTime[[CommandCount]])";
        public const string SaveExportSettingsHistoryStatement = "insert into [ExportSettings_history]([ExportSettings_history].[ReferenceType], [ExportSettings_history].[ReferenceId], [ExportSettings_history].[Title], [ExportSettings_history].[ExportSettingId], [ExportSettings_history].[Ver], [ExportSettings_history].[AddHeader], [ExportSettings_history].[ExportColumns], [ExportSettings_history].[Comments], [ExportSettings_history].[Creator], [ExportSettings_history].[Updator], [ExportSettings_history].[CreatedTime], [ExportSettings_history].[UpdatedTime]) (select [ExportSettings].[ReferenceType], [ExportSettings].[ReferenceId], [ExportSettings].[Title], [ExportSettings].[ExportSettingId], [ExportSettings].[Ver], [ExportSettings].[AddHeader], [ExportSettings].[ExportColumns], [ExportSettings].[Comments], [ExportSettings].[Creator], [ExportSettings].[Updator], [ExportSettings].[CreatedTime], [ExportSettings].[UpdatedTime] from [ExportSettings] where [ExportSettings].[ReferenceType]=@ReferenceType[[CommandCount]] and [ExportSettings].[ReferenceId]=@ReferenceId[[CommandCount]] and [ExportSettings].[Title]=@Title[[CommandCount]] and [ExportSettings].[ExportSettingId]=@ExportSettingId[[CommandCount]] and [ExportSettings].[UpdatedTime]=@UpdatedTime[[CommandCount]])";
        public const string SaveLinksHistoryStatement = "insert into [Links_history]([Links_history].[DestinationId], [Links_history].[SourceId], [Links_history].[Ver], [Links_history].[Comments], [Links_history].[Creator], [Links_history].[Updator], [Links_history].[CreatedTime], [Links_history].[UpdatedTime]) (select [Links].[DestinationId], [Links].[SourceId], [Links].[Ver], [Links].[Comments], [Links].[Creator], [Links].[Updator], [Links].[CreatedTime], [Links].[UpdatedTime] from [Links] where  and [Links].[UpdatedTime]=@UpdatedTime[[CommandCount]])";
        public const string SaveBinariesHistoryStatement = "insert into [Binaries_history]([Binaries_history].[ReferenceId], [Binaries_history].[BinaryId], [Binaries_history].[Ver], [Binaries_history].[BinaryType], [Binaries_history].[Title], [Binaries_history].[Body], [Binaries_history].[Bin], [Binaries_history].[Thumbnail], [Binaries_history].[Icon], [Binaries_history].[FileName], [Binaries_history].[Extension], [Binaries_history].[Size], [Binaries_history].[BinarySettings], [Binaries_history].[Comments], [Binaries_history].[Creator], [Binaries_history].[Updator], [Binaries_history].[CreatedTime], [Binaries_history].[UpdatedTime]) (select [Binaries].[ReferenceId], [Binaries].[BinaryId], [Binaries].[Ver], [Binaries].[BinaryType], [Binaries].[Title], [Binaries].[Body], [Binaries].[Bin], [Binaries].[Thumbnail], [Binaries].[Icon], [Binaries].[FileName], [Binaries].[Extension], [Binaries].[Size], [Binaries].[BinarySettings], [Binaries].[Comments], [Binaries].[Creator], [Binaries].[Updator], [Binaries].[CreatedTime], [Binaries].[UpdatedTime] from [Binaries] where [Binaries].[ReferenceId]=@ReferenceId[[CommandCount]] and [Binaries].[BinaryId]=@BinaryId[[CommandCount]] and [Binaries].[UpdatedTime]=@UpdatedTime[[CommandCount]])";
        public const string SaveIssuesHistoryStatement = "insert into [Issues_history]([Issues_history].[IssueId], [Issues_history].[SiteId], [Issues_history].[Ver], [Issues_history].[Title], [Issues_history].[Body], [Issues_history].[StartTime], [Issues_history].[CompletionTime], [Issues_history].[WorkValue], [Issues_history].[ProgressRate], [Issues_history].[Status], [Issues_history].[Manager], [Issues_history].[Owner], [Issues_history].[ClassA], [Issues_history].[ClassB], [Issues_history].[ClassC], [Issues_history].[ClassD], [Issues_history].[ClassE], [Issues_history].[ClassF], [Issues_history].[ClassG], [Issues_history].[ClassH], [Issues_history].[ClassI], [Issues_history].[ClassJ], [Issues_history].[ClassK], [Issues_history].[ClassL], [Issues_history].[ClassM], [Issues_history].[ClassN], [Issues_history].[ClassO], [Issues_history].[ClassP], [Issues_history].[NumA], [Issues_history].[NumB], [Issues_history].[NumC], [Issues_history].[NumD], [Issues_history].[NumE], [Issues_history].[NumF], [Issues_history].[NumG], [Issues_history].[NumH], [Issues_history].[NumI], [Issues_history].[NumJ], [Issues_history].[NumK], [Issues_history].[NumL], [Issues_history].[NumM], [Issues_history].[NumN], [Issues_history].[NumO], [Issues_history].[NumP], [Issues_history].[DateA], [Issues_history].[DateB], [Issues_history].[DateC], [Issues_history].[DateD], [Issues_history].[DateE], [Issues_history].[DateF], [Issues_history].[DateG], [Issues_history].[DateH], [Issues_history].[DateI], [Issues_history].[DateJ], [Issues_history].[DateK], [Issues_history].[DateL], [Issues_history].[DateM], [Issues_history].[DateN], [Issues_history].[DateO], [Issues_history].[DateP], [Issues_history].[DescriptionA], [Issues_history].[DescriptionB], [Issues_history].[DescriptionC], [Issues_history].[DescriptionD], [Issues_history].[DescriptionE], [Issues_history].[DescriptionF], [Issues_history].[DescriptionG], [Issues_history].[DescriptionH], [Issues_history].[DescriptionI], [Issues_history].[DescriptionJ], [Issues_history].[DescriptionK], [Issues_history].[DescriptionL], [Issues_history].[DescriptionM], [Issues_history].[DescriptionN], [Issues_history].[DescriptionO], [Issues_history].[DescriptionP], [Issues_history].[CheckA], [Issues_history].[CheckB], [Issues_history].[CheckC], [Issues_history].[CheckD], [Issues_history].[CheckE], [Issues_history].[CheckF], [Issues_history].[CheckG], [Issues_history].[CheckH], [Issues_history].[CheckI], [Issues_history].[CheckJ], [Issues_history].[CheckK], [Issues_history].[CheckL], [Issues_history].[CheckM], [Issues_history].[CheckN], [Issues_history].[CheckO], [Issues_history].[CheckP], [Issues_history].[Comments], [Issues_history].[Creator], [Issues_history].[Updator], [Issues_history].[UpdatedTime], [Issues_history].[CreatedTime]) (select [Issues].[IssueId], [Issues].[SiteId], [Issues].[Ver], [Issues].[Title], [Issues].[Body], [Issues].[StartTime], [Issues].[CompletionTime], [Issues].[WorkValue], [Issues].[ProgressRate], [Issues].[Status], [Issues].[Manager], [Issues].[Owner], [Issues].[ClassA], [Issues].[ClassB], [Issues].[ClassC], [Issues].[ClassD], [Issues].[ClassE], [Issues].[ClassF], [Issues].[ClassG], [Issues].[ClassH], [Issues].[ClassI], [Issues].[ClassJ], [Issues].[ClassK], [Issues].[ClassL], [Issues].[ClassM], [Issues].[ClassN], [Issues].[ClassO], [Issues].[ClassP], [Issues].[NumA], [Issues].[NumB], [Issues].[NumC], [Issues].[NumD], [Issues].[NumE], [Issues].[NumF], [Issues].[NumG], [Issues].[NumH], [Issues].[NumI], [Issues].[NumJ], [Issues].[NumK], [Issues].[NumL], [Issues].[NumM], [Issues].[NumN], [Issues].[NumO], [Issues].[NumP], [Issues].[DateA], [Issues].[DateB], [Issues].[DateC], [Issues].[DateD], [Issues].[DateE], [Issues].[DateF], [Issues].[DateG], [Issues].[DateH], [Issues].[DateI], [Issues].[DateJ], [Issues].[DateK], [Issues].[DateL], [Issues].[DateM], [Issues].[DateN], [Issues].[DateO], [Issues].[DateP], [Issues].[DescriptionA], [Issues].[DescriptionB], [Issues].[DescriptionC], [Issues].[DescriptionD], [Issues].[DescriptionE], [Issues].[DescriptionF], [Issues].[DescriptionG], [Issues].[DescriptionH], [Issues].[DescriptionI], [Issues].[DescriptionJ], [Issues].[DescriptionK], [Issues].[DescriptionL], [Issues].[DescriptionM], [Issues].[DescriptionN], [Issues].[DescriptionO], [Issues].[DescriptionP], [Issues].[CheckA], [Issues].[CheckB], [Issues].[CheckC], [Issues].[CheckD], [Issues].[CheckE], [Issues].[CheckF], [Issues].[CheckG], [Issues].[CheckH], [Issues].[CheckI], [Issues].[CheckJ], [Issues].[CheckK], [Issues].[CheckL], [Issues].[CheckM], [Issues].[CheckN], [Issues].[CheckO], [Issues].[CheckP], [Issues].[Comments], [Issues].[Creator], [Issues].[Updator], [Issues].[UpdatedTime], [Issues].[CreatedTime] from [Issues] where [Issues].[IssueId]=@IssueId[[CommandCount]] and [Issues].[UpdatedTime]=@UpdatedTime[[CommandCount]])";
        public const string SaveResultsHistoryStatement = "insert into [Results_history]([Results_history].[ResultId], [Results_history].[SiteId], [Results_history].[Ver], [Results_history].[Title], [Results_history].[Body], [Results_history].[Status], [Results_history].[Manager], [Results_history].[Owner], [Results_history].[ClassA], [Results_history].[ClassB], [Results_history].[ClassC], [Results_history].[ClassD], [Results_history].[ClassE], [Results_history].[ClassF], [Results_history].[ClassG], [Results_history].[ClassH], [Results_history].[ClassI], [Results_history].[ClassJ], [Results_history].[ClassK], [Results_history].[ClassL], [Results_history].[ClassM], [Results_history].[ClassN], [Results_history].[ClassO], [Results_history].[ClassP], [Results_history].[NumA], [Results_history].[NumB], [Results_history].[NumC], [Results_history].[NumD], [Results_history].[NumE], [Results_history].[NumF], [Results_history].[NumG], [Results_history].[NumH], [Results_history].[NumI], [Results_history].[NumJ], [Results_history].[NumK], [Results_history].[NumL], [Results_history].[NumM], [Results_history].[NumN], [Results_history].[NumO], [Results_history].[NumP], [Results_history].[DateA], [Results_history].[DateB], [Results_history].[DateC], [Results_history].[DateD], [Results_history].[DateE], [Results_history].[DateF], [Results_history].[DateG], [Results_history].[DateH], [Results_history].[DateI], [Results_history].[DateJ], [Results_history].[DateK], [Results_history].[DateL], [Results_history].[DateM], [Results_history].[DateN], [Results_history].[DateO], [Results_history].[DateP], [Results_history].[DescriptionA], [Results_history].[DescriptionB], [Results_history].[DescriptionC], [Results_history].[DescriptionD], [Results_history].[DescriptionE], [Results_history].[DescriptionF], [Results_history].[DescriptionG], [Results_history].[DescriptionH], [Results_history].[DescriptionI], [Results_history].[DescriptionJ], [Results_history].[DescriptionK], [Results_history].[DescriptionL], [Results_history].[DescriptionM], [Results_history].[DescriptionN], [Results_history].[DescriptionO], [Results_history].[DescriptionP], [Results_history].[CheckA], [Results_history].[CheckB], [Results_history].[CheckC], [Results_history].[CheckD], [Results_history].[CheckE], [Results_history].[CheckF], [Results_history].[CheckG], [Results_history].[CheckH], [Results_history].[CheckI], [Results_history].[CheckJ], [Results_history].[CheckK], [Results_history].[CheckL], [Results_history].[CheckM], [Results_history].[CheckN], [Results_history].[CheckO], [Results_history].[CheckP], [Results_history].[Comments], [Results_history].[Creator], [Results_history].[Updator], [Results_history].[UpdatedTime], [Results_history].[CreatedTime]) (select [Results].[ResultId], [Results].[SiteId], [Results].[Ver], [Results].[Title], [Results].[Body], [Results].[Status], [Results].[Manager], [Results].[Owner], [Results].[ClassA], [Results].[ClassB], [Results].[ClassC], [Results].[ClassD], [Results].[ClassE], [Results].[ClassF], [Results].[ClassG], [Results].[ClassH], [Results].[ClassI], [Results].[ClassJ], [Results].[ClassK], [Results].[ClassL], [Results].[ClassM], [Results].[ClassN], [Results].[ClassO], [Results].[ClassP], [Results].[NumA], [Results].[NumB], [Results].[NumC], [Results].[NumD], [Results].[NumE], [Results].[NumF], [Results].[NumG], [Results].[NumH], [Results].[NumI], [Results].[NumJ], [Results].[NumK], [Results].[NumL], [Results].[NumM], [Results].[NumN], [Results].[NumO], [Results].[NumP], [Results].[DateA], [Results].[DateB], [Results].[DateC], [Results].[DateD], [Results].[DateE], [Results].[DateF], [Results].[DateG], [Results].[DateH], [Results].[DateI], [Results].[DateJ], [Results].[DateK], [Results].[DateL], [Results].[DateM], [Results].[DateN], [Results].[DateO], [Results].[DateP], [Results].[DescriptionA], [Results].[DescriptionB], [Results].[DescriptionC], [Results].[DescriptionD], [Results].[DescriptionE], [Results].[DescriptionF], [Results].[DescriptionG], [Results].[DescriptionH], [Results].[DescriptionI], [Results].[DescriptionJ], [Results].[DescriptionK], [Results].[DescriptionL], [Results].[DescriptionM], [Results].[DescriptionN], [Results].[DescriptionO], [Results].[DescriptionP], [Results].[CheckA], [Results].[CheckB], [Results].[CheckC], [Results].[CheckD], [Results].[CheckE], [Results].[CheckF], [Results].[CheckG], [Results].[CheckH], [Results].[CheckI], [Results].[CheckJ], [Results].[CheckK], [Results].[CheckL], [Results].[CheckM], [Results].[CheckN], [Results].[CheckO], [Results].[CheckP], [Results].[Comments], [Results].[Creator], [Results].[Updator], [Results].[UpdatedTime], [Results].[CreatedTime] from [Results] where [Results].[ResultId]=@ResultId[[CommandCount]] and [Results].[UpdatedTime]=@UpdatedTime[[CommandCount]])";
        public const string SaveWikisHistoryStatement = "insert into [Wikis_history]([Wikis_history].[WikiId], [Wikis_history].[SiteId], [Wikis_history].[Ver], [Wikis_history].[Title], [Wikis_history].[Body], [Wikis_history].[Comments], [Wikis_history].[Creator], [Wikis_history].[Updator], [Wikis_history].[UpdatedTime], [Wikis_history].[CreatedTime]) (select [Wikis].[WikiId], [Wikis].[SiteId], [Wikis].[Ver], [Wikis].[Title], [Wikis].[Body], [Wikis].[Comments], [Wikis].[Creator], [Wikis].[Updator], [Wikis].[UpdatedTime], [Wikis].[CreatedTime] from [Wikis] where [Wikis].[WikiId]=@WikiId[[CommandCount]] and [Wikis].[UpdatedTime]=@UpdatedTime[[CommandCount]])";
        public const string DeleteTenantsStatement = "update [Tenants] set [Tenants].[UpdatedTime] = getdate() {0}; insert into [Tenants_deleted]([Tenants_deleted].[TenantId], [Tenants_deleted].[Ver], [Tenants_deleted].[TenantName], [Tenants_deleted].[Title], [Tenants_deleted].[Body], [Tenants_deleted].[Comments], [Tenants_deleted].[Creator], [Tenants_deleted].[Updator], [Tenants_deleted].[CreatedTime], [Tenants_deleted].[UpdatedTime]) (select [Tenants].[TenantId], [Tenants].[Ver], [Tenants].[TenantName], [Tenants].[Title], [Tenants].[Body], [Tenants].[Comments], [Tenants].[Creator], [Tenants].[Updator], [Tenants].[CreatedTime], [Tenants].[UpdatedTime] from [Tenants] {0}); delete from [Tenants] {0}";
        public const string DeleteDemosStatement = "update [Demos] set [Demos].[UpdatedTime] = getdate() {0}; insert into [Demos_deleted]([Demos_deleted].[DemoId], [Demos_deleted].[Ver], [Demos_deleted].[TenantId], [Demos_deleted].[Title], [Demos_deleted].[Passphrase], [Demos_deleted].[MailAddress], [Demos_deleted].[Initialized], [Demos_deleted].[Comments], [Demos_deleted].[Creator], [Demos_deleted].[Updator], [Demos_deleted].[CreatedTime], [Demos_deleted].[UpdatedTime]) (select [Demos].[DemoId], [Demos].[Ver], [Demos].[TenantId], [Demos].[Title], [Demos].[Passphrase], [Demos].[MailAddress], [Demos].[Initialized], [Demos].[Comments], [Demos].[Creator], [Demos].[Updator], [Demos].[CreatedTime], [Demos].[UpdatedTime] from [Demos] {0}); delete from [Demos] {0}";
        public const string DeleteSysLogsStatement = "update [SysLogs] set [SysLogs].[UpdatedTime] = getdate() {0}; insert into [SysLogs_deleted]([SysLogs_deleted].[CreatedTime], [SysLogs_deleted].[SysLogId], [SysLogs_deleted].[Ver], [SysLogs_deleted].[SysLogType], [SysLogs_deleted].[OnAzure], [SysLogs_deleted].[MachineName], [SysLogs_deleted].[ServiceName], [SysLogs_deleted].[TenantName], [SysLogs_deleted].[Application], [SysLogs_deleted].[Class], [SysLogs_deleted].[Method], [SysLogs_deleted].[RequestData], [SysLogs_deleted].[HttpMethod], [SysLogs_deleted].[RequestSize], [SysLogs_deleted].[ResponseSize], [SysLogs_deleted].[Elapsed], [SysLogs_deleted].[ApplicationAge], [SysLogs_deleted].[ApplicationRequestInterval], [SysLogs_deleted].[SessionAge], [SysLogs_deleted].[SessionRequestInterval], [SysLogs_deleted].[WorkingSet64], [SysLogs_deleted].[VirtualMemorySize64], [SysLogs_deleted].[ProcessId], [SysLogs_deleted].[ProcessName], [SysLogs_deleted].[BasePriority], [SysLogs_deleted].[Url], [SysLogs_deleted].[UrlReferer], [SysLogs_deleted].[UserHostName], [SysLogs_deleted].[UserHostAddress], [SysLogs_deleted].[UserLanguage], [SysLogs_deleted].[UserAgent], [SysLogs_deleted].[SessionGuid], [SysLogs_deleted].[ErrMessage], [SysLogs_deleted].[ErrStackTrace], [SysLogs_deleted].[InDebug], [SysLogs_deleted].[AssemblyVersion], [SysLogs_deleted].[Comments], [SysLogs_deleted].[Creator], [SysLogs_deleted].[Updator], [SysLogs_deleted].[UpdatedTime]) (select [SysLogs].[CreatedTime], [SysLogs].[SysLogId], [SysLogs].[Ver], [SysLogs].[SysLogType], [SysLogs].[OnAzure], [SysLogs].[MachineName], [SysLogs].[ServiceName], [SysLogs].[TenantName], [SysLogs].[Application], [SysLogs].[Class], [SysLogs].[Method], [SysLogs].[RequestData], [SysLogs].[HttpMethod], [SysLogs].[RequestSize], [SysLogs].[ResponseSize], [SysLogs].[Elapsed], [SysLogs].[ApplicationAge], [SysLogs].[ApplicationRequestInterval], [SysLogs].[SessionAge], [SysLogs].[SessionRequestInterval], [SysLogs].[WorkingSet64], [SysLogs].[VirtualMemorySize64], [SysLogs].[ProcessId], [SysLogs].[ProcessName], [SysLogs].[BasePriority], [SysLogs].[Url], [SysLogs].[UrlReferer], [SysLogs].[UserHostName], [SysLogs].[UserHostAddress], [SysLogs].[UserLanguage], [SysLogs].[UserAgent], [SysLogs].[SessionGuid], [SysLogs].[ErrMessage], [SysLogs].[ErrStackTrace], [SysLogs].[InDebug], [SysLogs].[AssemblyVersion], [SysLogs].[Comments], [SysLogs].[Creator], [SysLogs].[Updator], [SysLogs].[UpdatedTime] from [SysLogs] {0}); delete from [SysLogs] {0}";
        public const string DeleteDeptsStatement = "update [Depts] set [Depts].[UpdatedTime] = getdate() {0}; insert into [Depts_deleted]([Depts_deleted].[TenantId], [Depts_deleted].[DeptId], [Depts_deleted].[Ver], [Depts_deleted].[ParentDeptId], [Depts_deleted].[DeptCode], [Depts_deleted].[DeptName], [Depts_deleted].[Body], [Depts_deleted].[Comments], [Depts_deleted].[Creator], [Depts_deleted].[Updator], [Depts_deleted].[CreatedTime], [Depts_deleted].[UpdatedTime]) (select [Depts].[TenantId], [Depts].[DeptId], [Depts].[Ver], [Depts].[ParentDeptId], [Depts].[DeptCode], [Depts].[DeptName], [Depts].[Body], [Depts].[Comments], [Depts].[Creator], [Depts].[Updator], [Depts].[CreatedTime], [Depts].[UpdatedTime] from [Depts] {0}); delete from [Depts] {0}";
        public const string DeleteUsersStatement = "update [Users] set [Users].[UpdatedTime] = getdate() {0}; insert into [Users_deleted]([Users_deleted].[TenantId], [Users_deleted].[UserId], [Users_deleted].[Ver], [Users_deleted].[LoginId], [Users_deleted].[Disabled], [Users_deleted].[UserCode], [Users_deleted].[Password], [Users_deleted].[LastName], [Users_deleted].[FirstName], [Users_deleted].[Birthday], [Users_deleted].[Sex], [Users_deleted].[Language], [Users_deleted].[TimeZone], [Users_deleted].[DeptId], [Users_deleted].[FirstAndLastNameOrder], [Users_deleted].[LastLoginTime], [Users_deleted].[PasswordExpirationTime], [Users_deleted].[PasswordChangeTime], [Users_deleted].[NumberOfLogins], [Users_deleted].[NumberOfDenial], [Users_deleted].[TenantAdmin], [Users_deleted].[ServiceAdmin], [Users_deleted].[Developer], [Users_deleted].[Comments], [Users_deleted].[Creator], [Users_deleted].[Updator], [Users_deleted].[CreatedTime], [Users_deleted].[UpdatedTime]) (select [Users].[TenantId], [Users].[UserId], [Users].[Ver], [Users].[LoginId], [Users].[Disabled], [Users].[UserCode], [Users].[Password], [Users].[LastName], [Users].[FirstName], [Users].[Birthday], [Users].[Sex], [Users].[Language], [Users].[TimeZone], [Users].[DeptId], [Users].[FirstAndLastNameOrder], [Users].[LastLoginTime], [Users].[PasswordExpirationTime], [Users].[PasswordChangeTime], [Users].[NumberOfLogins], [Users].[NumberOfDenial], [Users].[TenantAdmin], [Users].[ServiceAdmin], [Users].[Developer], [Users].[Comments], [Users].[Creator], [Users].[Updator], [Users].[CreatedTime], [Users].[UpdatedTime] from [Users] {0}); delete from [Users] {0}";
        public const string DeleteMailAddressesStatement = "update [MailAddresses] set [MailAddresses].[UpdatedTime] = getdate() {0}; insert into [MailAddresses_deleted]([MailAddresses_deleted].[OwnerId], [MailAddresses_deleted].[OwnerType], [MailAddresses_deleted].[MailAddressId], [MailAddresses_deleted].[Ver], [MailAddresses_deleted].[MailAddress], [MailAddresses_deleted].[Comments], [MailAddresses_deleted].[Creator], [MailAddresses_deleted].[Updator], [MailAddresses_deleted].[CreatedTime], [MailAddresses_deleted].[UpdatedTime]) (select [MailAddresses].[OwnerId], [MailAddresses].[OwnerType], [MailAddresses].[MailAddressId], [MailAddresses].[Ver], [MailAddresses].[MailAddress], [MailAddresses].[Comments], [MailAddresses].[Creator], [MailAddresses].[Updator], [MailAddresses].[CreatedTime], [MailAddresses].[UpdatedTime] from [MailAddresses] {0}); delete from [MailAddresses] {0}";
        public const string DeletePermissionsStatement = "update [Permissions] set [Permissions].[UpdatedTime] = getdate() {0}; insert into [Permissions_deleted]([Permissions_deleted].[ReferenceType], [Permissions_deleted].[ReferenceId], [Permissions_deleted].[DeptId], [Permissions_deleted].[UserId], [Permissions_deleted].[Ver], [Permissions_deleted].[PermissionType], [Permissions_deleted].[Comments], [Permissions_deleted].[Creator], [Permissions_deleted].[Updator], [Permissions_deleted].[CreatedTime], [Permissions_deleted].[UpdatedTime]) (select [Permissions].[ReferenceType], [Permissions].[ReferenceId], [Permissions].[DeptId], [Permissions].[UserId], [Permissions].[Ver], [Permissions].[PermissionType], [Permissions].[Comments], [Permissions].[Creator], [Permissions].[Updator], [Permissions].[CreatedTime], [Permissions].[UpdatedTime] from [Permissions] {0}); delete from [Permissions] {0}";
        public const string DeleteOutgoingMailsStatement = "update [OutgoingMails] set [OutgoingMails].[UpdatedTime] = getdate() {0}; insert into [OutgoingMails_deleted]([OutgoingMails_deleted].[ReferenceType], [OutgoingMails_deleted].[ReferenceId], [OutgoingMails_deleted].[ReferenceVer], [OutgoingMails_deleted].[OutgoingMailId], [OutgoingMails_deleted].[Ver], [OutgoingMails_deleted].[Host], [OutgoingMails_deleted].[Port], [OutgoingMails_deleted].[From], [OutgoingMails_deleted].[To], [OutgoingMails_deleted].[Cc], [OutgoingMails_deleted].[Bcc], [OutgoingMails_deleted].[Title], [OutgoingMails_deleted].[Body], [OutgoingMails_deleted].[SentTime], [OutgoingMails_deleted].[Comments], [OutgoingMails_deleted].[Creator], [OutgoingMails_deleted].[Updator], [OutgoingMails_deleted].[CreatedTime], [OutgoingMails_deleted].[UpdatedTime]) (select [OutgoingMails].[ReferenceType], [OutgoingMails].[ReferenceId], [OutgoingMails].[ReferenceVer], [OutgoingMails].[OutgoingMailId], [OutgoingMails].[Ver], [OutgoingMails].[Host], [OutgoingMails].[Port], [OutgoingMails].[From], [OutgoingMails].[To], [OutgoingMails].[Cc], [OutgoingMails].[Bcc], [OutgoingMails].[Title], [OutgoingMails].[Body], [OutgoingMails].[SentTime], [OutgoingMails].[Comments], [OutgoingMails].[Creator], [OutgoingMails].[Updator], [OutgoingMails].[CreatedTime], [OutgoingMails].[UpdatedTime] from [OutgoingMails] {0}); delete from [OutgoingMails] {0}";
        public const string DeleteSearchIndexesStatement = "update [SearchIndexes] set [SearchIndexes].[UpdatedTime] = getdate() {0}; insert into [SearchIndexes_deleted]([SearchIndexes_deleted].[Word], [SearchIndexes_deleted].[ReferenceId], [SearchIndexes_deleted].[Ver], [SearchIndexes_deleted].[Priority], [SearchIndexes_deleted].[Comments], [SearchIndexes_deleted].[Creator], [SearchIndexes_deleted].[Updator], [SearchIndexes_deleted].[CreatedTime], [SearchIndexes_deleted].[UpdatedTime]) (select [SearchIndexes].[Word], [SearchIndexes].[ReferenceId], [SearchIndexes].[Ver], [SearchIndexes].[Priority], [SearchIndexes].[Comments], [SearchIndexes].[Creator], [SearchIndexes].[Updator], [SearchIndexes].[CreatedTime], [SearchIndexes].[UpdatedTime] from [SearchIndexes] {0}); delete from [SearchIndexes] {0}";
        public const string DeleteItemsStatement = "update [Items] set [Items].[UpdatedTime] = getdate() {0}; insert into [Items_deleted]([Items_deleted].[ReferenceId], [Items_deleted].[Ver], [Items_deleted].[ReferenceType], [Items_deleted].[SiteId], [Items_deleted].[Title], [Items_deleted].[Subset], [Items_deleted].[MaintenanceTarget], [Items_deleted].[Comments], [Items_deleted].[Creator], [Items_deleted].[Updator], [Items_deleted].[CreatedTime], [Items_deleted].[UpdatedTime]) (select [Items].[ReferenceId], [Items].[Ver], [Items].[ReferenceType], [Items].[SiteId], [Items].[Title], [Items].[Subset], [Items].[MaintenanceTarget], [Items].[Comments], [Items].[Creator], [Items].[Updator], [Items].[CreatedTime], [Items].[UpdatedTime] from [Items] {0}); delete from [Items] {0}";
        public const string DeleteSitesStatement = "update [Sites] set [Sites].[UpdatedTime] = getdate() {0}; insert into [Sites_deleted]([Sites_deleted].[TenantId], [Sites_deleted].[SiteId], [Sites_deleted].[UpdatedTime], [Sites_deleted].[Ver], [Sites_deleted].[Title], [Sites_deleted].[Body], [Sites_deleted].[ReferenceType], [Sites_deleted].[ParentId], [Sites_deleted].[InheritPermission], [Sites_deleted].[SiteSettings], [Sites_deleted].[Comments], [Sites_deleted].[Creator], [Sites_deleted].[Updator], [Sites_deleted].[CreatedTime]) (select [Sites].[TenantId], [Sites].[SiteId], [Sites].[UpdatedTime], [Sites].[Ver], [Sites].[Title], [Sites].[Body], [Sites].[ReferenceType], [Sites].[ParentId], [Sites].[InheritPermission], [Sites].[SiteSettings], [Sites].[Comments], [Sites].[Creator], [Sites].[Updator], [Sites].[CreatedTime] from [Sites] {0}); delete from [Sites] {0}";
        public const string DeleteOrdersStatement = "update [Orders] set [Orders].[UpdatedTime] = getdate() {0}; insert into [Orders_deleted]([Orders_deleted].[ReferenceId], [Orders_deleted].[ReferenceType], [Orders_deleted].[OwnerId], [Orders_deleted].[Ver], [Orders_deleted].[Data], [Orders_deleted].[Comments], [Orders_deleted].[Creator], [Orders_deleted].[Updator], [Orders_deleted].[CreatedTime], [Orders_deleted].[UpdatedTime]) (select [Orders].[ReferenceId], [Orders].[ReferenceType], [Orders].[OwnerId], [Orders].[Ver], [Orders].[Data], [Orders].[Comments], [Orders].[Creator], [Orders].[Updator], [Orders].[CreatedTime], [Orders].[UpdatedTime] from [Orders] {0}); delete from [Orders] {0}";
        public const string DeleteExportSettingsStatement = "update [ExportSettings] set [ExportSettings].[UpdatedTime] = getdate() {0}; insert into [ExportSettings_deleted]([ExportSettings_deleted].[ReferenceType], [ExportSettings_deleted].[ReferenceId], [ExportSettings_deleted].[Title], [ExportSettings_deleted].[ExportSettingId], [ExportSettings_deleted].[Ver], [ExportSettings_deleted].[AddHeader], [ExportSettings_deleted].[ExportColumns], [ExportSettings_deleted].[Comments], [ExportSettings_deleted].[Creator], [ExportSettings_deleted].[Updator], [ExportSettings_deleted].[CreatedTime], [ExportSettings_deleted].[UpdatedTime]) (select [ExportSettings].[ReferenceType], [ExportSettings].[ReferenceId], [ExportSettings].[Title], [ExportSettings].[ExportSettingId], [ExportSettings].[Ver], [ExportSettings].[AddHeader], [ExportSettings].[ExportColumns], [ExportSettings].[Comments], [ExportSettings].[Creator], [ExportSettings].[Updator], [ExportSettings].[CreatedTime], [ExportSettings].[UpdatedTime] from [ExportSettings] {0}); delete from [ExportSettings] {0}";
        public const string DeleteLinksStatement = "update [Links] set [Links].[UpdatedTime] = getdate() {0}; insert into [Links_deleted]([Links_deleted].[DestinationId], [Links_deleted].[SourceId], [Links_deleted].[Ver], [Links_deleted].[Comments], [Links_deleted].[Creator], [Links_deleted].[Updator], [Links_deleted].[CreatedTime], [Links_deleted].[UpdatedTime]) (select [Links].[DestinationId], [Links].[SourceId], [Links].[Ver], [Links].[Comments], [Links].[Creator], [Links].[Updator], [Links].[CreatedTime], [Links].[UpdatedTime] from [Links] {0}); delete from [Links] {0}";
        public const string DeleteBinariesStatement = "update [Binaries] set [Binaries].[UpdatedTime] = getdate() {0}; insert into [Binaries_deleted]([Binaries_deleted].[ReferenceId], [Binaries_deleted].[BinaryId], [Binaries_deleted].[Ver], [Binaries_deleted].[BinaryType], [Binaries_deleted].[Title], [Binaries_deleted].[Body], [Binaries_deleted].[Bin], [Binaries_deleted].[Thumbnail], [Binaries_deleted].[Icon], [Binaries_deleted].[FileName], [Binaries_deleted].[Extension], [Binaries_deleted].[Size], [Binaries_deleted].[BinarySettings], [Binaries_deleted].[Comments], [Binaries_deleted].[Creator], [Binaries_deleted].[Updator], [Binaries_deleted].[CreatedTime], [Binaries_deleted].[UpdatedTime]) (select [Binaries].[ReferenceId], [Binaries].[BinaryId], [Binaries].[Ver], [Binaries].[BinaryType], [Binaries].[Title], [Binaries].[Body], [Binaries].[Bin], [Binaries].[Thumbnail], [Binaries].[Icon], [Binaries].[FileName], [Binaries].[Extension], [Binaries].[Size], [Binaries].[BinarySettings], [Binaries].[Comments], [Binaries].[Creator], [Binaries].[Updator], [Binaries].[CreatedTime], [Binaries].[UpdatedTime] from [Binaries] {0}); delete from [Binaries] {0}";
        public const string DeleteIssuesStatement = "update [Issues] set [Issues].[UpdatedTime] = getdate() {0}; insert into [Issues_deleted]([Issues_deleted].[SiteId], [Issues_deleted].[UpdatedTime], [Issues_deleted].[IssueId], [Issues_deleted].[Ver], [Issues_deleted].[Title], [Issues_deleted].[Body], [Issues_deleted].[StartTime], [Issues_deleted].[CompletionTime], [Issues_deleted].[WorkValue], [Issues_deleted].[ProgressRate], [Issues_deleted].[Status], [Issues_deleted].[Manager], [Issues_deleted].[Owner], [Issues_deleted].[ClassA], [Issues_deleted].[ClassB], [Issues_deleted].[ClassC], [Issues_deleted].[ClassD], [Issues_deleted].[ClassE], [Issues_deleted].[ClassF], [Issues_deleted].[ClassG], [Issues_deleted].[ClassH], [Issues_deleted].[ClassI], [Issues_deleted].[ClassJ], [Issues_deleted].[ClassK], [Issues_deleted].[ClassL], [Issues_deleted].[ClassM], [Issues_deleted].[ClassN], [Issues_deleted].[ClassO], [Issues_deleted].[ClassP], [Issues_deleted].[NumA], [Issues_deleted].[NumB], [Issues_deleted].[NumC], [Issues_deleted].[NumD], [Issues_deleted].[NumE], [Issues_deleted].[NumF], [Issues_deleted].[NumG], [Issues_deleted].[NumH], [Issues_deleted].[NumI], [Issues_deleted].[NumJ], [Issues_deleted].[NumK], [Issues_deleted].[NumL], [Issues_deleted].[NumM], [Issues_deleted].[NumN], [Issues_deleted].[NumO], [Issues_deleted].[NumP], [Issues_deleted].[DateA], [Issues_deleted].[DateB], [Issues_deleted].[DateC], [Issues_deleted].[DateD], [Issues_deleted].[DateE], [Issues_deleted].[DateF], [Issues_deleted].[DateG], [Issues_deleted].[DateH], [Issues_deleted].[DateI], [Issues_deleted].[DateJ], [Issues_deleted].[DateK], [Issues_deleted].[DateL], [Issues_deleted].[DateM], [Issues_deleted].[DateN], [Issues_deleted].[DateO], [Issues_deleted].[DateP], [Issues_deleted].[DescriptionA], [Issues_deleted].[DescriptionB], [Issues_deleted].[DescriptionC], [Issues_deleted].[DescriptionD], [Issues_deleted].[DescriptionE], [Issues_deleted].[DescriptionF], [Issues_deleted].[DescriptionG], [Issues_deleted].[DescriptionH], [Issues_deleted].[DescriptionI], [Issues_deleted].[DescriptionJ], [Issues_deleted].[DescriptionK], [Issues_deleted].[DescriptionL], [Issues_deleted].[DescriptionM], [Issues_deleted].[DescriptionN], [Issues_deleted].[DescriptionO], [Issues_deleted].[DescriptionP], [Issues_deleted].[CheckA], [Issues_deleted].[CheckB], [Issues_deleted].[CheckC], [Issues_deleted].[CheckD], [Issues_deleted].[CheckE], [Issues_deleted].[CheckF], [Issues_deleted].[CheckG], [Issues_deleted].[CheckH], [Issues_deleted].[CheckI], [Issues_deleted].[CheckJ], [Issues_deleted].[CheckK], [Issues_deleted].[CheckL], [Issues_deleted].[CheckM], [Issues_deleted].[CheckN], [Issues_deleted].[CheckO], [Issues_deleted].[CheckP], [Issues_deleted].[Comments], [Issues_deleted].[Creator], [Issues_deleted].[Updator], [Issues_deleted].[CreatedTime]) (select [Issues].[SiteId], [Issues].[UpdatedTime], [Issues].[IssueId], [Issues].[Ver], [Issues].[Title], [Issues].[Body], [Issues].[StartTime], [Issues].[CompletionTime], [Issues].[WorkValue], [Issues].[ProgressRate], [Issues].[Status], [Issues].[Manager], [Issues].[Owner], [Issues].[ClassA], [Issues].[ClassB], [Issues].[ClassC], [Issues].[ClassD], [Issues].[ClassE], [Issues].[ClassF], [Issues].[ClassG], [Issues].[ClassH], [Issues].[ClassI], [Issues].[ClassJ], [Issues].[ClassK], [Issues].[ClassL], [Issues].[ClassM], [Issues].[ClassN], [Issues].[ClassO], [Issues].[ClassP], [Issues].[NumA], [Issues].[NumB], [Issues].[NumC], [Issues].[NumD], [Issues].[NumE], [Issues].[NumF], [Issues].[NumG], [Issues].[NumH], [Issues].[NumI], [Issues].[NumJ], [Issues].[NumK], [Issues].[NumL], [Issues].[NumM], [Issues].[NumN], [Issues].[NumO], [Issues].[NumP], [Issues].[DateA], [Issues].[DateB], [Issues].[DateC], [Issues].[DateD], [Issues].[DateE], [Issues].[DateF], [Issues].[DateG], [Issues].[DateH], [Issues].[DateI], [Issues].[DateJ], [Issues].[DateK], [Issues].[DateL], [Issues].[DateM], [Issues].[DateN], [Issues].[DateO], [Issues].[DateP], [Issues].[DescriptionA], [Issues].[DescriptionB], [Issues].[DescriptionC], [Issues].[DescriptionD], [Issues].[DescriptionE], [Issues].[DescriptionF], [Issues].[DescriptionG], [Issues].[DescriptionH], [Issues].[DescriptionI], [Issues].[DescriptionJ], [Issues].[DescriptionK], [Issues].[DescriptionL], [Issues].[DescriptionM], [Issues].[DescriptionN], [Issues].[DescriptionO], [Issues].[DescriptionP], [Issues].[CheckA], [Issues].[CheckB], [Issues].[CheckC], [Issues].[CheckD], [Issues].[CheckE], [Issues].[CheckF], [Issues].[CheckG], [Issues].[CheckH], [Issues].[CheckI], [Issues].[CheckJ], [Issues].[CheckK], [Issues].[CheckL], [Issues].[CheckM], [Issues].[CheckN], [Issues].[CheckO], [Issues].[CheckP], [Issues].[Comments], [Issues].[Creator], [Issues].[Updator], [Issues].[CreatedTime] from [Issues] {0}); delete from [Issues] {0}";
        public const string DeleteResultsStatement = "update [Results] set [Results].[UpdatedTime] = getdate() {0}; insert into [Results_deleted]([Results_deleted].[SiteId], [Results_deleted].[UpdatedTime], [Results_deleted].[ResultId], [Results_deleted].[Ver], [Results_deleted].[Title], [Results_deleted].[Body], [Results_deleted].[Status], [Results_deleted].[Manager], [Results_deleted].[Owner], [Results_deleted].[ClassA], [Results_deleted].[ClassB], [Results_deleted].[ClassC], [Results_deleted].[ClassD], [Results_deleted].[ClassE], [Results_deleted].[ClassF], [Results_deleted].[ClassG], [Results_deleted].[ClassH], [Results_deleted].[ClassI], [Results_deleted].[ClassJ], [Results_deleted].[ClassK], [Results_deleted].[ClassL], [Results_deleted].[ClassM], [Results_deleted].[ClassN], [Results_deleted].[ClassO], [Results_deleted].[ClassP], [Results_deleted].[NumA], [Results_deleted].[NumB], [Results_deleted].[NumC], [Results_deleted].[NumD], [Results_deleted].[NumE], [Results_deleted].[NumF], [Results_deleted].[NumG], [Results_deleted].[NumH], [Results_deleted].[NumI], [Results_deleted].[NumJ], [Results_deleted].[NumK], [Results_deleted].[NumL], [Results_deleted].[NumM], [Results_deleted].[NumN], [Results_deleted].[NumO], [Results_deleted].[NumP], [Results_deleted].[DateA], [Results_deleted].[DateB], [Results_deleted].[DateC], [Results_deleted].[DateD], [Results_deleted].[DateE], [Results_deleted].[DateF], [Results_deleted].[DateG], [Results_deleted].[DateH], [Results_deleted].[DateI], [Results_deleted].[DateJ], [Results_deleted].[DateK], [Results_deleted].[DateL], [Results_deleted].[DateM], [Results_deleted].[DateN], [Results_deleted].[DateO], [Results_deleted].[DateP], [Results_deleted].[DescriptionA], [Results_deleted].[DescriptionB], [Results_deleted].[DescriptionC], [Results_deleted].[DescriptionD], [Results_deleted].[DescriptionE], [Results_deleted].[DescriptionF], [Results_deleted].[DescriptionG], [Results_deleted].[DescriptionH], [Results_deleted].[DescriptionI], [Results_deleted].[DescriptionJ], [Results_deleted].[DescriptionK], [Results_deleted].[DescriptionL], [Results_deleted].[DescriptionM], [Results_deleted].[DescriptionN], [Results_deleted].[DescriptionO], [Results_deleted].[DescriptionP], [Results_deleted].[CheckA], [Results_deleted].[CheckB], [Results_deleted].[CheckC], [Results_deleted].[CheckD], [Results_deleted].[CheckE], [Results_deleted].[CheckF], [Results_deleted].[CheckG], [Results_deleted].[CheckH], [Results_deleted].[CheckI], [Results_deleted].[CheckJ], [Results_deleted].[CheckK], [Results_deleted].[CheckL], [Results_deleted].[CheckM], [Results_deleted].[CheckN], [Results_deleted].[CheckO], [Results_deleted].[CheckP], [Results_deleted].[Comments], [Results_deleted].[Creator], [Results_deleted].[Updator], [Results_deleted].[CreatedTime]) (select [Results].[SiteId], [Results].[UpdatedTime], [Results].[ResultId], [Results].[Ver], [Results].[Title], [Results].[Body], [Results].[Status], [Results].[Manager], [Results].[Owner], [Results].[ClassA], [Results].[ClassB], [Results].[ClassC], [Results].[ClassD], [Results].[ClassE], [Results].[ClassF], [Results].[ClassG], [Results].[ClassH], [Results].[ClassI], [Results].[ClassJ], [Results].[ClassK], [Results].[ClassL], [Results].[ClassM], [Results].[ClassN], [Results].[ClassO], [Results].[ClassP], [Results].[NumA], [Results].[NumB], [Results].[NumC], [Results].[NumD], [Results].[NumE], [Results].[NumF], [Results].[NumG], [Results].[NumH], [Results].[NumI], [Results].[NumJ], [Results].[NumK], [Results].[NumL], [Results].[NumM], [Results].[NumN], [Results].[NumO], [Results].[NumP], [Results].[DateA], [Results].[DateB], [Results].[DateC], [Results].[DateD], [Results].[DateE], [Results].[DateF], [Results].[DateG], [Results].[DateH], [Results].[DateI], [Results].[DateJ], [Results].[DateK], [Results].[DateL], [Results].[DateM], [Results].[DateN], [Results].[DateO], [Results].[DateP], [Results].[DescriptionA], [Results].[DescriptionB], [Results].[DescriptionC], [Results].[DescriptionD], [Results].[DescriptionE], [Results].[DescriptionF], [Results].[DescriptionG], [Results].[DescriptionH], [Results].[DescriptionI], [Results].[DescriptionJ], [Results].[DescriptionK], [Results].[DescriptionL], [Results].[DescriptionM], [Results].[DescriptionN], [Results].[DescriptionO], [Results].[DescriptionP], [Results].[CheckA], [Results].[CheckB], [Results].[CheckC], [Results].[CheckD], [Results].[CheckE], [Results].[CheckF], [Results].[CheckG], [Results].[CheckH], [Results].[CheckI], [Results].[CheckJ], [Results].[CheckK], [Results].[CheckL], [Results].[CheckM], [Results].[CheckN], [Results].[CheckO], [Results].[CheckP], [Results].[Comments], [Results].[Creator], [Results].[Updator], [Results].[CreatedTime] from [Results] {0}); delete from [Results] {0}";
        public const string DeleteWikisStatement = "update [Wikis] set [Wikis].[UpdatedTime] = getdate() {0}; insert into [Wikis_deleted]([Wikis_deleted].[SiteId], [Wikis_deleted].[UpdatedTime], [Wikis_deleted].[WikiId], [Wikis_deleted].[Ver], [Wikis_deleted].[Title], [Wikis_deleted].[Body], [Wikis_deleted].[Comments], [Wikis_deleted].[Creator], [Wikis_deleted].[Updator], [Wikis_deleted].[CreatedTime]) (select [Wikis].[SiteId], [Wikis].[UpdatedTime], [Wikis].[WikiId], [Wikis].[Ver], [Wikis].[Title], [Wikis].[Body], [Wikis].[Comments], [Wikis].[Creator], [Wikis].[Updator], [Wikis].[CreatedTime] from [Wikis] {0}); delete from [Wikis] {0}";
        public const string RestoreTenantsStatement = "update [Tenants_deleted] set [Tenants_deleted].[UpdatedTime] = getdate() {0};set identity_insert [Tenants] on;  insert into [Tenants]([Tenants].[TenantId], [Tenants].[Ver], [Tenants].[TenantName], [Tenants].[Title], [Tenants].[Body], [Tenants].[Comments], [Tenants].[Creator], [Tenants].[Updator], [Tenants].[CreatedTime], [Tenants].[UpdatedTime]) (select [Tenants_deleted].[TenantId], [Tenants_deleted].[Ver], [Tenants_deleted].[TenantName], [Tenants_deleted].[Title], [Tenants_deleted].[Body], [Tenants_deleted].[Comments], [Tenants_deleted].[Creator], [Tenants_deleted].[Updator], [Tenants_deleted].[CreatedTime], [Tenants_deleted].[UpdatedTime] from [Tenants_deleted] {0});set identity_insert [Tenants] off;  delete from [Tenants_deleted] {0}";
        public const string RestoreDemosStatement = "update [Demos_deleted] set [Demos_deleted].[UpdatedTime] = getdate() {0};set identity_insert [Demos] on;  insert into [Demos]([Demos].[DemoId], [Demos].[Ver], [Demos].[TenantId], [Demos].[Title], [Demos].[Passphrase], [Demos].[MailAddress], [Demos].[Initialized], [Demos].[Comments], [Demos].[Creator], [Demos].[Updator], [Demos].[CreatedTime], [Demos].[UpdatedTime]) (select [Demos_deleted].[DemoId], [Demos_deleted].[Ver], [Demos_deleted].[TenantId], [Demos_deleted].[Title], [Demos_deleted].[Passphrase], [Demos_deleted].[MailAddress], [Demos_deleted].[Initialized], [Demos_deleted].[Comments], [Demos_deleted].[Creator], [Demos_deleted].[Updator], [Demos_deleted].[CreatedTime], [Demos_deleted].[UpdatedTime] from [Demos_deleted] {0});set identity_insert [Demos] off;  delete from [Demos_deleted] {0}";
        public const string RestoreSysLogsStatement = "update [SysLogs_deleted] set [SysLogs_deleted].[UpdatedTime] = getdate() {0};set identity_insert [SysLogs] on;  insert into [SysLogs]([SysLogs].[CreatedTime], [SysLogs].[SysLogId], [SysLogs].[Ver], [SysLogs].[SysLogType], [SysLogs].[OnAzure], [SysLogs].[MachineName], [SysLogs].[ServiceName], [SysLogs].[TenantName], [SysLogs].[Application], [SysLogs].[Class], [SysLogs].[Method], [SysLogs].[RequestData], [SysLogs].[HttpMethod], [SysLogs].[RequestSize], [SysLogs].[ResponseSize], [SysLogs].[Elapsed], [SysLogs].[ApplicationAge], [SysLogs].[ApplicationRequestInterval], [SysLogs].[SessionAge], [SysLogs].[SessionRequestInterval], [SysLogs].[WorkingSet64], [SysLogs].[VirtualMemorySize64], [SysLogs].[ProcessId], [SysLogs].[ProcessName], [SysLogs].[BasePriority], [SysLogs].[Url], [SysLogs].[UrlReferer], [SysLogs].[UserHostName], [SysLogs].[UserHostAddress], [SysLogs].[UserLanguage], [SysLogs].[UserAgent], [SysLogs].[SessionGuid], [SysLogs].[ErrMessage], [SysLogs].[ErrStackTrace], [SysLogs].[InDebug], [SysLogs].[AssemblyVersion], [SysLogs].[Comments], [SysLogs].[Creator], [SysLogs].[Updator], [SysLogs].[UpdatedTime]) (select [SysLogs_deleted].[CreatedTime], [SysLogs_deleted].[SysLogId], [SysLogs_deleted].[Ver], [SysLogs_deleted].[SysLogType], [SysLogs_deleted].[OnAzure], [SysLogs_deleted].[MachineName], [SysLogs_deleted].[ServiceName], [SysLogs_deleted].[TenantName], [SysLogs_deleted].[Application], [SysLogs_deleted].[Class], [SysLogs_deleted].[Method], [SysLogs_deleted].[RequestData], [SysLogs_deleted].[HttpMethod], [SysLogs_deleted].[RequestSize], [SysLogs_deleted].[ResponseSize], [SysLogs_deleted].[Elapsed], [SysLogs_deleted].[ApplicationAge], [SysLogs_deleted].[ApplicationRequestInterval], [SysLogs_deleted].[SessionAge], [SysLogs_deleted].[SessionRequestInterval], [SysLogs_deleted].[WorkingSet64], [SysLogs_deleted].[VirtualMemorySize64], [SysLogs_deleted].[ProcessId], [SysLogs_deleted].[ProcessName], [SysLogs_deleted].[BasePriority], [SysLogs_deleted].[Url], [SysLogs_deleted].[UrlReferer], [SysLogs_deleted].[UserHostName], [SysLogs_deleted].[UserHostAddress], [SysLogs_deleted].[UserLanguage], [SysLogs_deleted].[UserAgent], [SysLogs_deleted].[SessionGuid], [SysLogs_deleted].[ErrMessage], [SysLogs_deleted].[ErrStackTrace], [SysLogs_deleted].[InDebug], [SysLogs_deleted].[AssemblyVersion], [SysLogs_deleted].[Comments], [SysLogs_deleted].[Creator], [SysLogs_deleted].[Updator], [SysLogs_deleted].[UpdatedTime] from [SysLogs_deleted] {0});set identity_insert [SysLogs] off;  delete from [SysLogs_deleted] {0}";
        public const string RestoreDeptsStatement = "update [Depts_deleted] set [Depts_deleted].[UpdatedTime] = getdate() {0};set identity_insert [Depts] on;  insert into [Depts]([Depts].[TenantId], [Depts].[DeptId], [Depts].[Ver], [Depts].[ParentDeptId], [Depts].[DeptCode], [Depts].[DeptName], [Depts].[Body], [Depts].[Comments], [Depts].[Creator], [Depts].[Updator], [Depts].[CreatedTime], [Depts].[UpdatedTime]) (select [Depts_deleted].[TenantId], [Depts_deleted].[DeptId], [Depts_deleted].[Ver], [Depts_deleted].[ParentDeptId], [Depts_deleted].[DeptCode], [Depts_deleted].[DeptName], [Depts_deleted].[Body], [Depts_deleted].[Comments], [Depts_deleted].[Creator], [Depts_deleted].[Updator], [Depts_deleted].[CreatedTime], [Depts_deleted].[UpdatedTime] from [Depts_deleted] {0});set identity_insert [Depts] off;  delete from [Depts_deleted] {0}";
        public const string RestoreUsersStatement = "update [Users_deleted] set [Users_deleted].[UpdatedTime] = getdate() {0};set identity_insert [Users] on;  insert into [Users]([Users].[TenantId], [Users].[UserId], [Users].[Ver], [Users].[LoginId], [Users].[Disabled], [Users].[UserCode], [Users].[Password], [Users].[LastName], [Users].[FirstName], [Users].[Birthday], [Users].[Sex], [Users].[Language], [Users].[TimeZone], [Users].[DeptId], [Users].[FirstAndLastNameOrder], [Users].[LastLoginTime], [Users].[PasswordExpirationTime], [Users].[PasswordChangeTime], [Users].[NumberOfLogins], [Users].[NumberOfDenial], [Users].[TenantAdmin], [Users].[ServiceAdmin], [Users].[Developer], [Users].[Comments], [Users].[Creator], [Users].[Updator], [Users].[CreatedTime], [Users].[UpdatedTime]) (select [Users_deleted].[TenantId], [Users_deleted].[UserId], [Users_deleted].[Ver], [Users_deleted].[LoginId], [Users_deleted].[Disabled], [Users_deleted].[UserCode], [Users_deleted].[Password], [Users_deleted].[LastName], [Users_deleted].[FirstName], [Users_deleted].[Birthday], [Users_deleted].[Sex], [Users_deleted].[Language], [Users_deleted].[TimeZone], [Users_deleted].[DeptId], [Users_deleted].[FirstAndLastNameOrder], [Users_deleted].[LastLoginTime], [Users_deleted].[PasswordExpirationTime], [Users_deleted].[PasswordChangeTime], [Users_deleted].[NumberOfLogins], [Users_deleted].[NumberOfDenial], [Users_deleted].[TenantAdmin], [Users_deleted].[ServiceAdmin], [Users_deleted].[Developer], [Users_deleted].[Comments], [Users_deleted].[Creator], [Users_deleted].[Updator], [Users_deleted].[CreatedTime], [Users_deleted].[UpdatedTime] from [Users_deleted] {0});set identity_insert [Users] off;  delete from [Users_deleted] {0}";
        public const string RestoreMailAddressesStatement = "update [MailAddresses_deleted] set [MailAddresses_deleted].[UpdatedTime] = getdate() {0};set identity_insert [MailAddresses] on;  insert into [MailAddresses]([MailAddresses].[OwnerId], [MailAddresses].[OwnerType], [MailAddresses].[MailAddressId], [MailAddresses].[Ver], [MailAddresses].[MailAddress], [MailAddresses].[Comments], [MailAddresses].[Creator], [MailAddresses].[Updator], [MailAddresses].[CreatedTime], [MailAddresses].[UpdatedTime]) (select [MailAddresses_deleted].[OwnerId], [MailAddresses_deleted].[OwnerType], [MailAddresses_deleted].[MailAddressId], [MailAddresses_deleted].[Ver], [MailAddresses_deleted].[MailAddress], [MailAddresses_deleted].[Comments], [MailAddresses_deleted].[Creator], [MailAddresses_deleted].[Updator], [MailAddresses_deleted].[CreatedTime], [MailAddresses_deleted].[UpdatedTime] from [MailAddresses_deleted] {0});set identity_insert [MailAddresses] off;  delete from [MailAddresses_deleted] {0}";
        public const string RestorePermissionsStatement = "update [Permissions_deleted] set [Permissions_deleted].[UpdatedTime] = getdate() {0}; insert into [Permissions]([Permissions].[ReferenceType], [Permissions].[ReferenceId], [Permissions].[DeptId], [Permissions].[UserId], [Permissions].[Ver], [Permissions].[PermissionType], [Permissions].[Comments], [Permissions].[Creator], [Permissions].[Updator], [Permissions].[CreatedTime], [Permissions].[UpdatedTime]) (select [Permissions_deleted].[ReferenceType], [Permissions_deleted].[ReferenceId], [Permissions_deleted].[DeptId], [Permissions_deleted].[UserId], [Permissions_deleted].[Ver], [Permissions_deleted].[PermissionType], [Permissions_deleted].[Comments], [Permissions_deleted].[Creator], [Permissions_deleted].[Updator], [Permissions_deleted].[CreatedTime], [Permissions_deleted].[UpdatedTime] from [Permissions_deleted] {0}); delete from [Permissions_deleted] {0}";
        public const string RestoreOutgoingMailsStatement = "update [OutgoingMails_deleted] set [OutgoingMails_deleted].[UpdatedTime] = getdate() {0};set identity_insert [OutgoingMails] on;  insert into [OutgoingMails]([OutgoingMails].[ReferenceType], [OutgoingMails].[ReferenceId], [OutgoingMails].[ReferenceVer], [OutgoingMails].[OutgoingMailId], [OutgoingMails].[Ver], [OutgoingMails].[Host], [OutgoingMails].[Port], [OutgoingMails].[From], [OutgoingMails].[To], [OutgoingMails].[Cc], [OutgoingMails].[Bcc], [OutgoingMails].[Title], [OutgoingMails].[Body], [OutgoingMails].[SentTime], [OutgoingMails].[Comments], [OutgoingMails].[Creator], [OutgoingMails].[Updator], [OutgoingMails].[CreatedTime], [OutgoingMails].[UpdatedTime]) (select [OutgoingMails_deleted].[ReferenceType], [OutgoingMails_deleted].[ReferenceId], [OutgoingMails_deleted].[ReferenceVer], [OutgoingMails_deleted].[OutgoingMailId], [OutgoingMails_deleted].[Ver], [OutgoingMails_deleted].[Host], [OutgoingMails_deleted].[Port], [OutgoingMails_deleted].[From], [OutgoingMails_deleted].[To], [OutgoingMails_deleted].[Cc], [OutgoingMails_deleted].[Bcc], [OutgoingMails_deleted].[Title], [OutgoingMails_deleted].[Body], [OutgoingMails_deleted].[SentTime], [OutgoingMails_deleted].[Comments], [OutgoingMails_deleted].[Creator], [OutgoingMails_deleted].[Updator], [OutgoingMails_deleted].[CreatedTime], [OutgoingMails_deleted].[UpdatedTime] from [OutgoingMails_deleted] {0});set identity_insert [OutgoingMails] off;  delete from [OutgoingMails_deleted] {0}";
        public const string RestoreSearchIndexesStatement = "update [SearchIndexes_deleted] set [SearchIndexes_deleted].[UpdatedTime] = getdate() {0}; insert into [SearchIndexes]([SearchIndexes].[Word], [SearchIndexes].[ReferenceId], [SearchIndexes].[Ver], [SearchIndexes].[Priority], [SearchIndexes].[Comments], [SearchIndexes].[Creator], [SearchIndexes].[Updator], [SearchIndexes].[CreatedTime], [SearchIndexes].[UpdatedTime]) (select [SearchIndexes_deleted].[Word], [SearchIndexes_deleted].[ReferenceId], [SearchIndexes_deleted].[Ver], [SearchIndexes_deleted].[Priority], [SearchIndexes_deleted].[Comments], [SearchIndexes_deleted].[Creator], [SearchIndexes_deleted].[Updator], [SearchIndexes_deleted].[CreatedTime], [SearchIndexes_deleted].[UpdatedTime] from [SearchIndexes_deleted] {0}); delete from [SearchIndexes_deleted] {0}";
        public const string RestoreItemsStatement = "update [Items_deleted] set [Items_deleted].[UpdatedTime] = getdate() {0};set identity_insert [Items] on;  insert into [Items]([Items].[ReferenceId], [Items].[Ver], [Items].[ReferenceType], [Items].[SiteId], [Items].[Title], [Items].[Subset], [Items].[MaintenanceTarget], [Items].[Comments], [Items].[Creator], [Items].[Updator], [Items].[CreatedTime], [Items].[UpdatedTime]) (select [Items_deleted].[ReferenceId], [Items_deleted].[Ver], [Items_deleted].[ReferenceType], [Items_deleted].[SiteId], [Items_deleted].[Title], [Items_deleted].[Subset], [Items_deleted].[MaintenanceTarget], [Items_deleted].[Comments], [Items_deleted].[Creator], [Items_deleted].[Updator], [Items_deleted].[CreatedTime], [Items_deleted].[UpdatedTime] from [Items_deleted] {0});set identity_insert [Items] off;  delete from [Items_deleted] {0}";
        public const string RestoreSitesStatement = "update [Sites_deleted] set [Sites_deleted].[UpdatedTime] = getdate() {0}; insert into [Sites]([Sites].[TenantId], [Sites].[SiteId], [Sites].[UpdatedTime], [Sites].[Ver], [Sites].[Title], [Sites].[Body], [Sites].[ReferenceType], [Sites].[ParentId], [Sites].[InheritPermission], [Sites].[SiteSettings], [Sites].[Comments], [Sites].[Creator], [Sites].[Updator], [Sites].[CreatedTime]) (select [Sites_deleted].[TenantId], [Sites_deleted].[SiteId], [Sites_deleted].[UpdatedTime], [Sites_deleted].[Ver], [Sites_deleted].[Title], [Sites_deleted].[Body], [Sites_deleted].[ReferenceType], [Sites_deleted].[ParentId], [Sites_deleted].[InheritPermission], [Sites_deleted].[SiteSettings], [Sites_deleted].[Comments], [Sites_deleted].[Creator], [Sites_deleted].[Updator], [Sites_deleted].[CreatedTime] from [Sites_deleted] {0}); delete from [Sites_deleted] {0}";
        public const string RestoreOrdersStatement = "update [Orders_deleted] set [Orders_deleted].[UpdatedTime] = getdate() {0}; insert into [Orders]([Orders].[ReferenceId], [Orders].[ReferenceType], [Orders].[OwnerId], [Orders].[Ver], [Orders].[Data], [Orders].[Comments], [Orders].[Creator], [Orders].[Updator], [Orders].[CreatedTime], [Orders].[UpdatedTime]) (select [Orders_deleted].[ReferenceId], [Orders_deleted].[ReferenceType], [Orders_deleted].[OwnerId], [Orders_deleted].[Ver], [Orders_deleted].[Data], [Orders_deleted].[Comments], [Orders_deleted].[Creator], [Orders_deleted].[Updator], [Orders_deleted].[CreatedTime], [Orders_deleted].[UpdatedTime] from [Orders_deleted] {0}); delete from [Orders_deleted] {0}";
        public const string RestoreExportSettingsStatement = "update [ExportSettings_deleted] set [ExportSettings_deleted].[UpdatedTime] = getdate() {0};set identity_insert [ExportSettings] on;  insert into [ExportSettings]([ExportSettings].[ReferenceType], [ExportSettings].[ReferenceId], [ExportSettings].[Title], [ExportSettings].[ExportSettingId], [ExportSettings].[Ver], [ExportSettings].[AddHeader], [ExportSettings].[ExportColumns], [ExportSettings].[Comments], [ExportSettings].[Creator], [ExportSettings].[Updator], [ExportSettings].[CreatedTime], [ExportSettings].[UpdatedTime]) (select [ExportSettings_deleted].[ReferenceType], [ExportSettings_deleted].[ReferenceId], [ExportSettings_deleted].[Title], [ExportSettings_deleted].[ExportSettingId], [ExportSettings_deleted].[Ver], [ExportSettings_deleted].[AddHeader], [ExportSettings_deleted].[ExportColumns], [ExportSettings_deleted].[Comments], [ExportSettings_deleted].[Creator], [ExportSettings_deleted].[Updator], [ExportSettings_deleted].[CreatedTime], [ExportSettings_deleted].[UpdatedTime] from [ExportSettings_deleted] {0});set identity_insert [ExportSettings] off;  delete from [ExportSettings_deleted] {0}";
        public const string RestoreLinksStatement = "update [Links_deleted] set [Links_deleted].[UpdatedTime] = getdate() {0}; insert into [Links]([Links].[DestinationId], [Links].[SourceId], [Links].[Ver], [Links].[Comments], [Links].[Creator], [Links].[Updator], [Links].[CreatedTime], [Links].[UpdatedTime]) (select [Links_deleted].[DestinationId], [Links_deleted].[SourceId], [Links_deleted].[Ver], [Links_deleted].[Comments], [Links_deleted].[Creator], [Links_deleted].[Updator], [Links_deleted].[CreatedTime], [Links_deleted].[UpdatedTime] from [Links_deleted] {0}); delete from [Links_deleted] {0}";
        public const string RestoreBinariesStatement = "update [Binaries_deleted] set [Binaries_deleted].[UpdatedTime] = getdate() {0};set identity_insert [Binaries] on;  insert into [Binaries]([Binaries].[ReferenceId], [Binaries].[BinaryId], [Binaries].[Ver], [Binaries].[BinaryType], [Binaries].[Title], [Binaries].[Body], [Binaries].[Bin], [Binaries].[Thumbnail], [Binaries].[Icon], [Binaries].[FileName], [Binaries].[Extension], [Binaries].[Size], [Binaries].[BinarySettings], [Binaries].[Comments], [Binaries].[Creator], [Binaries].[Updator], [Binaries].[CreatedTime], [Binaries].[UpdatedTime]) (select [Binaries_deleted].[ReferenceId], [Binaries_deleted].[BinaryId], [Binaries_deleted].[Ver], [Binaries_deleted].[BinaryType], [Binaries_deleted].[Title], [Binaries_deleted].[Body], [Binaries_deleted].[Bin], [Binaries_deleted].[Thumbnail], [Binaries_deleted].[Icon], [Binaries_deleted].[FileName], [Binaries_deleted].[Extension], [Binaries_deleted].[Size], [Binaries_deleted].[BinarySettings], [Binaries_deleted].[Comments], [Binaries_deleted].[Creator], [Binaries_deleted].[Updator], [Binaries_deleted].[CreatedTime], [Binaries_deleted].[UpdatedTime] from [Binaries_deleted] {0});set identity_insert [Binaries] off;  delete from [Binaries_deleted] {0}";
        public const string RestoreIssuesStatement = "update [Issues_deleted] set [Issues_deleted].[UpdatedTime] = getdate() {0}; insert into [Issues]([Issues].[SiteId], [Issues].[UpdatedTime], [Issues].[IssueId], [Issues].[Ver], [Issues].[Title], [Issues].[Body], [Issues].[StartTime], [Issues].[CompletionTime], [Issues].[WorkValue], [Issues].[ProgressRate], [Issues].[Status], [Issues].[Manager], [Issues].[Owner], [Issues].[ClassA], [Issues].[ClassB], [Issues].[ClassC], [Issues].[ClassD], [Issues].[ClassE], [Issues].[ClassF], [Issues].[ClassG], [Issues].[ClassH], [Issues].[ClassI], [Issues].[ClassJ], [Issues].[ClassK], [Issues].[ClassL], [Issues].[ClassM], [Issues].[ClassN], [Issues].[ClassO], [Issues].[ClassP], [Issues].[NumA], [Issues].[NumB], [Issues].[NumC], [Issues].[NumD], [Issues].[NumE], [Issues].[NumF], [Issues].[NumG], [Issues].[NumH], [Issues].[NumI], [Issues].[NumJ], [Issues].[NumK], [Issues].[NumL], [Issues].[NumM], [Issues].[NumN], [Issues].[NumO], [Issues].[NumP], [Issues].[DateA], [Issues].[DateB], [Issues].[DateC], [Issues].[DateD], [Issues].[DateE], [Issues].[DateF], [Issues].[DateG], [Issues].[DateH], [Issues].[DateI], [Issues].[DateJ], [Issues].[DateK], [Issues].[DateL], [Issues].[DateM], [Issues].[DateN], [Issues].[DateO], [Issues].[DateP], [Issues].[DescriptionA], [Issues].[DescriptionB], [Issues].[DescriptionC], [Issues].[DescriptionD], [Issues].[DescriptionE], [Issues].[DescriptionF], [Issues].[DescriptionG], [Issues].[DescriptionH], [Issues].[DescriptionI], [Issues].[DescriptionJ], [Issues].[DescriptionK], [Issues].[DescriptionL], [Issues].[DescriptionM], [Issues].[DescriptionN], [Issues].[DescriptionO], [Issues].[DescriptionP], [Issues].[CheckA], [Issues].[CheckB], [Issues].[CheckC], [Issues].[CheckD], [Issues].[CheckE], [Issues].[CheckF], [Issues].[CheckG], [Issues].[CheckH], [Issues].[CheckI], [Issues].[CheckJ], [Issues].[CheckK], [Issues].[CheckL], [Issues].[CheckM], [Issues].[CheckN], [Issues].[CheckO], [Issues].[CheckP], [Issues].[Comments], [Issues].[Creator], [Issues].[Updator], [Issues].[CreatedTime]) (select [Issues_deleted].[SiteId], [Issues_deleted].[UpdatedTime], [Issues_deleted].[IssueId], [Issues_deleted].[Ver], [Issues_deleted].[Title], [Issues_deleted].[Body], [Issues_deleted].[StartTime], [Issues_deleted].[CompletionTime], [Issues_deleted].[WorkValue], [Issues_deleted].[ProgressRate], [Issues_deleted].[Status], [Issues_deleted].[Manager], [Issues_deleted].[Owner], [Issues_deleted].[ClassA], [Issues_deleted].[ClassB], [Issues_deleted].[ClassC], [Issues_deleted].[ClassD], [Issues_deleted].[ClassE], [Issues_deleted].[ClassF], [Issues_deleted].[ClassG], [Issues_deleted].[ClassH], [Issues_deleted].[ClassI], [Issues_deleted].[ClassJ], [Issues_deleted].[ClassK], [Issues_deleted].[ClassL], [Issues_deleted].[ClassM], [Issues_deleted].[ClassN], [Issues_deleted].[ClassO], [Issues_deleted].[ClassP], [Issues_deleted].[NumA], [Issues_deleted].[NumB], [Issues_deleted].[NumC], [Issues_deleted].[NumD], [Issues_deleted].[NumE], [Issues_deleted].[NumF], [Issues_deleted].[NumG], [Issues_deleted].[NumH], [Issues_deleted].[NumI], [Issues_deleted].[NumJ], [Issues_deleted].[NumK], [Issues_deleted].[NumL], [Issues_deleted].[NumM], [Issues_deleted].[NumN], [Issues_deleted].[NumO], [Issues_deleted].[NumP], [Issues_deleted].[DateA], [Issues_deleted].[DateB], [Issues_deleted].[DateC], [Issues_deleted].[DateD], [Issues_deleted].[DateE], [Issues_deleted].[DateF], [Issues_deleted].[DateG], [Issues_deleted].[DateH], [Issues_deleted].[DateI], [Issues_deleted].[DateJ], [Issues_deleted].[DateK], [Issues_deleted].[DateL], [Issues_deleted].[DateM], [Issues_deleted].[DateN], [Issues_deleted].[DateO], [Issues_deleted].[DateP], [Issues_deleted].[DescriptionA], [Issues_deleted].[DescriptionB], [Issues_deleted].[DescriptionC], [Issues_deleted].[DescriptionD], [Issues_deleted].[DescriptionE], [Issues_deleted].[DescriptionF], [Issues_deleted].[DescriptionG], [Issues_deleted].[DescriptionH], [Issues_deleted].[DescriptionI], [Issues_deleted].[DescriptionJ], [Issues_deleted].[DescriptionK], [Issues_deleted].[DescriptionL], [Issues_deleted].[DescriptionM], [Issues_deleted].[DescriptionN], [Issues_deleted].[DescriptionO], [Issues_deleted].[DescriptionP], [Issues_deleted].[CheckA], [Issues_deleted].[CheckB], [Issues_deleted].[CheckC], [Issues_deleted].[CheckD], [Issues_deleted].[CheckE], [Issues_deleted].[CheckF], [Issues_deleted].[CheckG], [Issues_deleted].[CheckH], [Issues_deleted].[CheckI], [Issues_deleted].[CheckJ], [Issues_deleted].[CheckK], [Issues_deleted].[CheckL], [Issues_deleted].[CheckM], [Issues_deleted].[CheckN], [Issues_deleted].[CheckO], [Issues_deleted].[CheckP], [Issues_deleted].[Comments], [Issues_deleted].[Creator], [Issues_deleted].[Updator], [Issues_deleted].[CreatedTime] from [Issues_deleted] {0}); delete from [Issues_deleted] {0}";
        public const string RestoreResultsStatement = "update [Results_deleted] set [Results_deleted].[UpdatedTime] = getdate() {0}; insert into [Results]([Results].[SiteId], [Results].[UpdatedTime], [Results].[ResultId], [Results].[Ver], [Results].[Title], [Results].[Body], [Results].[Status], [Results].[Manager], [Results].[Owner], [Results].[ClassA], [Results].[ClassB], [Results].[ClassC], [Results].[ClassD], [Results].[ClassE], [Results].[ClassF], [Results].[ClassG], [Results].[ClassH], [Results].[ClassI], [Results].[ClassJ], [Results].[ClassK], [Results].[ClassL], [Results].[ClassM], [Results].[ClassN], [Results].[ClassO], [Results].[ClassP], [Results].[NumA], [Results].[NumB], [Results].[NumC], [Results].[NumD], [Results].[NumE], [Results].[NumF], [Results].[NumG], [Results].[NumH], [Results].[NumI], [Results].[NumJ], [Results].[NumK], [Results].[NumL], [Results].[NumM], [Results].[NumN], [Results].[NumO], [Results].[NumP], [Results].[DateA], [Results].[DateB], [Results].[DateC], [Results].[DateD], [Results].[DateE], [Results].[DateF], [Results].[DateG], [Results].[DateH], [Results].[DateI], [Results].[DateJ], [Results].[DateK], [Results].[DateL], [Results].[DateM], [Results].[DateN], [Results].[DateO], [Results].[DateP], [Results].[DescriptionA], [Results].[DescriptionB], [Results].[DescriptionC], [Results].[DescriptionD], [Results].[DescriptionE], [Results].[DescriptionF], [Results].[DescriptionG], [Results].[DescriptionH], [Results].[DescriptionI], [Results].[DescriptionJ], [Results].[DescriptionK], [Results].[DescriptionL], [Results].[DescriptionM], [Results].[DescriptionN], [Results].[DescriptionO], [Results].[DescriptionP], [Results].[CheckA], [Results].[CheckB], [Results].[CheckC], [Results].[CheckD], [Results].[CheckE], [Results].[CheckF], [Results].[CheckG], [Results].[CheckH], [Results].[CheckI], [Results].[CheckJ], [Results].[CheckK], [Results].[CheckL], [Results].[CheckM], [Results].[CheckN], [Results].[CheckO], [Results].[CheckP], [Results].[Comments], [Results].[Creator], [Results].[Updator], [Results].[CreatedTime]) (select [Results_deleted].[SiteId], [Results_deleted].[UpdatedTime], [Results_deleted].[ResultId], [Results_deleted].[Ver], [Results_deleted].[Title], [Results_deleted].[Body], [Results_deleted].[Status], [Results_deleted].[Manager], [Results_deleted].[Owner], [Results_deleted].[ClassA], [Results_deleted].[ClassB], [Results_deleted].[ClassC], [Results_deleted].[ClassD], [Results_deleted].[ClassE], [Results_deleted].[ClassF], [Results_deleted].[ClassG], [Results_deleted].[ClassH], [Results_deleted].[ClassI], [Results_deleted].[ClassJ], [Results_deleted].[ClassK], [Results_deleted].[ClassL], [Results_deleted].[ClassM], [Results_deleted].[ClassN], [Results_deleted].[ClassO], [Results_deleted].[ClassP], [Results_deleted].[NumA], [Results_deleted].[NumB], [Results_deleted].[NumC], [Results_deleted].[NumD], [Results_deleted].[NumE], [Results_deleted].[NumF], [Results_deleted].[NumG], [Results_deleted].[NumH], [Results_deleted].[NumI], [Results_deleted].[NumJ], [Results_deleted].[NumK], [Results_deleted].[NumL], [Results_deleted].[NumM], [Results_deleted].[NumN], [Results_deleted].[NumO], [Results_deleted].[NumP], [Results_deleted].[DateA], [Results_deleted].[DateB], [Results_deleted].[DateC], [Results_deleted].[DateD], [Results_deleted].[DateE], [Results_deleted].[DateF], [Results_deleted].[DateG], [Results_deleted].[DateH], [Results_deleted].[DateI], [Results_deleted].[DateJ], [Results_deleted].[DateK], [Results_deleted].[DateL], [Results_deleted].[DateM], [Results_deleted].[DateN], [Results_deleted].[DateO], [Results_deleted].[DateP], [Results_deleted].[DescriptionA], [Results_deleted].[DescriptionB], [Results_deleted].[DescriptionC], [Results_deleted].[DescriptionD], [Results_deleted].[DescriptionE], [Results_deleted].[DescriptionF], [Results_deleted].[DescriptionG], [Results_deleted].[DescriptionH], [Results_deleted].[DescriptionI], [Results_deleted].[DescriptionJ], [Results_deleted].[DescriptionK], [Results_deleted].[DescriptionL], [Results_deleted].[DescriptionM], [Results_deleted].[DescriptionN], [Results_deleted].[DescriptionO], [Results_deleted].[DescriptionP], [Results_deleted].[CheckA], [Results_deleted].[CheckB], [Results_deleted].[CheckC], [Results_deleted].[CheckD], [Results_deleted].[CheckE], [Results_deleted].[CheckF], [Results_deleted].[CheckG], [Results_deleted].[CheckH], [Results_deleted].[CheckI], [Results_deleted].[CheckJ], [Results_deleted].[CheckK], [Results_deleted].[CheckL], [Results_deleted].[CheckM], [Results_deleted].[CheckN], [Results_deleted].[CheckO], [Results_deleted].[CheckP], [Results_deleted].[Comments], [Results_deleted].[Creator], [Results_deleted].[Updator], [Results_deleted].[CreatedTime] from [Results_deleted] {0}); delete from [Results_deleted] {0}";
        public const string RestoreWikisStatement = "update [Wikis_deleted] set [Wikis_deleted].[UpdatedTime] = getdate() {0}; insert into [Wikis]([Wikis].[SiteId], [Wikis].[UpdatedTime], [Wikis].[WikiId], [Wikis].[Ver], [Wikis].[Title], [Wikis].[Body], [Wikis].[Comments], [Wikis].[Creator], [Wikis].[Updator], [Wikis].[CreatedTime]) (select [Wikis_deleted].[SiteId], [Wikis_deleted].[UpdatedTime], [Wikis_deleted].[WikiId], [Wikis_deleted].[Ver], [Wikis_deleted].[Title], [Wikis_deleted].[Body], [Wikis_deleted].[Comments], [Wikis_deleted].[Creator], [Wikis_deleted].[Updator], [Wikis_deleted].[CreatedTime] from [Wikis_deleted] {0}); delete from [Wikis_deleted] {0}";

        public static TenantsColumnCollection TenantsColumn()
        {
            return new TenantsColumnCollection();
        }

        public class TenantsColumnCollection : SqlColumnCollection
        {
            public TenantsColumnCollection Add(params string[] columnBrackets)
            {
                base.Add(false, columnBrackets);
                return this;
            }

            public new TenantsColumnCollection Add(bool duplicates = false, params string[] columnBrackets)
            {
                base.Add(duplicates, columnBrackets);
                return this;
            }
        }

        public static TenantsJoinCollection TenantsJoin()
        {
            return new TenantsJoinCollection();
        }

        public class TenantsJoinCollection : SqlJoinCollection
        {
            public new TenantsJoinCollection Add(params string[] columnBrackets)
            {
                columnBrackets.ForEach(columnBracket => base.Add(new SqlJoin(columnBracket)));
                return this;
            }
        }

        public static TenantsWhereCollection TenantsWhere()
        {
            return new TenantsWhereCollection();
        }

        public class TenantsWhereCollection : SqlWhereCollection
        {
            public new TenantsWhereCollection Add(
                string[] columnBrackets = null,
                string name = "",
                object value = null,
                string _operator = "=",
                string multiColumnOperator = " or ",
                string multiParamOperator = " and ",
                SqlStatement sub = null,
                string raw = "",
                SqlWhereCollection or = null,
                bool _using = true)
            {
                base.Add(new SqlWhere(
                    columnBrackets: columnBrackets,
                    name: name,
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    sub: sub,
                    raw: raw,
                    or: or,
                    _using: _using));
                return this;
            }
        }

        public static TenantsGroupByCollection TenantsGroupBy()
        {
            return new TenantsGroupByCollection();
        }

        public class TenantsGroupByCollection : SqlGroupByCollection
        {
            public new TenantsGroupByCollection Add(
                params string[] columnBrackets)
            {
                columnBrackets.ForEach(columnBracket =>
                    base.Add(new SqlGroupBy(columnBracket)));
                return this;
            }
        }

        public static TenantsHavingCollection TenantsHaving()
        {
            return new TenantsHavingCollection();
        }

        public class TenantsHavingCollection : SqlHavingCollection
        {
            public TenantsHavingCollection Add(
                string columnBracket, string name, object value, string _operator)
            {
                base.Add(new SqlHaving(
                    columnBracket: columnBracket,
                    name: name,
                    value: value,
                    _operator: _operator));
                return this;
            }
        }

        public static TenantsOrderByCollection TenantsOrderBy()
        {
            return new TenantsOrderByCollection();
        }

        public class TenantsOrderByCollection : SqlOrderByCollection
        {
            public new TenantsOrderByCollection Add(
                SqlOrderBy.Types type = SqlOrderBy.Types.asc,
                params string[] columnBrackets)
            {
                columnBrackets.ForEach(columnBracket =>
                    base.Add(new SqlOrderBy(columnBracket, type)));
                return this;
            }
        }

        public static TenantsParamCollection TenantsParam()
        {
            return new TenantsParamCollection();
        }

        public class TenantsParamCollection : SqlParamCollection
        {
            public new TenantsParamCollection Add(
                string columnBracket = "",
                string name = "",
                object value = null,
                SqlStatement sub = null,
                string raw = null,
                bool _using = true)
            {
                base.Add(new SqlParam(columnBracket, name, value, sub, raw, _using));
                return this;
            }
        }

        public static string Tenants_TenantName_WhereLike(string tableName = "t0") { return "([" + tableName + "].[TenantName] like '%' + @SearchText#ParamCount#_#CommandCount# + '%')"; }
        public static string Tenants_Title_WhereLike(string tableName = "t0") { return "([" + tableName + "].[Title] like '%' + @SearchText#ParamCount#_#CommandCount# + '%')"; }
        public static string Tenants_Body_WhereLike(string tableName = "t0") { return "([" + tableName + "].[Body] like '%' + @SearchText#ParamCount#_#CommandCount# + '%')"; }
        public const string SqlWhereExists_Tenants = "exists(select * from [Tenants] where #SqlWhere#)";
        public const string SqlWhereNotExists_Tenants = "not exists(select * from [Tenants] where #SqlWhere#)";
        public static TenantsColumnCollection TenantId(this TenantsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[TenantId]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Tenants_TenantId(this SqlColumnCollection self, string tableName = "Tenants", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[TenantId]" + _as.ExistsTo(" as [{0}]")); }
        public static TenantsColumnCollection Ver(this TenantsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Ver]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Tenants_Ver(this SqlColumnCollection self, string tableName = "Tenants", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Ver]" + _as.ExistsTo(" as [{0}]")); }
        public static TenantsColumnCollection TenantName(this TenantsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[TenantName]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Tenants_TenantName(this SqlColumnCollection self, string tableName = "Tenants", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[TenantName]" + _as.ExistsTo(" as [{0}]")); }
        public static TenantsColumnCollection Title(this TenantsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Title]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Tenants_Title(this SqlColumnCollection self, string tableName = "Tenants", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Title]" + _as.ExistsTo(" as [{0}]")); }
        public static TenantsColumnCollection Body(this TenantsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Body]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Tenants_Body(this SqlColumnCollection self, string tableName = "Tenants", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Body]" + _as.ExistsTo(" as [{0}]")); }
        public static TenantsColumnCollection Comments(this TenantsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Comments]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Tenants_Comments(this SqlColumnCollection self, string tableName = "Tenants", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Comments]" + _as.ExistsTo(" as [{0}]")); }
        public static TenantsColumnCollection Creator(this TenantsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Creator]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Tenants_Creator(this SqlColumnCollection self, string tableName = "Tenants", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Creator]" + _as.ExistsTo(" as [{0}]")); }
        public static TenantsColumnCollection Updator(this TenantsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Updator]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Tenants_Updator(this SqlColumnCollection self, string tableName = "Tenants", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Updator]" + _as.ExistsTo(" as [{0}]")); }
        public static TenantsColumnCollection CreatedTime(this TenantsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[CreatedTime]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Tenants_CreatedTime(this SqlColumnCollection self, string tableName = "Tenants", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[CreatedTime]" + _as.ExistsTo(" as [{0}]")); }
        public static TenantsColumnCollection UpdatedTime(this TenantsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[UpdatedTime]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Tenants_UpdatedTime(this SqlColumnCollection self, string tableName = "Tenants", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[UpdatedTime]" + _as.ExistsTo(" as [{0}]")); }
        public static TenantsColumnCollection TenantsCount(this TenantsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "count(*) as TenantsCount"); }
        public static TenantsColumnCollection CreatedTimeMax(this TenantsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[CreatedTime]) as [CreatedTimeMax]"); }
        public static SqlColumnCollection Tenants_CreatedTimeMax(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[CreatedTime]) as [CreatedTimeMax]"); }
        public static TenantsColumnCollection CreatedTimeMin(this TenantsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[CreatedTime]) as [CreatedTimeMin]"); }
        public static SqlColumnCollection Tenants_CreatedTimeMin(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[CreatedTime]) as [CreatedTimeMin]"); }
        public static TenantsColumnCollection UpdatedTimeMax(this TenantsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[UpdatedTime]) as [UpdatedTimeMax]"); }
        public static SqlColumnCollection Tenants_UpdatedTimeMax(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[UpdatedTime]) as [UpdatedTimeMax]"); }
        public static TenantsColumnCollection UpdatedTimeMin(this TenantsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[UpdatedTime]) as [UpdatedTimeMin]"); }
        public static SqlColumnCollection Tenants_UpdatedTimeMin(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[UpdatedTime]) as [UpdatedTimeMin]"); }
        public static TenantsWhereCollection TenantId(this TenantsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[TenantId]" }, "TenantId", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Tenants_TenantId(this SqlWhereCollection self, object value = null, string tableName = "Tenants", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[TenantId]" }, "TenantId", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static TenantsWhereCollection Ver(this TenantsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Ver]" }, "Ver", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Tenants_Ver(this SqlWhereCollection self, object value = null, string tableName = "Tenants", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Ver]" }, "Ver", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static TenantsWhereCollection TenantName(this TenantsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[TenantName]" }, "TenantName", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Tenants_TenantName(this SqlWhereCollection self, object value = null, string tableName = "Tenants", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[TenantName]" }, "TenantName", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static TenantsWhereCollection Title(this TenantsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Title]" }, "Title", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Tenants_Title(this SqlWhereCollection self, object value = null, string tableName = "Tenants", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Title]" }, "Title", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static TenantsWhereCollection Body(this TenantsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Body]" }, "Body", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Tenants_Body(this SqlWhereCollection self, object value = null, string tableName = "Tenants", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Body]" }, "Body", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static TenantsWhereCollection Comments(this TenantsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Comments]" }, "Comments", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Tenants_Comments(this SqlWhereCollection self, object value = null, string tableName = "Tenants", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Comments]" }, "Comments", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static TenantsWhereCollection Creator(this TenantsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Creator]" }, "Creator", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Tenants_Creator(this SqlWhereCollection self, object value = null, string tableName = "Tenants", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Creator]" }, "Creator", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static TenantsWhereCollection Updator(this TenantsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Updator]" }, "Updator", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Tenants_Updator(this SqlWhereCollection self, object value = null, string tableName = "Tenants", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Updator]" }, "Updator", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static TenantsWhereCollection CreatedTime(this TenantsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[CreatedTime]" }, "CreatedTime", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Tenants_CreatedTime(this SqlWhereCollection self, object value = null, string tableName = "Tenants", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[CreatedTime]" }, "CreatedTime", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static TenantsWhereCollection UpdatedTime(this TenantsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[UpdatedTime]" }, "UpdatedTime", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Tenants_UpdatedTime(this SqlWhereCollection self, object value = null, string tableName = "Tenants", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[UpdatedTime]" }, "UpdatedTime", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static TenantsWhereCollection TenantId_In(this TenantsWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[TenantId]" }, "TenantId", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Tenants_TenantId_In(this SqlWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[TenantId]" }, "TenantId", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static TenantsWhereCollection Ver_In(this TenantsWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Ver]" }, "Ver", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Tenants_Ver_In(this SqlWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Ver]" }, "Ver", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static TenantsWhereCollection Creator_In(this TenantsWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Creator]" }, "Creator", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Tenants_Creator_In(this SqlWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Creator]" }, "Creator", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static TenantsWhereCollection Updator_In(this TenantsWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Updator]" }, "Updator", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Tenants_Updator_In(this SqlWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Updator]" }, "Updator", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static TenantsWhereCollection TenantId_Between(this TenantsWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[TenantId]" }, "TenantId", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Tenants_TenantId_Between(this SqlWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[TenantId]" }, "TenantId", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static TenantsWhereCollection Ver_Between(this TenantsWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Ver]" }, "Ver", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Tenants_Ver_Between(this SqlWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Ver]" }, "Ver", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static TenantsWhereCollection Creator_Between(this TenantsWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Creator]" }, "Creator", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Tenants_Creator_Between(this SqlWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Creator]" }, "Creator", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static TenantsWhereCollection Updator_Between(this TenantsWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Updator]" }, "Updator", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Tenants_Updator_Between(this SqlWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Updator]" }, "Updator", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static TenantsWhereCollection CreatedTime_Between(this TenantsWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[CreatedTime]" }, "CreatedTime", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Tenants_CreatedTime_Between(this SqlWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[CreatedTime]" }, "CreatedTime", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static TenantsWhereCollection UpdatedTime_Between(this TenantsWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[UpdatedTime]" }, "UpdatedTime", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Tenants_UpdatedTime_Between(this SqlWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[UpdatedTime]" }, "UpdatedTime", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static TenantsWhereCollection Sub(this TenantsWhereCollection self, SqlStatement sub, object value = null, string _operator = "=", bool _using = true) { return self.Add(null, null, value, _operator, sub: sub, _using: _using); }
        public static TenantsWhereCollection Or(this TenantsWhereCollection self, SqlWhereCollection or, bool _using = true) { return self.Add(null, null, or: or, _using: _using); }
        public static TenantsGroupByCollection TenantId(this TenantsGroupByCollection self) { return self.Add("[t0].[TenantId]"); }
        public static SqlGroupByCollection Tenants_TenantId(this SqlGroupByCollection self) { return self.Add("[t0].[TenantId]"); }
        public static TenantsGroupByCollection Ver(this TenantsGroupByCollection self) { return self.Add("[t0].[Ver]"); }
        public static SqlGroupByCollection Tenants_Ver(this SqlGroupByCollection self) { return self.Add("[t0].[Ver]"); }
        public static TenantsGroupByCollection TenantName(this TenantsGroupByCollection self) { return self.Add("[t0].[TenantName]"); }
        public static SqlGroupByCollection Tenants_TenantName(this SqlGroupByCollection self) { return self.Add("[t0].[TenantName]"); }
        public static TenantsGroupByCollection Title(this TenantsGroupByCollection self) { return self.Add("[t0].[Title]"); }
        public static SqlGroupByCollection Tenants_Title(this SqlGroupByCollection self) { return self.Add("[t0].[Title]"); }
        public static TenantsGroupByCollection Body(this TenantsGroupByCollection self) { return self.Add("[t0].[Body]"); }
        public static SqlGroupByCollection Tenants_Body(this SqlGroupByCollection self) { return self.Add("[t0].[Body]"); }
        public static TenantsGroupByCollection Comments(this TenantsGroupByCollection self) { return self.Add("[t0].[Comments]"); }
        public static SqlGroupByCollection Tenants_Comments(this SqlGroupByCollection self) { return self.Add("[t0].[Comments]"); }
        public static TenantsGroupByCollection Creator(this TenantsGroupByCollection self) { return self.Add("[t0].[Creator]"); }
        public static SqlGroupByCollection Tenants_Creator(this SqlGroupByCollection self) { return self.Add("[t0].[Creator]"); }
        public static TenantsGroupByCollection Updator(this TenantsGroupByCollection self) { return self.Add("[t0].[Updator]"); }
        public static SqlGroupByCollection Tenants_Updator(this SqlGroupByCollection self) { return self.Add("[t0].[Updator]"); }
        public static TenantsGroupByCollection CreatedTime(this TenantsGroupByCollection self) { return self.Add("[t0].[CreatedTime]"); }
        public static SqlGroupByCollection Tenants_CreatedTime(this SqlGroupByCollection self) { return self.Add("[t0].[CreatedTime]"); }
        public static TenantsGroupByCollection UpdatedTime(this TenantsGroupByCollection self) { return self.Add("[t0].[UpdatedTime]"); }
        public static SqlGroupByCollection Tenants_UpdatedTime(this SqlGroupByCollection self) { return self.Add("[t0].[UpdatedTime]"); }
        public static TenantsHavingCollection TenantsCount(this TenantsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "count(*)", name: "TenantsCount", value: value, _operator: _operator); }
        public static TenantsHavingCollection CreatedTimeMax(this TenantsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[CreatedTime])", name: "CreatedTimeMax", value: value, _operator: _operator); }
        public static SqlHavingCollection Tenants_CreatedTimeMax(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[CreatedTime])", name: "CreatedTimeMax", value: value, _operator: _operator); }
        public static TenantsHavingCollection CreatedTimeMin(this TenantsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[CreatedTime])", name: "CreatedTimeMin", value: value, _operator: _operator); }
        public static SqlHavingCollection Tenants_CreatedTimeMin(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[CreatedTime])", name: "CreatedTimeMin", value: value, _operator: _operator); }
        public static TenantsHavingCollection UpdatedTimeMax(this TenantsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[UpdatedTime])", name: "UpdatedTimeMax", value: value, _operator: _operator); }
        public static SqlHavingCollection Tenants_UpdatedTimeMax(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[UpdatedTime])", name: "UpdatedTimeMax", value: value, _operator: _operator); }
        public static TenantsHavingCollection UpdatedTimeMin(this TenantsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[UpdatedTime])", name: "UpdatedTimeMin", value: value, _operator: _operator); }
        public static SqlHavingCollection Tenants_UpdatedTimeMin(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[UpdatedTime])", name: "UpdatedTimeMin", value: value, _operator: _operator); }
        public static TenantsOrderByCollection TenantId(this TenantsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[TenantId]"); }
        public static TenantsOrderByCollection Ver(this TenantsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Ver]"); }
        public static TenantsOrderByCollection TenantName(this TenantsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[TenantName]"); }
        public static TenantsOrderByCollection Title(this TenantsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Title]"); }
        public static TenantsOrderByCollection Body(this TenantsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Body]"); }
        public static TenantsOrderByCollection Comments(this TenantsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Comments]"); }
        public static TenantsOrderByCollection Creator(this TenantsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Creator]"); }
        public static TenantsOrderByCollection Updator(this TenantsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Updator]"); }
        public static TenantsOrderByCollection CreatedTime(this TenantsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[CreatedTime]"); }
        public static TenantsOrderByCollection UpdatedTime(this TenantsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[UpdatedTime]"); }
        public static SqlOrderByCollection Tenants_TenantId(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[TenantId]"); }
        public static SqlOrderByCollection Tenants_Ver(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Ver]"); }
        public static SqlOrderByCollection Tenants_TenantName(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[TenantName]"); }
        public static SqlOrderByCollection Tenants_Title(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Title]"); }
        public static SqlOrderByCollection Tenants_Body(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Body]"); }
        public static SqlOrderByCollection Tenants_Comments(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Comments]"); }
        public static SqlOrderByCollection Tenants_Creator(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Creator]"); }
        public static SqlOrderByCollection Tenants_Updator(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Updator]"); }
        public static SqlOrderByCollection Tenants_CreatedTime(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[CreatedTime]"); }
        public static SqlOrderByCollection Tenants_UpdatedTime(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[UpdatedTime]"); }
        public static TenantsOrderByCollection TenantsCount(this TenantsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "count(*)"); }
        public static TenantsOrderByCollection CreatedTimeMax(this TenantsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[CreatedTime])"); }
        public static SqlOrderByCollection Tenants_CreatedTimeMax(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[CreatedTime])"); }
        public static TenantsOrderByCollection CreatedTimeMin(this TenantsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[CreatedTime])"); }
        public static SqlOrderByCollection Tenants_CreatedTimeMin(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[CreatedTime])"); }
        public static TenantsOrderByCollection UpdatedTimeMax(this TenantsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[UpdatedTime])"); }
        public static SqlOrderByCollection Tenants_UpdatedTimeMax(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[UpdatedTime])"); }
        public static TenantsOrderByCollection UpdatedTimeMin(this TenantsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[UpdatedTime])"); }
        public static SqlOrderByCollection Tenants_UpdatedTimeMin(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[UpdatedTime])"); }
        public static TenantsParamCollection TenantId(this TenantsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[TenantId]", "TenantId", value, sub, raw, _using); }
        public static SqlParamCollection Tenants_TenantId(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[TenantId]", "TenantId", value, sub, raw, _using); }
        public static TenantsParamCollection Ver(this TenantsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Ver]", "Ver", value, sub, raw, _using); }
        public static SqlParamCollection Tenants_Ver(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Ver]", "Ver", value, sub, raw, _using); }
        public static TenantsParamCollection TenantName(this TenantsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[TenantName]", "TenantName", value, sub, raw, _using); }
        public static SqlParamCollection Tenants_TenantName(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[TenantName]", "TenantName", value, sub, raw, _using); }
        public static TenantsParamCollection Title(this TenantsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Title]", "Title", value, sub, raw, _using); }
        public static SqlParamCollection Tenants_Title(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Title]", "Title", value, sub, raw, _using); }
        public static TenantsParamCollection Body(this TenantsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Body]", "Body", value, sub, raw, _using); }
        public static SqlParamCollection Tenants_Body(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Body]", "Body", value, sub, raw, _using); }
        public static TenantsParamCollection Comments(this TenantsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Comments]", "Comments", value, sub, raw, _using); }
        public static SqlParamCollection Tenants_Comments(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Comments]", "Comments", value, sub, raw, _using); }
        public static TenantsParamCollection Creator(this TenantsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Creator]", "Creator", value, sub, raw, _using); }
        public static SqlParamCollection Tenants_Creator(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Creator]", "Creator", value, sub, raw, _using); }
        public static TenantsParamCollection Updator(this TenantsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Updator]", "Updator", value, sub, raw, _using); }
        public static SqlParamCollection Tenants_Updator(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Updator]", "Updator", value, sub, raw, _using); }
        public static TenantsParamCollection CreatedTime(this TenantsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CreatedTime]", "CreatedTime", value, sub, raw, _using); }
        public static SqlParamCollection Tenants_CreatedTime(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CreatedTime]", "CreatedTime", value, sub, raw, _using); }
        public static TenantsParamCollection UpdatedTime(this TenantsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[UpdatedTime]", "UpdatedTime", value, sub, raw, _using); }
        public static SqlParamCollection Tenants_UpdatedTime(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[UpdatedTime]", "UpdatedTime", value, sub, raw, _using); }

        public static DemosColumnCollection DemosColumn()
        {
            return new DemosColumnCollection();
        }

        public class DemosColumnCollection : SqlColumnCollection
        {
            public DemosColumnCollection Add(params string[] columnBrackets)
            {
                base.Add(false, columnBrackets);
                return this;
            }

            public new DemosColumnCollection Add(bool duplicates = false, params string[] columnBrackets)
            {
                base.Add(duplicates, columnBrackets);
                return this;
            }
        }

        public static DemosJoinCollection DemosJoin()
        {
            return new DemosJoinCollection();
        }

        public class DemosJoinCollection : SqlJoinCollection
        {
            public new DemosJoinCollection Add(params string[] columnBrackets)
            {
                columnBrackets.ForEach(columnBracket => base.Add(new SqlJoin(columnBracket)));
                return this;
            }
        }

        public static DemosWhereCollection DemosWhere()
        {
            return new DemosWhereCollection();
        }

        public class DemosWhereCollection : SqlWhereCollection
        {
            public new DemosWhereCollection Add(
                string[] columnBrackets = null,
                string name = "",
                object value = null,
                string _operator = "=",
                string multiColumnOperator = " or ",
                string multiParamOperator = " and ",
                SqlStatement sub = null,
                string raw = "",
                SqlWhereCollection or = null,
                bool _using = true)
            {
                base.Add(new SqlWhere(
                    columnBrackets: columnBrackets,
                    name: name,
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    sub: sub,
                    raw: raw,
                    or: or,
                    _using: _using));
                return this;
            }
        }

        public static DemosGroupByCollection DemosGroupBy()
        {
            return new DemosGroupByCollection();
        }

        public class DemosGroupByCollection : SqlGroupByCollection
        {
            public new DemosGroupByCollection Add(
                params string[] columnBrackets)
            {
                columnBrackets.ForEach(columnBracket =>
                    base.Add(new SqlGroupBy(columnBracket)));
                return this;
            }
        }

        public static DemosHavingCollection DemosHaving()
        {
            return new DemosHavingCollection();
        }

        public class DemosHavingCollection : SqlHavingCollection
        {
            public DemosHavingCollection Add(
                string columnBracket, string name, object value, string _operator)
            {
                base.Add(new SqlHaving(
                    columnBracket: columnBracket,
                    name: name,
                    value: value,
                    _operator: _operator));
                return this;
            }
        }

        public static DemosOrderByCollection DemosOrderBy()
        {
            return new DemosOrderByCollection();
        }

        public class DemosOrderByCollection : SqlOrderByCollection
        {
            public new DemosOrderByCollection Add(
                SqlOrderBy.Types type = SqlOrderBy.Types.asc,
                params string[] columnBrackets)
            {
                columnBrackets.ForEach(columnBracket =>
                    base.Add(new SqlOrderBy(columnBracket, type)));
                return this;
            }
        }

        public static DemosParamCollection DemosParam()
        {
            return new DemosParamCollection();
        }

        public class DemosParamCollection : SqlParamCollection
        {
            public new DemosParamCollection Add(
                string columnBracket = "",
                string name = "",
                object value = null,
                SqlStatement sub = null,
                string raw = null,
                bool _using = true)
            {
                base.Add(new SqlParam(columnBracket, name, value, sub, raw, _using));
                return this;
            }
        }

        public static string Demos_Title_WhereLike(string tableName = "t0") { return "([" + tableName + "].[Title] like '%' + @SearchText#ParamCount#_#CommandCount# + '%')"; }
        public const string SqlWhereExists_Demos = "exists(select * from [Demos] where #SqlWhere#)";
        public const string SqlWhereNotExists_Demos = "not exists(select * from [Demos] where #SqlWhere#)";
        public static DemosColumnCollection DemoId(this DemosColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[DemoId]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Demos_DemoId(this SqlColumnCollection self, string tableName = "Demos", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[DemoId]" + _as.ExistsTo(" as [{0}]")); }
        public static DemosColumnCollection Ver(this DemosColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Ver]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Demos_Ver(this SqlColumnCollection self, string tableName = "Demos", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Ver]" + _as.ExistsTo(" as [{0}]")); }
        public static DemosColumnCollection TenantId(this DemosColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[TenantId]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Demos_TenantId(this SqlColumnCollection self, string tableName = "Demos", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[TenantId]" + _as.ExistsTo(" as [{0}]")); }
        public static DemosColumnCollection Title(this DemosColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Title]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Demos_Title(this SqlColumnCollection self, string tableName = "Demos", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Title]" + _as.ExistsTo(" as [{0}]")); }
        public static DemosColumnCollection Passphrase(this DemosColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Passphrase]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Demos_Passphrase(this SqlColumnCollection self, string tableName = "Demos", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Passphrase]" + _as.ExistsTo(" as [{0}]")); }
        public static DemosColumnCollection MailAddress(this DemosColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[MailAddress]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Demos_MailAddress(this SqlColumnCollection self, string tableName = "Demos", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[MailAddress]" + _as.ExistsTo(" as [{0}]")); }
        public static DemosColumnCollection Initialized(this DemosColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Initialized]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Demos_Initialized(this SqlColumnCollection self, string tableName = "Demos", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Initialized]" + _as.ExistsTo(" as [{0}]")); }
        public static DemosColumnCollection Comments(this DemosColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Comments]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Demos_Comments(this SqlColumnCollection self, string tableName = "Demos", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Comments]" + _as.ExistsTo(" as [{0}]")); }
        public static DemosColumnCollection Creator(this DemosColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Creator]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Demos_Creator(this SqlColumnCollection self, string tableName = "Demos", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Creator]" + _as.ExistsTo(" as [{0}]")); }
        public static DemosColumnCollection Updator(this DemosColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Updator]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Demos_Updator(this SqlColumnCollection self, string tableName = "Demos", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Updator]" + _as.ExistsTo(" as [{0}]")); }
        public static DemosColumnCollection CreatedTime(this DemosColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[CreatedTime]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Demos_CreatedTime(this SqlColumnCollection self, string tableName = "Demos", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[CreatedTime]" + _as.ExistsTo(" as [{0}]")); }
        public static DemosColumnCollection UpdatedTime(this DemosColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[UpdatedTime]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Demos_UpdatedTime(this SqlColumnCollection self, string tableName = "Demos", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[UpdatedTime]" + _as.ExistsTo(" as [{0}]")); }
        public static DemosColumnCollection DemosCount(this DemosColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "count(*) as DemosCount"); }
        public static DemosColumnCollection CreatedTimeMax(this DemosColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[CreatedTime]) as [CreatedTimeMax]"); }
        public static SqlColumnCollection Demos_CreatedTimeMax(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[CreatedTime]) as [CreatedTimeMax]"); }
        public static DemosColumnCollection CreatedTimeMin(this DemosColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[CreatedTime]) as [CreatedTimeMin]"); }
        public static SqlColumnCollection Demos_CreatedTimeMin(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[CreatedTime]) as [CreatedTimeMin]"); }
        public static DemosColumnCollection UpdatedTimeMax(this DemosColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[UpdatedTime]) as [UpdatedTimeMax]"); }
        public static SqlColumnCollection Demos_UpdatedTimeMax(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[UpdatedTime]) as [UpdatedTimeMax]"); }
        public static DemosColumnCollection UpdatedTimeMin(this DemosColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[UpdatedTime]) as [UpdatedTimeMin]"); }
        public static SqlColumnCollection Demos_UpdatedTimeMin(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[UpdatedTime]) as [UpdatedTimeMin]"); }
        public static DemosWhereCollection DemoId(this DemosWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[DemoId]" }, "DemoId", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Demos_DemoId(this SqlWhereCollection self, object value = null, string tableName = "Demos", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[DemoId]" }, "DemoId", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static DemosWhereCollection Ver(this DemosWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Ver]" }, "Ver", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Demos_Ver(this SqlWhereCollection self, object value = null, string tableName = "Demos", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Ver]" }, "Ver", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static DemosWhereCollection TenantId(this DemosWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[TenantId]" }, "TenantId", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Demos_TenantId(this SqlWhereCollection self, object value = null, string tableName = "Demos", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[TenantId]" }, "TenantId", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static DemosWhereCollection Title(this DemosWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Title]" }, "Title", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Demos_Title(this SqlWhereCollection self, object value = null, string tableName = "Demos", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Title]" }, "Title", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static DemosWhereCollection Passphrase(this DemosWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Passphrase]" }, "Passphrase", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Demos_Passphrase(this SqlWhereCollection self, object value = null, string tableName = "Demos", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Passphrase]" }, "Passphrase", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static DemosWhereCollection MailAddress(this DemosWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[MailAddress]" }, "MailAddress", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Demos_MailAddress(this SqlWhereCollection self, object value = null, string tableName = "Demos", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[MailAddress]" }, "MailAddress", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static DemosWhereCollection Initialized(this DemosWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Initialized]" }, "Initialized", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Demos_Initialized(this SqlWhereCollection self, object value = null, string tableName = "Demos", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Initialized]" }, "Initialized", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static DemosWhereCollection Comments(this DemosWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Comments]" }, "Comments", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Demos_Comments(this SqlWhereCollection self, object value = null, string tableName = "Demos", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Comments]" }, "Comments", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static DemosWhereCollection Creator(this DemosWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Creator]" }, "Creator", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Demos_Creator(this SqlWhereCollection self, object value = null, string tableName = "Demos", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Creator]" }, "Creator", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static DemosWhereCollection Updator(this DemosWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Updator]" }, "Updator", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Demos_Updator(this SqlWhereCollection self, object value = null, string tableName = "Demos", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Updator]" }, "Updator", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static DemosWhereCollection CreatedTime(this DemosWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[CreatedTime]" }, "CreatedTime", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Demos_CreatedTime(this SqlWhereCollection self, object value = null, string tableName = "Demos", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[CreatedTime]" }, "CreatedTime", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static DemosWhereCollection UpdatedTime(this DemosWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[UpdatedTime]" }, "UpdatedTime", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Demos_UpdatedTime(this SqlWhereCollection self, object value = null, string tableName = "Demos", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[UpdatedTime]" }, "UpdatedTime", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static DemosWhereCollection DemoId_In(this DemosWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[DemoId]" }, "DemoId", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Demos_DemoId_In(this SqlWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[DemoId]" }, "DemoId", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static DemosWhereCollection Ver_In(this DemosWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Ver]" }, "Ver", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Demos_Ver_In(this SqlWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Ver]" }, "Ver", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static DemosWhereCollection TenantId_In(this DemosWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[TenantId]" }, "TenantId", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Demos_TenantId_In(this SqlWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[TenantId]" }, "TenantId", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static DemosWhereCollection Creator_In(this DemosWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Creator]" }, "Creator", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Demos_Creator_In(this SqlWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Creator]" }, "Creator", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static DemosWhereCollection Updator_In(this DemosWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Updator]" }, "Updator", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Demos_Updator_In(this SqlWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Updator]" }, "Updator", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static DemosWhereCollection DemoId_Between(this DemosWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[DemoId]" }, "DemoId", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Demos_DemoId_Between(this SqlWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[DemoId]" }, "DemoId", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static DemosWhereCollection Ver_Between(this DemosWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Ver]" }, "Ver", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Demos_Ver_Between(this SqlWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Ver]" }, "Ver", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static DemosWhereCollection TenantId_Between(this DemosWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[TenantId]" }, "TenantId", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Demos_TenantId_Between(this SqlWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[TenantId]" }, "TenantId", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static DemosWhereCollection Creator_Between(this DemosWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Creator]" }, "Creator", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Demos_Creator_Between(this SqlWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Creator]" }, "Creator", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static DemosWhereCollection Updator_Between(this DemosWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Updator]" }, "Updator", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Demos_Updator_Between(this SqlWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Updator]" }, "Updator", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static DemosWhereCollection CreatedTime_Between(this DemosWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[CreatedTime]" }, "CreatedTime", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Demos_CreatedTime_Between(this SqlWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[CreatedTime]" }, "CreatedTime", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static DemosWhereCollection UpdatedTime_Between(this DemosWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[UpdatedTime]" }, "UpdatedTime", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Demos_UpdatedTime_Between(this SqlWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[UpdatedTime]" }, "UpdatedTime", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static DemosWhereCollection Sub(this DemosWhereCollection self, SqlStatement sub, object value = null, string _operator = "=", bool _using = true) { return self.Add(null, null, value, _operator, sub: sub, _using: _using); }
        public static DemosWhereCollection Or(this DemosWhereCollection self, SqlWhereCollection or, bool _using = true) { return self.Add(null, null, or: or, _using: _using); }
        public static DemosGroupByCollection DemoId(this DemosGroupByCollection self) { return self.Add("[t0].[DemoId]"); }
        public static SqlGroupByCollection Demos_DemoId(this SqlGroupByCollection self) { return self.Add("[t0].[DemoId]"); }
        public static DemosGroupByCollection Ver(this DemosGroupByCollection self) { return self.Add("[t0].[Ver]"); }
        public static SqlGroupByCollection Demos_Ver(this SqlGroupByCollection self) { return self.Add("[t0].[Ver]"); }
        public static DemosGroupByCollection TenantId(this DemosGroupByCollection self) { return self.Add("[t0].[TenantId]"); }
        public static SqlGroupByCollection Demos_TenantId(this SqlGroupByCollection self) { return self.Add("[t0].[TenantId]"); }
        public static DemosGroupByCollection Title(this DemosGroupByCollection self) { return self.Add("[t0].[Title]"); }
        public static SqlGroupByCollection Demos_Title(this SqlGroupByCollection self) { return self.Add("[t0].[Title]"); }
        public static DemosGroupByCollection Passphrase(this DemosGroupByCollection self) { return self.Add("[t0].[Passphrase]"); }
        public static SqlGroupByCollection Demos_Passphrase(this SqlGroupByCollection self) { return self.Add("[t0].[Passphrase]"); }
        public static DemosGroupByCollection MailAddress(this DemosGroupByCollection self) { return self.Add("[t0].[MailAddress]"); }
        public static SqlGroupByCollection Demos_MailAddress(this SqlGroupByCollection self) { return self.Add("[t0].[MailAddress]"); }
        public static DemosGroupByCollection Initialized(this DemosGroupByCollection self) { return self.Add("[t0].[Initialized]"); }
        public static SqlGroupByCollection Demos_Initialized(this SqlGroupByCollection self) { return self.Add("[t0].[Initialized]"); }
        public static DemosGroupByCollection Comments(this DemosGroupByCollection self) { return self.Add("[t0].[Comments]"); }
        public static SqlGroupByCollection Demos_Comments(this SqlGroupByCollection self) { return self.Add("[t0].[Comments]"); }
        public static DemosGroupByCollection Creator(this DemosGroupByCollection self) { return self.Add("[t0].[Creator]"); }
        public static SqlGroupByCollection Demos_Creator(this SqlGroupByCollection self) { return self.Add("[t0].[Creator]"); }
        public static DemosGroupByCollection Updator(this DemosGroupByCollection self) { return self.Add("[t0].[Updator]"); }
        public static SqlGroupByCollection Demos_Updator(this SqlGroupByCollection self) { return self.Add("[t0].[Updator]"); }
        public static DemosGroupByCollection CreatedTime(this DemosGroupByCollection self) { return self.Add("[t0].[CreatedTime]"); }
        public static SqlGroupByCollection Demos_CreatedTime(this SqlGroupByCollection self) { return self.Add("[t0].[CreatedTime]"); }
        public static DemosGroupByCollection UpdatedTime(this DemosGroupByCollection self) { return self.Add("[t0].[UpdatedTime]"); }
        public static SqlGroupByCollection Demos_UpdatedTime(this SqlGroupByCollection self) { return self.Add("[t0].[UpdatedTime]"); }
        public static DemosHavingCollection DemosCount(this DemosHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "count(*)", name: "DemosCount", value: value, _operator: _operator); }
        public static DemosHavingCollection CreatedTimeMax(this DemosHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[CreatedTime])", name: "CreatedTimeMax", value: value, _operator: _operator); }
        public static SqlHavingCollection Demos_CreatedTimeMax(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[CreatedTime])", name: "CreatedTimeMax", value: value, _operator: _operator); }
        public static DemosHavingCollection CreatedTimeMin(this DemosHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[CreatedTime])", name: "CreatedTimeMin", value: value, _operator: _operator); }
        public static SqlHavingCollection Demos_CreatedTimeMin(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[CreatedTime])", name: "CreatedTimeMin", value: value, _operator: _operator); }
        public static DemosHavingCollection UpdatedTimeMax(this DemosHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[UpdatedTime])", name: "UpdatedTimeMax", value: value, _operator: _operator); }
        public static SqlHavingCollection Demos_UpdatedTimeMax(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[UpdatedTime])", name: "UpdatedTimeMax", value: value, _operator: _operator); }
        public static DemosHavingCollection UpdatedTimeMin(this DemosHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[UpdatedTime])", name: "UpdatedTimeMin", value: value, _operator: _operator); }
        public static SqlHavingCollection Demos_UpdatedTimeMin(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[UpdatedTime])", name: "UpdatedTimeMin", value: value, _operator: _operator); }
        public static DemosOrderByCollection DemoId(this DemosOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[DemoId]"); }
        public static DemosOrderByCollection Ver(this DemosOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Ver]"); }
        public static DemosOrderByCollection TenantId(this DemosOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[TenantId]"); }
        public static DemosOrderByCollection Title(this DemosOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Title]"); }
        public static DemosOrderByCollection Passphrase(this DemosOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Passphrase]"); }
        public static DemosOrderByCollection MailAddress(this DemosOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[MailAddress]"); }
        public static DemosOrderByCollection Initialized(this DemosOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Initialized]"); }
        public static DemosOrderByCollection Comments(this DemosOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Comments]"); }
        public static DemosOrderByCollection Creator(this DemosOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Creator]"); }
        public static DemosOrderByCollection Updator(this DemosOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Updator]"); }
        public static DemosOrderByCollection CreatedTime(this DemosOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[CreatedTime]"); }
        public static DemosOrderByCollection UpdatedTime(this DemosOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[UpdatedTime]"); }
        public static SqlOrderByCollection Demos_DemoId(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[DemoId]"); }
        public static SqlOrderByCollection Demos_Ver(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Ver]"); }
        public static SqlOrderByCollection Demos_TenantId(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[TenantId]"); }
        public static SqlOrderByCollection Demos_Title(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Title]"); }
        public static SqlOrderByCollection Demos_Passphrase(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Passphrase]"); }
        public static SqlOrderByCollection Demos_MailAddress(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[MailAddress]"); }
        public static SqlOrderByCollection Demos_Initialized(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Initialized]"); }
        public static SqlOrderByCollection Demos_Comments(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Comments]"); }
        public static SqlOrderByCollection Demos_Creator(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Creator]"); }
        public static SqlOrderByCollection Demos_Updator(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Updator]"); }
        public static SqlOrderByCollection Demos_CreatedTime(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[CreatedTime]"); }
        public static SqlOrderByCollection Demos_UpdatedTime(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[UpdatedTime]"); }
        public static DemosOrderByCollection DemosCount(this DemosOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "count(*)"); }
        public static DemosOrderByCollection CreatedTimeMax(this DemosOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[CreatedTime])"); }
        public static SqlOrderByCollection Demos_CreatedTimeMax(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[CreatedTime])"); }
        public static DemosOrderByCollection CreatedTimeMin(this DemosOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[CreatedTime])"); }
        public static SqlOrderByCollection Demos_CreatedTimeMin(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[CreatedTime])"); }
        public static DemosOrderByCollection UpdatedTimeMax(this DemosOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[UpdatedTime])"); }
        public static SqlOrderByCollection Demos_UpdatedTimeMax(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[UpdatedTime])"); }
        public static DemosOrderByCollection UpdatedTimeMin(this DemosOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[UpdatedTime])"); }
        public static SqlOrderByCollection Demos_UpdatedTimeMin(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[UpdatedTime])"); }
        public static DemosParamCollection DemoId(this DemosParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DemoId]", "DemoId", value, sub, raw, _using); }
        public static SqlParamCollection Demos_DemoId(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DemoId]", "DemoId", value, sub, raw, _using); }
        public static DemosParamCollection Ver(this DemosParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Ver]", "Ver", value, sub, raw, _using); }
        public static SqlParamCollection Demos_Ver(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Ver]", "Ver", value, sub, raw, _using); }
        public static DemosParamCollection TenantId(this DemosParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[TenantId]", "TenantId", value, sub, raw, _using); }
        public static SqlParamCollection Demos_TenantId(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[TenantId]", "TenantId", value, sub, raw, _using); }
        public static DemosParamCollection Title(this DemosParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Title]", "Title", value, sub, raw, _using); }
        public static SqlParamCollection Demos_Title(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Title]", "Title", value, sub, raw, _using); }
        public static DemosParamCollection Passphrase(this DemosParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Passphrase]", "Passphrase", value, sub, raw, _using); }
        public static SqlParamCollection Demos_Passphrase(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Passphrase]", "Passphrase", value, sub, raw, _using); }
        public static DemosParamCollection MailAddress(this DemosParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[MailAddress]", "MailAddress", value, sub, raw, _using); }
        public static SqlParamCollection Demos_MailAddress(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[MailAddress]", "MailAddress", value, sub, raw, _using); }
        public static DemosParamCollection Initialized(this DemosParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Initialized]", "Initialized", value, sub, raw, _using); }
        public static SqlParamCollection Demos_Initialized(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Initialized]", "Initialized", value, sub, raw, _using); }
        public static DemosParamCollection Comments(this DemosParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Comments]", "Comments", value, sub, raw, _using); }
        public static SqlParamCollection Demos_Comments(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Comments]", "Comments", value, sub, raw, _using); }
        public static DemosParamCollection Creator(this DemosParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Creator]", "Creator", value, sub, raw, _using); }
        public static SqlParamCollection Demos_Creator(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Creator]", "Creator", value, sub, raw, _using); }
        public static DemosParamCollection Updator(this DemosParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Updator]", "Updator", value, sub, raw, _using); }
        public static SqlParamCollection Demos_Updator(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Updator]", "Updator", value, sub, raw, _using); }
        public static DemosParamCollection CreatedTime(this DemosParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CreatedTime]", "CreatedTime", value, sub, raw, _using); }
        public static SqlParamCollection Demos_CreatedTime(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CreatedTime]", "CreatedTime", value, sub, raw, _using); }
        public static DemosParamCollection UpdatedTime(this DemosParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[UpdatedTime]", "UpdatedTime", value, sub, raw, _using); }
        public static SqlParamCollection Demos_UpdatedTime(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[UpdatedTime]", "UpdatedTime", value, sub, raw, _using); }

        public static SysLogsColumnCollection SysLogsColumn()
        {
            return new SysLogsColumnCollection();
        }

        public class SysLogsColumnCollection : SqlColumnCollection
        {
            public SysLogsColumnCollection Add(params string[] columnBrackets)
            {
                base.Add(false, columnBrackets);
                return this;
            }

            public new SysLogsColumnCollection Add(bool duplicates = false, params string[] columnBrackets)
            {
                base.Add(duplicates, columnBrackets);
                return this;
            }
        }

        public static SysLogsJoinCollection SysLogsJoin()
        {
            return new SysLogsJoinCollection();
        }

        public class SysLogsJoinCollection : SqlJoinCollection
        {
            public new SysLogsJoinCollection Add(params string[] columnBrackets)
            {
                columnBrackets.ForEach(columnBracket => base.Add(new SqlJoin(columnBracket)));
                return this;
            }
        }

        public static SysLogsWhereCollection SysLogsWhere()
        {
            return new SysLogsWhereCollection();
        }

        public class SysLogsWhereCollection : SqlWhereCollection
        {
            public new SysLogsWhereCollection Add(
                string[] columnBrackets = null,
                string name = "",
                object value = null,
                string _operator = "=",
                string multiColumnOperator = " or ",
                string multiParamOperator = " and ",
                SqlStatement sub = null,
                string raw = "",
                SqlWhereCollection or = null,
                bool _using = true)
            {
                base.Add(new SqlWhere(
                    columnBrackets: columnBrackets,
                    name: name,
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    sub: sub,
                    raw: raw,
                    or: or,
                    _using: _using));
                return this;
            }
        }

        public static SysLogsGroupByCollection SysLogsGroupBy()
        {
            return new SysLogsGroupByCollection();
        }

        public class SysLogsGroupByCollection : SqlGroupByCollection
        {
            public new SysLogsGroupByCollection Add(
                params string[] columnBrackets)
            {
                columnBrackets.ForEach(columnBracket =>
                    base.Add(new SqlGroupBy(columnBracket)));
                return this;
            }
        }

        public static SysLogsHavingCollection SysLogsHaving()
        {
            return new SysLogsHavingCollection();
        }

        public class SysLogsHavingCollection : SqlHavingCollection
        {
            public SysLogsHavingCollection Add(
                string columnBracket, string name, object value, string _operator)
            {
                base.Add(new SqlHaving(
                    columnBracket: columnBracket,
                    name: name,
                    value: value,
                    _operator: _operator));
                return this;
            }
        }

        public static SysLogsOrderByCollection SysLogsOrderBy()
        {
            return new SysLogsOrderByCollection();
        }

        public class SysLogsOrderByCollection : SqlOrderByCollection
        {
            public new SysLogsOrderByCollection Add(
                SqlOrderBy.Types type = SqlOrderBy.Types.asc,
                params string[] columnBrackets)
            {
                columnBrackets.ForEach(columnBracket =>
                    base.Add(new SqlOrderBy(columnBracket, type)));
                return this;
            }
        }

        public static SysLogsParamCollection SysLogsParam()
        {
            return new SysLogsParamCollection();
        }

        public class SysLogsParamCollection : SqlParamCollection
        {
            public new SysLogsParamCollection Add(
                string columnBracket = "",
                string name = "",
                object value = null,
                SqlStatement sub = null,
                string raw = null,
                bool _using = true)
            {
                base.Add(new SqlParam(columnBracket, name, value, sub, raw, _using));
                return this;
            }
        }

        public const string SqlWhereExists_SysLogs = "exists(select * from [SysLogs] where #SqlWhere#)";
        public const string SqlWhereNotExists_SysLogs = "not exists(select * from [SysLogs] where #SqlWhere#)";
        public static SysLogsColumnCollection CreatedTime(this SysLogsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[CreatedTime]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection SysLogs_CreatedTime(this SqlColumnCollection self, string tableName = "SysLogs", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[CreatedTime]" + _as.ExistsTo(" as [{0}]")); }
        public static SysLogsColumnCollection SysLogId(this SysLogsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[SysLogId]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection SysLogs_SysLogId(this SqlColumnCollection self, string tableName = "SysLogs", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[SysLogId]" + _as.ExistsTo(" as [{0}]")); }
        public static SysLogsColumnCollection Ver(this SysLogsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Ver]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection SysLogs_Ver(this SqlColumnCollection self, string tableName = "SysLogs", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Ver]" + _as.ExistsTo(" as [{0}]")); }
        public static SysLogsColumnCollection SysLogType(this SysLogsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[SysLogType]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection SysLogs_SysLogType(this SqlColumnCollection self, string tableName = "SysLogs", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[SysLogType]" + _as.ExistsTo(" as [{0}]")); }
        public static SysLogsColumnCollection OnAzure(this SysLogsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[OnAzure]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection SysLogs_OnAzure(this SqlColumnCollection self, string tableName = "SysLogs", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[OnAzure]" + _as.ExistsTo(" as [{0}]")); }
        public static SysLogsColumnCollection MachineName(this SysLogsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[MachineName]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection SysLogs_MachineName(this SqlColumnCollection self, string tableName = "SysLogs", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[MachineName]" + _as.ExistsTo(" as [{0}]")); }
        public static SysLogsColumnCollection ServiceName(this SysLogsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[ServiceName]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection SysLogs_ServiceName(this SqlColumnCollection self, string tableName = "SysLogs", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[ServiceName]" + _as.ExistsTo(" as [{0}]")); }
        public static SysLogsColumnCollection TenantName(this SysLogsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[TenantName]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection SysLogs_TenantName(this SqlColumnCollection self, string tableName = "SysLogs", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[TenantName]" + _as.ExistsTo(" as [{0}]")); }
        public static SysLogsColumnCollection Application(this SysLogsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Application]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection SysLogs_Application(this SqlColumnCollection self, string tableName = "SysLogs", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Application]" + _as.ExistsTo(" as [{0}]")); }
        public static SysLogsColumnCollection Class(this SysLogsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Class]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection SysLogs_Class(this SqlColumnCollection self, string tableName = "SysLogs", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Class]" + _as.ExistsTo(" as [{0}]")); }
        public static SysLogsColumnCollection Method(this SysLogsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Method]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection SysLogs_Method(this SqlColumnCollection self, string tableName = "SysLogs", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Method]" + _as.ExistsTo(" as [{0}]")); }
        public static SysLogsColumnCollection RequestData(this SysLogsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[RequestData]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection SysLogs_RequestData(this SqlColumnCollection self, string tableName = "SysLogs", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[RequestData]" + _as.ExistsTo(" as [{0}]")); }
        public static SysLogsColumnCollection HttpMethod(this SysLogsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[HttpMethod]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection SysLogs_HttpMethod(this SqlColumnCollection self, string tableName = "SysLogs", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[HttpMethod]" + _as.ExistsTo(" as [{0}]")); }
        public static SysLogsColumnCollection RequestSize(this SysLogsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[RequestSize]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection SysLogs_RequestSize(this SqlColumnCollection self, string tableName = "SysLogs", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[RequestSize]" + _as.ExistsTo(" as [{0}]")); }
        public static SysLogsColumnCollection ResponseSize(this SysLogsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[ResponseSize]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection SysLogs_ResponseSize(this SqlColumnCollection self, string tableName = "SysLogs", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[ResponseSize]" + _as.ExistsTo(" as [{0}]")); }
        public static SysLogsColumnCollection Elapsed(this SysLogsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Elapsed]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection SysLogs_Elapsed(this SqlColumnCollection self, string tableName = "SysLogs", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Elapsed]" + _as.ExistsTo(" as [{0}]")); }
        public static SysLogsColumnCollection ApplicationAge(this SysLogsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[ApplicationAge]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection SysLogs_ApplicationAge(this SqlColumnCollection self, string tableName = "SysLogs", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[ApplicationAge]" + _as.ExistsTo(" as [{0}]")); }
        public static SysLogsColumnCollection ApplicationRequestInterval(this SysLogsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[ApplicationRequestInterval]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection SysLogs_ApplicationRequestInterval(this SqlColumnCollection self, string tableName = "SysLogs", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[ApplicationRequestInterval]" + _as.ExistsTo(" as [{0}]")); }
        public static SysLogsColumnCollection SessionAge(this SysLogsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[SessionAge]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection SysLogs_SessionAge(this SqlColumnCollection self, string tableName = "SysLogs", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[SessionAge]" + _as.ExistsTo(" as [{0}]")); }
        public static SysLogsColumnCollection SessionRequestInterval(this SysLogsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[SessionRequestInterval]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection SysLogs_SessionRequestInterval(this SqlColumnCollection self, string tableName = "SysLogs", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[SessionRequestInterval]" + _as.ExistsTo(" as [{0}]")); }
        public static SysLogsColumnCollection WorkingSet64(this SysLogsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[WorkingSet64]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection SysLogs_WorkingSet64(this SqlColumnCollection self, string tableName = "SysLogs", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[WorkingSet64]" + _as.ExistsTo(" as [{0}]")); }
        public static SysLogsColumnCollection VirtualMemorySize64(this SysLogsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[VirtualMemorySize64]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection SysLogs_VirtualMemorySize64(this SqlColumnCollection self, string tableName = "SysLogs", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[VirtualMemorySize64]" + _as.ExistsTo(" as [{0}]")); }
        public static SysLogsColumnCollection ProcessId(this SysLogsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[ProcessId]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection SysLogs_ProcessId(this SqlColumnCollection self, string tableName = "SysLogs", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[ProcessId]" + _as.ExistsTo(" as [{0}]")); }
        public static SysLogsColumnCollection ProcessName(this SysLogsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[ProcessName]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection SysLogs_ProcessName(this SqlColumnCollection self, string tableName = "SysLogs", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[ProcessName]" + _as.ExistsTo(" as [{0}]")); }
        public static SysLogsColumnCollection BasePriority(this SysLogsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[BasePriority]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection SysLogs_BasePriority(this SqlColumnCollection self, string tableName = "SysLogs", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[BasePriority]" + _as.ExistsTo(" as [{0}]")); }
        public static SysLogsColumnCollection Url(this SysLogsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Url]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection SysLogs_Url(this SqlColumnCollection self, string tableName = "SysLogs", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Url]" + _as.ExistsTo(" as [{0}]")); }
        public static SysLogsColumnCollection UrlReferer(this SysLogsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[UrlReferer]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection SysLogs_UrlReferer(this SqlColumnCollection self, string tableName = "SysLogs", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[UrlReferer]" + _as.ExistsTo(" as [{0}]")); }
        public static SysLogsColumnCollection UserHostName(this SysLogsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[UserHostName]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection SysLogs_UserHostName(this SqlColumnCollection self, string tableName = "SysLogs", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[UserHostName]" + _as.ExistsTo(" as [{0}]")); }
        public static SysLogsColumnCollection UserHostAddress(this SysLogsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[UserHostAddress]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection SysLogs_UserHostAddress(this SqlColumnCollection self, string tableName = "SysLogs", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[UserHostAddress]" + _as.ExistsTo(" as [{0}]")); }
        public static SysLogsColumnCollection UserLanguage(this SysLogsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[UserLanguage]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection SysLogs_UserLanguage(this SqlColumnCollection self, string tableName = "SysLogs", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[UserLanguage]" + _as.ExistsTo(" as [{0}]")); }
        public static SysLogsColumnCollection UserAgent(this SysLogsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[UserAgent]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection SysLogs_UserAgent(this SqlColumnCollection self, string tableName = "SysLogs", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[UserAgent]" + _as.ExistsTo(" as [{0}]")); }
        public static SysLogsColumnCollection SessionGuid(this SysLogsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[SessionGuid]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection SysLogs_SessionGuid(this SqlColumnCollection self, string tableName = "SysLogs", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[SessionGuid]" + _as.ExistsTo(" as [{0}]")); }
        public static SysLogsColumnCollection ErrMessage(this SysLogsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[ErrMessage]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection SysLogs_ErrMessage(this SqlColumnCollection self, string tableName = "SysLogs", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[ErrMessage]" + _as.ExistsTo(" as [{0}]")); }
        public static SysLogsColumnCollection ErrStackTrace(this SysLogsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[ErrStackTrace]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection SysLogs_ErrStackTrace(this SqlColumnCollection self, string tableName = "SysLogs", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[ErrStackTrace]" + _as.ExistsTo(" as [{0}]")); }
        public static SysLogsColumnCollection InDebug(this SysLogsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[InDebug]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection SysLogs_InDebug(this SqlColumnCollection self, string tableName = "SysLogs", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[InDebug]" + _as.ExistsTo(" as [{0}]")); }
        public static SysLogsColumnCollection AssemblyVersion(this SysLogsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[AssemblyVersion]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection SysLogs_AssemblyVersion(this SqlColumnCollection self, string tableName = "SysLogs", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[AssemblyVersion]" + _as.ExistsTo(" as [{0}]")); }
        public static SysLogsColumnCollection Comments(this SysLogsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Comments]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection SysLogs_Comments(this SqlColumnCollection self, string tableName = "SysLogs", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Comments]" + _as.ExistsTo(" as [{0}]")); }
        public static SysLogsColumnCollection Creator(this SysLogsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Creator]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection SysLogs_Creator(this SqlColumnCollection self, string tableName = "SysLogs", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Creator]" + _as.ExistsTo(" as [{0}]")); }
        public static SysLogsColumnCollection Updator(this SysLogsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Updator]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection SysLogs_Updator(this SqlColumnCollection self, string tableName = "SysLogs", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Updator]" + _as.ExistsTo(" as [{0}]")); }
        public static SysLogsColumnCollection UpdatedTime(this SysLogsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[UpdatedTime]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection SysLogs_UpdatedTime(this SqlColumnCollection self, string tableName = "SysLogs", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[UpdatedTime]" + _as.ExistsTo(" as [{0}]")); }
        public static SysLogsColumnCollection SysLogsCount(this SysLogsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "count(*) as SysLogsCount"); }
        public static SysLogsColumnCollection UpdatedTimeMax(this SysLogsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[UpdatedTime]) as [UpdatedTimeMax]"); }
        public static SqlColumnCollection SysLogs_UpdatedTimeMax(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[UpdatedTime]) as [UpdatedTimeMax]"); }
        public static SysLogsColumnCollection UpdatedTimeMin(this SysLogsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[UpdatedTime]) as [UpdatedTimeMin]"); }
        public static SqlColumnCollection SysLogs_UpdatedTimeMin(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[UpdatedTime]) as [UpdatedTimeMin]"); }
        public static SysLogsWhereCollection CreatedTime(this SysLogsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[CreatedTime]" }, "CreatedTime", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection SysLogs_CreatedTime(this SqlWhereCollection self, object value = null, string tableName = "SysLogs", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[CreatedTime]" }, "CreatedTime", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SysLogsWhereCollection SysLogId(this SysLogsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[SysLogId]" }, "SysLogId", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection SysLogs_SysLogId(this SqlWhereCollection self, object value = null, string tableName = "SysLogs", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[SysLogId]" }, "SysLogId", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SysLogsWhereCollection Ver(this SysLogsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Ver]" }, "Ver", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection SysLogs_Ver(this SqlWhereCollection self, object value = null, string tableName = "SysLogs", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Ver]" }, "Ver", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SysLogsWhereCollection SysLogType(this SysLogsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[SysLogType]" }, "SysLogType", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection SysLogs_SysLogType(this SqlWhereCollection self, object value = null, string tableName = "SysLogs", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[SysLogType]" }, "SysLogType", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SysLogsWhereCollection OnAzure(this SysLogsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[OnAzure]" }, "OnAzure", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection SysLogs_OnAzure(this SqlWhereCollection self, object value = null, string tableName = "SysLogs", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[OnAzure]" }, "OnAzure", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SysLogsWhereCollection MachineName(this SysLogsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[MachineName]" }, "MachineName", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection SysLogs_MachineName(this SqlWhereCollection self, object value = null, string tableName = "SysLogs", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[MachineName]" }, "MachineName", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SysLogsWhereCollection ServiceName(this SysLogsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[ServiceName]" }, "ServiceName", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection SysLogs_ServiceName(this SqlWhereCollection self, object value = null, string tableName = "SysLogs", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[ServiceName]" }, "ServiceName", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SysLogsWhereCollection TenantName(this SysLogsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[TenantName]" }, "TenantName", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection SysLogs_TenantName(this SqlWhereCollection self, object value = null, string tableName = "SysLogs", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[TenantName]" }, "TenantName", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SysLogsWhereCollection Application(this SysLogsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Application]" }, "Application", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection SysLogs_Application(this SqlWhereCollection self, object value = null, string tableName = "SysLogs", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Application]" }, "Application", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SysLogsWhereCollection Class(this SysLogsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Class]" }, "Class", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection SysLogs_Class(this SqlWhereCollection self, object value = null, string tableName = "SysLogs", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Class]" }, "Class", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SysLogsWhereCollection Method(this SysLogsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Method]" }, "Method", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection SysLogs_Method(this SqlWhereCollection self, object value = null, string tableName = "SysLogs", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Method]" }, "Method", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SysLogsWhereCollection RequestData(this SysLogsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[RequestData]" }, "RequestData", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection SysLogs_RequestData(this SqlWhereCollection self, object value = null, string tableName = "SysLogs", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[RequestData]" }, "RequestData", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SysLogsWhereCollection HttpMethod(this SysLogsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[HttpMethod]" }, "HttpMethod", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection SysLogs_HttpMethod(this SqlWhereCollection self, object value = null, string tableName = "SysLogs", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[HttpMethod]" }, "HttpMethod", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SysLogsWhereCollection RequestSize(this SysLogsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[RequestSize]" }, "RequestSize", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection SysLogs_RequestSize(this SqlWhereCollection self, object value = null, string tableName = "SysLogs", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[RequestSize]" }, "RequestSize", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SysLogsWhereCollection ResponseSize(this SysLogsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[ResponseSize]" }, "ResponseSize", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection SysLogs_ResponseSize(this SqlWhereCollection self, object value = null, string tableName = "SysLogs", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[ResponseSize]" }, "ResponseSize", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SysLogsWhereCollection Elapsed(this SysLogsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Elapsed]" }, "Elapsed", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection SysLogs_Elapsed(this SqlWhereCollection self, object value = null, string tableName = "SysLogs", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Elapsed]" }, "Elapsed", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SysLogsWhereCollection ApplicationAge(this SysLogsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[ApplicationAge]" }, "ApplicationAge", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection SysLogs_ApplicationAge(this SqlWhereCollection self, object value = null, string tableName = "SysLogs", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[ApplicationAge]" }, "ApplicationAge", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SysLogsWhereCollection ApplicationRequestInterval(this SysLogsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[ApplicationRequestInterval]" }, "ApplicationRequestInterval", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection SysLogs_ApplicationRequestInterval(this SqlWhereCollection self, object value = null, string tableName = "SysLogs", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[ApplicationRequestInterval]" }, "ApplicationRequestInterval", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SysLogsWhereCollection SessionAge(this SysLogsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[SessionAge]" }, "SessionAge", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection SysLogs_SessionAge(this SqlWhereCollection self, object value = null, string tableName = "SysLogs", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[SessionAge]" }, "SessionAge", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SysLogsWhereCollection SessionRequestInterval(this SysLogsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[SessionRequestInterval]" }, "SessionRequestInterval", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection SysLogs_SessionRequestInterval(this SqlWhereCollection self, object value = null, string tableName = "SysLogs", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[SessionRequestInterval]" }, "SessionRequestInterval", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SysLogsWhereCollection WorkingSet64(this SysLogsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[WorkingSet64]" }, "WorkingSet64", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection SysLogs_WorkingSet64(this SqlWhereCollection self, object value = null, string tableName = "SysLogs", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[WorkingSet64]" }, "WorkingSet64", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SysLogsWhereCollection VirtualMemorySize64(this SysLogsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[VirtualMemorySize64]" }, "VirtualMemorySize64", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection SysLogs_VirtualMemorySize64(this SqlWhereCollection self, object value = null, string tableName = "SysLogs", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[VirtualMemorySize64]" }, "VirtualMemorySize64", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SysLogsWhereCollection ProcessId(this SysLogsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[ProcessId]" }, "ProcessId", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection SysLogs_ProcessId(this SqlWhereCollection self, object value = null, string tableName = "SysLogs", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[ProcessId]" }, "ProcessId", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SysLogsWhereCollection ProcessName(this SysLogsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[ProcessName]" }, "ProcessName", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection SysLogs_ProcessName(this SqlWhereCollection self, object value = null, string tableName = "SysLogs", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[ProcessName]" }, "ProcessName", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SysLogsWhereCollection BasePriority(this SysLogsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[BasePriority]" }, "BasePriority", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection SysLogs_BasePriority(this SqlWhereCollection self, object value = null, string tableName = "SysLogs", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[BasePriority]" }, "BasePriority", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SysLogsWhereCollection Url(this SysLogsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Url]" }, "Url", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection SysLogs_Url(this SqlWhereCollection self, object value = null, string tableName = "SysLogs", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Url]" }, "Url", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SysLogsWhereCollection UrlReferer(this SysLogsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[UrlReferer]" }, "UrlReferer", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection SysLogs_UrlReferer(this SqlWhereCollection self, object value = null, string tableName = "SysLogs", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[UrlReferer]" }, "UrlReferer", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SysLogsWhereCollection UserHostName(this SysLogsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[UserHostName]" }, "UserHostName", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection SysLogs_UserHostName(this SqlWhereCollection self, object value = null, string tableName = "SysLogs", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[UserHostName]" }, "UserHostName", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SysLogsWhereCollection UserHostAddress(this SysLogsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[UserHostAddress]" }, "UserHostAddress", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection SysLogs_UserHostAddress(this SqlWhereCollection self, object value = null, string tableName = "SysLogs", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[UserHostAddress]" }, "UserHostAddress", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SysLogsWhereCollection UserLanguage(this SysLogsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[UserLanguage]" }, "UserLanguage", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection SysLogs_UserLanguage(this SqlWhereCollection self, object value = null, string tableName = "SysLogs", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[UserLanguage]" }, "UserLanguage", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SysLogsWhereCollection UserAgent(this SysLogsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[UserAgent]" }, "UserAgent", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection SysLogs_UserAgent(this SqlWhereCollection self, object value = null, string tableName = "SysLogs", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[UserAgent]" }, "UserAgent", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SysLogsWhereCollection SessionGuid(this SysLogsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[SessionGuid]" }, "SessionGuid", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection SysLogs_SessionGuid(this SqlWhereCollection self, object value = null, string tableName = "SysLogs", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[SessionGuid]" }, "SessionGuid", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SysLogsWhereCollection ErrMessage(this SysLogsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[ErrMessage]" }, "ErrMessage", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection SysLogs_ErrMessage(this SqlWhereCollection self, object value = null, string tableName = "SysLogs", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[ErrMessage]" }, "ErrMessage", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SysLogsWhereCollection ErrStackTrace(this SysLogsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[ErrStackTrace]" }, "ErrStackTrace", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection SysLogs_ErrStackTrace(this SqlWhereCollection self, object value = null, string tableName = "SysLogs", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[ErrStackTrace]" }, "ErrStackTrace", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SysLogsWhereCollection InDebug(this SysLogsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[InDebug]" }, "InDebug", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection SysLogs_InDebug(this SqlWhereCollection self, object value = null, string tableName = "SysLogs", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[InDebug]" }, "InDebug", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SysLogsWhereCollection AssemblyVersion(this SysLogsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[AssemblyVersion]" }, "AssemblyVersion", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection SysLogs_AssemblyVersion(this SqlWhereCollection self, object value = null, string tableName = "SysLogs", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[AssemblyVersion]" }, "AssemblyVersion", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SysLogsWhereCollection Comments(this SysLogsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Comments]" }, "Comments", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection SysLogs_Comments(this SqlWhereCollection self, object value = null, string tableName = "SysLogs", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Comments]" }, "Comments", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SysLogsWhereCollection Creator(this SysLogsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Creator]" }, "Creator", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection SysLogs_Creator(this SqlWhereCollection self, object value = null, string tableName = "SysLogs", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Creator]" }, "Creator", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SysLogsWhereCollection Updator(this SysLogsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Updator]" }, "Updator", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection SysLogs_Updator(this SqlWhereCollection self, object value = null, string tableName = "SysLogs", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Updator]" }, "Updator", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SysLogsWhereCollection UpdatedTime(this SysLogsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[UpdatedTime]" }, "UpdatedTime", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection SysLogs_UpdatedTime(this SqlWhereCollection self, object value = null, string tableName = "SysLogs", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[UpdatedTime]" }, "UpdatedTime", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SysLogsWhereCollection SysLogId_In(this SysLogsWhereCollection self, IEnumerable<long> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[SysLogId]" }, "SysLogId", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection SysLogs_SysLogId_In(this SqlWhereCollection self, IEnumerable<long> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[SysLogId]" }, "SysLogId", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SysLogsWhereCollection Ver_In(this SysLogsWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Ver]" }, "Ver", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection SysLogs_Ver_In(this SqlWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Ver]" }, "Ver", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SysLogsWhereCollection SysLogType_In(this SysLogsWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[SysLogType]" }, "SysLogType", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection SysLogs_SysLogType_In(this SqlWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[SysLogType]" }, "SysLogType", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SysLogsWhereCollection RequestSize_In(this SysLogsWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[RequestSize]" }, "RequestSize", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection SysLogs_RequestSize_In(this SqlWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[RequestSize]" }, "RequestSize", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SysLogsWhereCollection ResponseSize_In(this SysLogsWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[ResponseSize]" }, "ResponseSize", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection SysLogs_ResponseSize_In(this SqlWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[ResponseSize]" }, "ResponseSize", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SysLogsWhereCollection WorkingSet64_In(this SysLogsWhereCollection self, IEnumerable<long> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[WorkingSet64]" }, "WorkingSet64", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection SysLogs_WorkingSet64_In(this SqlWhereCollection self, IEnumerable<long> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[WorkingSet64]" }, "WorkingSet64", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SysLogsWhereCollection VirtualMemorySize64_In(this SysLogsWhereCollection self, IEnumerable<long> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[VirtualMemorySize64]" }, "VirtualMemorySize64", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection SysLogs_VirtualMemorySize64_In(this SqlWhereCollection self, IEnumerable<long> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[VirtualMemorySize64]" }, "VirtualMemorySize64", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SysLogsWhereCollection ProcessId_In(this SysLogsWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[ProcessId]" }, "ProcessId", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection SysLogs_ProcessId_In(this SqlWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[ProcessId]" }, "ProcessId", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SysLogsWhereCollection BasePriority_In(this SysLogsWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[BasePriority]" }, "BasePriority", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection SysLogs_BasePriority_In(this SqlWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[BasePriority]" }, "BasePriority", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SysLogsWhereCollection Creator_In(this SysLogsWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Creator]" }, "Creator", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection SysLogs_Creator_In(this SqlWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Creator]" }, "Creator", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SysLogsWhereCollection Updator_In(this SysLogsWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Updator]" }, "Updator", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection SysLogs_Updator_In(this SqlWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Updator]" }, "Updator", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SysLogsWhereCollection SysLogId_Between(this SysLogsWhereCollection self, long begin, long end, bool _using = true) { return self.Add(new string[] { "[t0].[SysLogId]" }, "SysLogId", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection SysLogs_SysLogId_Between(this SqlWhereCollection self, long begin, long end, bool _using = true) { return self.Add(new string[] { "[t0].[SysLogId]" }, "SysLogId", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SysLogsWhereCollection Ver_Between(this SysLogsWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Ver]" }, "Ver", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection SysLogs_Ver_Between(this SqlWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Ver]" }, "Ver", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SysLogsWhereCollection SysLogType_Between(this SysLogsWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[SysLogType]" }, "SysLogType", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection SysLogs_SysLogType_Between(this SqlWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[SysLogType]" }, "SysLogType", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SysLogsWhereCollection RequestSize_Between(this SysLogsWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[RequestSize]" }, "RequestSize", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection SysLogs_RequestSize_Between(this SqlWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[RequestSize]" }, "RequestSize", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SysLogsWhereCollection ResponseSize_Between(this SysLogsWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[ResponseSize]" }, "ResponseSize", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection SysLogs_ResponseSize_Between(this SqlWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[ResponseSize]" }, "ResponseSize", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SysLogsWhereCollection WorkingSet64_Between(this SysLogsWhereCollection self, long begin, long end, bool _using = true) { return self.Add(new string[] { "[t0].[WorkingSet64]" }, "WorkingSet64", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection SysLogs_WorkingSet64_Between(this SqlWhereCollection self, long begin, long end, bool _using = true) { return self.Add(new string[] { "[t0].[WorkingSet64]" }, "WorkingSet64", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SysLogsWhereCollection VirtualMemorySize64_Between(this SysLogsWhereCollection self, long begin, long end, bool _using = true) { return self.Add(new string[] { "[t0].[VirtualMemorySize64]" }, "VirtualMemorySize64", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection SysLogs_VirtualMemorySize64_Between(this SqlWhereCollection self, long begin, long end, bool _using = true) { return self.Add(new string[] { "[t0].[VirtualMemorySize64]" }, "VirtualMemorySize64", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SysLogsWhereCollection ProcessId_Between(this SysLogsWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[ProcessId]" }, "ProcessId", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection SysLogs_ProcessId_Between(this SqlWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[ProcessId]" }, "ProcessId", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SysLogsWhereCollection BasePriority_Between(this SysLogsWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[BasePriority]" }, "BasePriority", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection SysLogs_BasePriority_Between(this SqlWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[BasePriority]" }, "BasePriority", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SysLogsWhereCollection Creator_Between(this SysLogsWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Creator]" }, "Creator", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection SysLogs_Creator_Between(this SqlWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Creator]" }, "Creator", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SysLogsWhereCollection Updator_Between(this SysLogsWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Updator]" }, "Updator", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection SysLogs_Updator_Between(this SqlWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Updator]" }, "Updator", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SysLogsWhereCollection CreatedTime_Between(this SysLogsWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[CreatedTime]" }, "CreatedTime", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection SysLogs_CreatedTime_Between(this SqlWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[CreatedTime]" }, "CreatedTime", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static SysLogsWhereCollection UpdatedTime_Between(this SysLogsWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[UpdatedTime]" }, "UpdatedTime", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection SysLogs_UpdatedTime_Between(this SqlWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[UpdatedTime]" }, "UpdatedTime", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static SysLogsWhereCollection Sub(this SysLogsWhereCollection self, SqlStatement sub, object value = null, string _operator = "=", bool _using = true) { return self.Add(null, null, value, _operator, sub: sub, _using: _using); }
        public static SysLogsWhereCollection Or(this SysLogsWhereCollection self, SqlWhereCollection or, bool _using = true) { return self.Add(null, null, or: or, _using: _using); }
        public static SysLogsGroupByCollection CreatedTime(this SysLogsGroupByCollection self) { return self.Add("[t0].[CreatedTime]"); }
        public static SqlGroupByCollection SysLogs_CreatedTime(this SqlGroupByCollection self) { return self.Add("[t0].[CreatedTime]"); }
        public static SysLogsGroupByCollection SysLogId(this SysLogsGroupByCollection self) { return self.Add("[t0].[SysLogId]"); }
        public static SqlGroupByCollection SysLogs_SysLogId(this SqlGroupByCollection self) { return self.Add("[t0].[SysLogId]"); }
        public static SysLogsGroupByCollection Ver(this SysLogsGroupByCollection self) { return self.Add("[t0].[Ver]"); }
        public static SqlGroupByCollection SysLogs_Ver(this SqlGroupByCollection self) { return self.Add("[t0].[Ver]"); }
        public static SysLogsGroupByCollection SysLogType(this SysLogsGroupByCollection self) { return self.Add("[t0].[SysLogType]"); }
        public static SqlGroupByCollection SysLogs_SysLogType(this SqlGroupByCollection self) { return self.Add("[t0].[SysLogType]"); }
        public static SysLogsGroupByCollection OnAzure(this SysLogsGroupByCollection self) { return self.Add("[t0].[OnAzure]"); }
        public static SqlGroupByCollection SysLogs_OnAzure(this SqlGroupByCollection self) { return self.Add("[t0].[OnAzure]"); }
        public static SysLogsGroupByCollection MachineName(this SysLogsGroupByCollection self) { return self.Add("[t0].[MachineName]"); }
        public static SqlGroupByCollection SysLogs_MachineName(this SqlGroupByCollection self) { return self.Add("[t0].[MachineName]"); }
        public static SysLogsGroupByCollection ServiceName(this SysLogsGroupByCollection self) { return self.Add("[t0].[ServiceName]"); }
        public static SqlGroupByCollection SysLogs_ServiceName(this SqlGroupByCollection self) { return self.Add("[t0].[ServiceName]"); }
        public static SysLogsGroupByCollection TenantName(this SysLogsGroupByCollection self) { return self.Add("[t0].[TenantName]"); }
        public static SqlGroupByCollection SysLogs_TenantName(this SqlGroupByCollection self) { return self.Add("[t0].[TenantName]"); }
        public static SysLogsGroupByCollection Application(this SysLogsGroupByCollection self) { return self.Add("[t0].[Application]"); }
        public static SqlGroupByCollection SysLogs_Application(this SqlGroupByCollection self) { return self.Add("[t0].[Application]"); }
        public static SysLogsGroupByCollection Class(this SysLogsGroupByCollection self) { return self.Add("[t0].[Class]"); }
        public static SqlGroupByCollection SysLogs_Class(this SqlGroupByCollection self) { return self.Add("[t0].[Class]"); }
        public static SysLogsGroupByCollection Method(this SysLogsGroupByCollection self) { return self.Add("[t0].[Method]"); }
        public static SqlGroupByCollection SysLogs_Method(this SqlGroupByCollection self) { return self.Add("[t0].[Method]"); }
        public static SysLogsGroupByCollection RequestData(this SysLogsGroupByCollection self) { return self.Add("[t0].[RequestData]"); }
        public static SqlGroupByCollection SysLogs_RequestData(this SqlGroupByCollection self) { return self.Add("[t0].[RequestData]"); }
        public static SysLogsGroupByCollection HttpMethod(this SysLogsGroupByCollection self) { return self.Add("[t0].[HttpMethod]"); }
        public static SqlGroupByCollection SysLogs_HttpMethod(this SqlGroupByCollection self) { return self.Add("[t0].[HttpMethod]"); }
        public static SysLogsGroupByCollection RequestSize(this SysLogsGroupByCollection self) { return self.Add("[t0].[RequestSize]"); }
        public static SqlGroupByCollection SysLogs_RequestSize(this SqlGroupByCollection self) { return self.Add("[t0].[RequestSize]"); }
        public static SysLogsGroupByCollection ResponseSize(this SysLogsGroupByCollection self) { return self.Add("[t0].[ResponseSize]"); }
        public static SqlGroupByCollection SysLogs_ResponseSize(this SqlGroupByCollection self) { return self.Add("[t0].[ResponseSize]"); }
        public static SysLogsGroupByCollection Elapsed(this SysLogsGroupByCollection self) { return self.Add("[t0].[Elapsed]"); }
        public static SqlGroupByCollection SysLogs_Elapsed(this SqlGroupByCollection self) { return self.Add("[t0].[Elapsed]"); }
        public static SysLogsGroupByCollection ApplicationAge(this SysLogsGroupByCollection self) { return self.Add("[t0].[ApplicationAge]"); }
        public static SqlGroupByCollection SysLogs_ApplicationAge(this SqlGroupByCollection self) { return self.Add("[t0].[ApplicationAge]"); }
        public static SysLogsGroupByCollection ApplicationRequestInterval(this SysLogsGroupByCollection self) { return self.Add("[t0].[ApplicationRequestInterval]"); }
        public static SqlGroupByCollection SysLogs_ApplicationRequestInterval(this SqlGroupByCollection self) { return self.Add("[t0].[ApplicationRequestInterval]"); }
        public static SysLogsGroupByCollection SessionAge(this SysLogsGroupByCollection self) { return self.Add("[t0].[SessionAge]"); }
        public static SqlGroupByCollection SysLogs_SessionAge(this SqlGroupByCollection self) { return self.Add("[t0].[SessionAge]"); }
        public static SysLogsGroupByCollection SessionRequestInterval(this SysLogsGroupByCollection self) { return self.Add("[t0].[SessionRequestInterval]"); }
        public static SqlGroupByCollection SysLogs_SessionRequestInterval(this SqlGroupByCollection self) { return self.Add("[t0].[SessionRequestInterval]"); }
        public static SysLogsGroupByCollection WorkingSet64(this SysLogsGroupByCollection self) { return self.Add("[t0].[WorkingSet64]"); }
        public static SqlGroupByCollection SysLogs_WorkingSet64(this SqlGroupByCollection self) { return self.Add("[t0].[WorkingSet64]"); }
        public static SysLogsGroupByCollection VirtualMemorySize64(this SysLogsGroupByCollection self) { return self.Add("[t0].[VirtualMemorySize64]"); }
        public static SqlGroupByCollection SysLogs_VirtualMemorySize64(this SqlGroupByCollection self) { return self.Add("[t0].[VirtualMemorySize64]"); }
        public static SysLogsGroupByCollection ProcessId(this SysLogsGroupByCollection self) { return self.Add("[t0].[ProcessId]"); }
        public static SqlGroupByCollection SysLogs_ProcessId(this SqlGroupByCollection self) { return self.Add("[t0].[ProcessId]"); }
        public static SysLogsGroupByCollection ProcessName(this SysLogsGroupByCollection self) { return self.Add("[t0].[ProcessName]"); }
        public static SqlGroupByCollection SysLogs_ProcessName(this SqlGroupByCollection self) { return self.Add("[t0].[ProcessName]"); }
        public static SysLogsGroupByCollection BasePriority(this SysLogsGroupByCollection self) { return self.Add("[t0].[BasePriority]"); }
        public static SqlGroupByCollection SysLogs_BasePriority(this SqlGroupByCollection self) { return self.Add("[t0].[BasePriority]"); }
        public static SysLogsGroupByCollection Url(this SysLogsGroupByCollection self) { return self.Add("[t0].[Url]"); }
        public static SqlGroupByCollection SysLogs_Url(this SqlGroupByCollection self) { return self.Add("[t0].[Url]"); }
        public static SysLogsGroupByCollection UrlReferer(this SysLogsGroupByCollection self) { return self.Add("[t0].[UrlReferer]"); }
        public static SqlGroupByCollection SysLogs_UrlReferer(this SqlGroupByCollection self) { return self.Add("[t0].[UrlReferer]"); }
        public static SysLogsGroupByCollection UserHostName(this SysLogsGroupByCollection self) { return self.Add("[t0].[UserHostName]"); }
        public static SqlGroupByCollection SysLogs_UserHostName(this SqlGroupByCollection self) { return self.Add("[t0].[UserHostName]"); }
        public static SysLogsGroupByCollection UserHostAddress(this SysLogsGroupByCollection self) { return self.Add("[t0].[UserHostAddress]"); }
        public static SqlGroupByCollection SysLogs_UserHostAddress(this SqlGroupByCollection self) { return self.Add("[t0].[UserHostAddress]"); }
        public static SysLogsGroupByCollection UserLanguage(this SysLogsGroupByCollection self) { return self.Add("[t0].[UserLanguage]"); }
        public static SqlGroupByCollection SysLogs_UserLanguage(this SqlGroupByCollection self) { return self.Add("[t0].[UserLanguage]"); }
        public static SysLogsGroupByCollection UserAgent(this SysLogsGroupByCollection self) { return self.Add("[t0].[UserAgent]"); }
        public static SqlGroupByCollection SysLogs_UserAgent(this SqlGroupByCollection self) { return self.Add("[t0].[UserAgent]"); }
        public static SysLogsGroupByCollection SessionGuid(this SysLogsGroupByCollection self) { return self.Add("[t0].[SessionGuid]"); }
        public static SqlGroupByCollection SysLogs_SessionGuid(this SqlGroupByCollection self) { return self.Add("[t0].[SessionGuid]"); }
        public static SysLogsGroupByCollection ErrMessage(this SysLogsGroupByCollection self) { return self.Add("[t0].[ErrMessage]"); }
        public static SqlGroupByCollection SysLogs_ErrMessage(this SqlGroupByCollection self) { return self.Add("[t0].[ErrMessage]"); }
        public static SysLogsGroupByCollection ErrStackTrace(this SysLogsGroupByCollection self) { return self.Add("[t0].[ErrStackTrace]"); }
        public static SqlGroupByCollection SysLogs_ErrStackTrace(this SqlGroupByCollection self) { return self.Add("[t0].[ErrStackTrace]"); }
        public static SysLogsGroupByCollection InDebug(this SysLogsGroupByCollection self) { return self.Add("[t0].[InDebug]"); }
        public static SqlGroupByCollection SysLogs_InDebug(this SqlGroupByCollection self) { return self.Add("[t0].[InDebug]"); }
        public static SysLogsGroupByCollection AssemblyVersion(this SysLogsGroupByCollection self) { return self.Add("[t0].[AssemblyVersion]"); }
        public static SqlGroupByCollection SysLogs_AssemblyVersion(this SqlGroupByCollection self) { return self.Add("[t0].[AssemblyVersion]"); }
        public static SysLogsGroupByCollection Comments(this SysLogsGroupByCollection self) { return self.Add("[t0].[Comments]"); }
        public static SqlGroupByCollection SysLogs_Comments(this SqlGroupByCollection self) { return self.Add("[t0].[Comments]"); }
        public static SysLogsGroupByCollection Creator(this SysLogsGroupByCollection self) { return self.Add("[t0].[Creator]"); }
        public static SqlGroupByCollection SysLogs_Creator(this SqlGroupByCollection self) { return self.Add("[t0].[Creator]"); }
        public static SysLogsGroupByCollection Updator(this SysLogsGroupByCollection self) { return self.Add("[t0].[Updator]"); }
        public static SqlGroupByCollection SysLogs_Updator(this SqlGroupByCollection self) { return self.Add("[t0].[Updator]"); }
        public static SysLogsGroupByCollection UpdatedTime(this SysLogsGroupByCollection self) { return self.Add("[t0].[UpdatedTime]"); }
        public static SqlGroupByCollection SysLogs_UpdatedTime(this SqlGroupByCollection self) { return self.Add("[t0].[UpdatedTime]"); }
        public static SysLogsHavingCollection SysLogsCount(this SysLogsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "count(*)", name: "SysLogsCount", value: value, _operator: _operator); }
        public static SysLogsHavingCollection UpdatedTimeMax(this SysLogsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[UpdatedTime])", name: "UpdatedTimeMax", value: value, _operator: _operator); }
        public static SqlHavingCollection SysLogs_UpdatedTimeMax(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[UpdatedTime])", name: "UpdatedTimeMax", value: value, _operator: _operator); }
        public static SysLogsHavingCollection UpdatedTimeMin(this SysLogsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[UpdatedTime])", name: "UpdatedTimeMin", value: value, _operator: _operator); }
        public static SqlHavingCollection SysLogs_UpdatedTimeMin(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[UpdatedTime])", name: "UpdatedTimeMin", value: value, _operator: _operator); }
        public static SysLogsOrderByCollection CreatedTime(this SysLogsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[CreatedTime]"); }
        public static SysLogsOrderByCollection SysLogId(this SysLogsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[SysLogId]"); }
        public static SysLogsOrderByCollection Ver(this SysLogsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Ver]"); }
        public static SysLogsOrderByCollection SysLogType(this SysLogsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[SysLogType]"); }
        public static SysLogsOrderByCollection OnAzure(this SysLogsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[OnAzure]"); }
        public static SysLogsOrderByCollection MachineName(this SysLogsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[MachineName]"); }
        public static SysLogsOrderByCollection ServiceName(this SysLogsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[ServiceName]"); }
        public static SysLogsOrderByCollection TenantName(this SysLogsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[TenantName]"); }
        public static SysLogsOrderByCollection Application(this SysLogsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Application]"); }
        public static SysLogsOrderByCollection Class(this SysLogsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Class]"); }
        public static SysLogsOrderByCollection Method(this SysLogsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Method]"); }
        public static SysLogsOrderByCollection RequestData(this SysLogsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[RequestData]"); }
        public static SysLogsOrderByCollection HttpMethod(this SysLogsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[HttpMethod]"); }
        public static SysLogsOrderByCollection RequestSize(this SysLogsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[RequestSize]"); }
        public static SysLogsOrderByCollection ResponseSize(this SysLogsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[ResponseSize]"); }
        public static SysLogsOrderByCollection Elapsed(this SysLogsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Elapsed]"); }
        public static SysLogsOrderByCollection ApplicationAge(this SysLogsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[ApplicationAge]"); }
        public static SysLogsOrderByCollection ApplicationRequestInterval(this SysLogsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[ApplicationRequestInterval]"); }
        public static SysLogsOrderByCollection SessionAge(this SysLogsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[SessionAge]"); }
        public static SysLogsOrderByCollection SessionRequestInterval(this SysLogsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[SessionRequestInterval]"); }
        public static SysLogsOrderByCollection WorkingSet64(this SysLogsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[WorkingSet64]"); }
        public static SysLogsOrderByCollection VirtualMemorySize64(this SysLogsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[VirtualMemorySize64]"); }
        public static SysLogsOrderByCollection ProcessId(this SysLogsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[ProcessId]"); }
        public static SysLogsOrderByCollection ProcessName(this SysLogsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[ProcessName]"); }
        public static SysLogsOrderByCollection BasePriority(this SysLogsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[BasePriority]"); }
        public static SysLogsOrderByCollection Url(this SysLogsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Url]"); }
        public static SysLogsOrderByCollection UrlReferer(this SysLogsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[UrlReferer]"); }
        public static SysLogsOrderByCollection UserHostName(this SysLogsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[UserHostName]"); }
        public static SysLogsOrderByCollection UserHostAddress(this SysLogsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[UserHostAddress]"); }
        public static SysLogsOrderByCollection UserLanguage(this SysLogsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[UserLanguage]"); }
        public static SysLogsOrderByCollection UserAgent(this SysLogsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[UserAgent]"); }
        public static SysLogsOrderByCollection SessionGuid(this SysLogsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[SessionGuid]"); }
        public static SysLogsOrderByCollection ErrMessage(this SysLogsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[ErrMessage]"); }
        public static SysLogsOrderByCollection ErrStackTrace(this SysLogsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[ErrStackTrace]"); }
        public static SysLogsOrderByCollection InDebug(this SysLogsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[InDebug]"); }
        public static SysLogsOrderByCollection AssemblyVersion(this SysLogsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[AssemblyVersion]"); }
        public static SysLogsOrderByCollection Comments(this SysLogsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Comments]"); }
        public static SysLogsOrderByCollection Creator(this SysLogsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Creator]"); }
        public static SysLogsOrderByCollection Updator(this SysLogsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Updator]"); }
        public static SysLogsOrderByCollection UpdatedTime(this SysLogsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[UpdatedTime]"); }
        public static SqlOrderByCollection SysLogs_CreatedTime(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[CreatedTime]"); }
        public static SqlOrderByCollection SysLogs_SysLogId(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[SysLogId]"); }
        public static SqlOrderByCollection SysLogs_Ver(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Ver]"); }
        public static SqlOrderByCollection SysLogs_SysLogType(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[SysLogType]"); }
        public static SqlOrderByCollection SysLogs_OnAzure(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[OnAzure]"); }
        public static SqlOrderByCollection SysLogs_MachineName(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[MachineName]"); }
        public static SqlOrderByCollection SysLogs_ServiceName(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[ServiceName]"); }
        public static SqlOrderByCollection SysLogs_TenantName(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[TenantName]"); }
        public static SqlOrderByCollection SysLogs_Application(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Application]"); }
        public static SqlOrderByCollection SysLogs_Class(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Class]"); }
        public static SqlOrderByCollection SysLogs_Method(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Method]"); }
        public static SqlOrderByCollection SysLogs_RequestData(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[RequestData]"); }
        public static SqlOrderByCollection SysLogs_HttpMethod(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[HttpMethod]"); }
        public static SqlOrderByCollection SysLogs_RequestSize(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[RequestSize]"); }
        public static SqlOrderByCollection SysLogs_ResponseSize(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[ResponseSize]"); }
        public static SqlOrderByCollection SysLogs_Elapsed(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Elapsed]"); }
        public static SqlOrderByCollection SysLogs_ApplicationAge(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[ApplicationAge]"); }
        public static SqlOrderByCollection SysLogs_ApplicationRequestInterval(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[ApplicationRequestInterval]"); }
        public static SqlOrderByCollection SysLogs_SessionAge(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[SessionAge]"); }
        public static SqlOrderByCollection SysLogs_SessionRequestInterval(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[SessionRequestInterval]"); }
        public static SqlOrderByCollection SysLogs_WorkingSet64(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[WorkingSet64]"); }
        public static SqlOrderByCollection SysLogs_VirtualMemorySize64(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[VirtualMemorySize64]"); }
        public static SqlOrderByCollection SysLogs_ProcessId(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[ProcessId]"); }
        public static SqlOrderByCollection SysLogs_ProcessName(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[ProcessName]"); }
        public static SqlOrderByCollection SysLogs_BasePriority(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[BasePriority]"); }
        public static SqlOrderByCollection SysLogs_Url(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Url]"); }
        public static SqlOrderByCollection SysLogs_UrlReferer(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[UrlReferer]"); }
        public static SqlOrderByCollection SysLogs_UserHostName(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[UserHostName]"); }
        public static SqlOrderByCollection SysLogs_UserHostAddress(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[UserHostAddress]"); }
        public static SqlOrderByCollection SysLogs_UserLanguage(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[UserLanguage]"); }
        public static SqlOrderByCollection SysLogs_UserAgent(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[UserAgent]"); }
        public static SqlOrderByCollection SysLogs_SessionGuid(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[SessionGuid]"); }
        public static SqlOrderByCollection SysLogs_ErrMessage(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[ErrMessage]"); }
        public static SqlOrderByCollection SysLogs_ErrStackTrace(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[ErrStackTrace]"); }
        public static SqlOrderByCollection SysLogs_InDebug(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[InDebug]"); }
        public static SqlOrderByCollection SysLogs_AssemblyVersion(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[AssemblyVersion]"); }
        public static SqlOrderByCollection SysLogs_Comments(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Comments]"); }
        public static SqlOrderByCollection SysLogs_Creator(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Creator]"); }
        public static SqlOrderByCollection SysLogs_Updator(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Updator]"); }
        public static SqlOrderByCollection SysLogs_UpdatedTime(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[UpdatedTime]"); }
        public static SysLogsOrderByCollection SysLogsCount(this SysLogsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "count(*)"); }
        public static SysLogsOrderByCollection UpdatedTimeMax(this SysLogsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[UpdatedTime])"); }
        public static SqlOrderByCollection SysLogs_UpdatedTimeMax(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[UpdatedTime])"); }
        public static SysLogsOrderByCollection UpdatedTimeMin(this SysLogsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[UpdatedTime])"); }
        public static SqlOrderByCollection SysLogs_UpdatedTimeMin(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[UpdatedTime])"); }
        public static SysLogsParamCollection CreatedTime(this SysLogsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CreatedTime]", "CreatedTime", value, sub, raw, _using); }
        public static SqlParamCollection SysLogs_CreatedTime(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CreatedTime]", "CreatedTime", value, sub, raw, _using); }
        public static SysLogsParamCollection SysLogId(this SysLogsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[SysLogId]", "SysLogId", value, sub, raw, _using); }
        public static SqlParamCollection SysLogs_SysLogId(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[SysLogId]", "SysLogId", value, sub, raw, _using); }
        public static SysLogsParamCollection Ver(this SysLogsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Ver]", "Ver", value, sub, raw, _using); }
        public static SqlParamCollection SysLogs_Ver(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Ver]", "Ver", value, sub, raw, _using); }
        public static SysLogsParamCollection SysLogType(this SysLogsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[SysLogType]", "SysLogType", value.ToInt(), sub, raw, _using); }
        public static SqlParamCollection SysLogs_SysLogType(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[SysLogType]", "SysLogType", value.ToInt(), sub, raw, _using); }
        public static SysLogsParamCollection OnAzure(this SysLogsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[OnAzure]", "OnAzure", value, sub, raw, _using); }
        public static SqlParamCollection SysLogs_OnAzure(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[OnAzure]", "OnAzure", value, sub, raw, _using); }
        public static SysLogsParamCollection MachineName(this SysLogsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[MachineName]", "MachineName", value, sub, raw, _using); }
        public static SqlParamCollection SysLogs_MachineName(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[MachineName]", "MachineName", value, sub, raw, _using); }
        public static SysLogsParamCollection ServiceName(this SysLogsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ServiceName]", "ServiceName", value, sub, raw, _using); }
        public static SqlParamCollection SysLogs_ServiceName(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ServiceName]", "ServiceName", value, sub, raw, _using); }
        public static SysLogsParamCollection TenantName(this SysLogsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[TenantName]", "TenantName", value, sub, raw, _using); }
        public static SqlParamCollection SysLogs_TenantName(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[TenantName]", "TenantName", value, sub, raw, _using); }
        public static SysLogsParamCollection Application(this SysLogsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Application]", "Application", value, sub, raw, _using); }
        public static SqlParamCollection SysLogs_Application(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Application]", "Application", value, sub, raw, _using); }
        public static SysLogsParamCollection Class(this SysLogsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Class]", "Class", value, sub, raw, _using); }
        public static SqlParamCollection SysLogs_Class(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Class]", "Class", value, sub, raw, _using); }
        public static SysLogsParamCollection Method(this SysLogsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Method]", "Method", value, sub, raw, _using); }
        public static SqlParamCollection SysLogs_Method(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Method]", "Method", value, sub, raw, _using); }
        public static SysLogsParamCollection RequestData(this SysLogsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[RequestData]", "RequestData", value, sub, raw, _using); }
        public static SqlParamCollection SysLogs_RequestData(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[RequestData]", "RequestData", value, sub, raw, _using); }
        public static SysLogsParamCollection HttpMethod(this SysLogsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[HttpMethod]", "HttpMethod", value, sub, raw, _using); }
        public static SqlParamCollection SysLogs_HttpMethod(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[HttpMethod]", "HttpMethod", value, sub, raw, _using); }
        public static SysLogsParamCollection RequestSize(this SysLogsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[RequestSize]", "RequestSize", value, sub, raw, _using); }
        public static SqlParamCollection SysLogs_RequestSize(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[RequestSize]", "RequestSize", value, sub, raw, _using); }
        public static SysLogsParamCollection ResponseSize(this SysLogsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ResponseSize]", "ResponseSize", value, sub, raw, _using); }
        public static SqlParamCollection SysLogs_ResponseSize(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ResponseSize]", "ResponseSize", value, sub, raw, _using); }
        public static SysLogsParamCollection Elapsed(this SysLogsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Elapsed]", "Elapsed", value, sub, raw, _using); }
        public static SqlParamCollection SysLogs_Elapsed(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Elapsed]", "Elapsed", value, sub, raw, _using); }
        public static SysLogsParamCollection ApplicationAge(this SysLogsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ApplicationAge]", "ApplicationAge", value, sub, raw, _using); }
        public static SqlParamCollection SysLogs_ApplicationAge(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ApplicationAge]", "ApplicationAge", value, sub, raw, _using); }
        public static SysLogsParamCollection ApplicationRequestInterval(this SysLogsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ApplicationRequestInterval]", "ApplicationRequestInterval", value, sub, raw, _using); }
        public static SqlParamCollection SysLogs_ApplicationRequestInterval(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ApplicationRequestInterval]", "ApplicationRequestInterval", value, sub, raw, _using); }
        public static SysLogsParamCollection SessionAge(this SysLogsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[SessionAge]", "SessionAge", value, sub, raw, _using); }
        public static SqlParamCollection SysLogs_SessionAge(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[SessionAge]", "SessionAge", value, sub, raw, _using); }
        public static SysLogsParamCollection SessionRequestInterval(this SysLogsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[SessionRequestInterval]", "SessionRequestInterval", value, sub, raw, _using); }
        public static SqlParamCollection SysLogs_SessionRequestInterval(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[SessionRequestInterval]", "SessionRequestInterval", value, sub, raw, _using); }
        public static SysLogsParamCollection WorkingSet64(this SysLogsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[WorkingSet64]", "WorkingSet64", value, sub, raw, _using); }
        public static SqlParamCollection SysLogs_WorkingSet64(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[WorkingSet64]", "WorkingSet64", value, sub, raw, _using); }
        public static SysLogsParamCollection VirtualMemorySize64(this SysLogsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[VirtualMemorySize64]", "VirtualMemorySize64", value, sub, raw, _using); }
        public static SqlParamCollection SysLogs_VirtualMemorySize64(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[VirtualMemorySize64]", "VirtualMemorySize64", value, sub, raw, _using); }
        public static SysLogsParamCollection ProcessId(this SysLogsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ProcessId]", "ProcessId", value, sub, raw, _using); }
        public static SqlParamCollection SysLogs_ProcessId(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ProcessId]", "ProcessId", value, sub, raw, _using); }
        public static SysLogsParamCollection ProcessName(this SysLogsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ProcessName]", "ProcessName", value, sub, raw, _using); }
        public static SqlParamCollection SysLogs_ProcessName(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ProcessName]", "ProcessName", value, sub, raw, _using); }
        public static SysLogsParamCollection BasePriority(this SysLogsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[BasePriority]", "BasePriority", value, sub, raw, _using); }
        public static SqlParamCollection SysLogs_BasePriority(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[BasePriority]", "BasePriority", value, sub, raw, _using); }
        public static SysLogsParamCollection Url(this SysLogsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Url]", "Url", value, sub, raw, _using); }
        public static SqlParamCollection SysLogs_Url(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Url]", "Url", value, sub, raw, _using); }
        public static SysLogsParamCollection UrlReferer(this SysLogsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[UrlReferer]", "UrlReferer", value, sub, raw, _using); }
        public static SqlParamCollection SysLogs_UrlReferer(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[UrlReferer]", "UrlReferer", value, sub, raw, _using); }
        public static SysLogsParamCollection UserHostName(this SysLogsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[UserHostName]", "UserHostName", value, sub, raw, _using); }
        public static SqlParamCollection SysLogs_UserHostName(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[UserHostName]", "UserHostName", value, sub, raw, _using); }
        public static SysLogsParamCollection UserHostAddress(this SysLogsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[UserHostAddress]", "UserHostAddress", value, sub, raw, _using); }
        public static SqlParamCollection SysLogs_UserHostAddress(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[UserHostAddress]", "UserHostAddress", value, sub, raw, _using); }
        public static SysLogsParamCollection UserLanguage(this SysLogsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[UserLanguage]", "UserLanguage", value, sub, raw, _using); }
        public static SqlParamCollection SysLogs_UserLanguage(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[UserLanguage]", "UserLanguage", value, sub, raw, _using); }
        public static SysLogsParamCollection UserAgent(this SysLogsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[UserAgent]", "UserAgent", value, sub, raw, _using); }
        public static SqlParamCollection SysLogs_UserAgent(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[UserAgent]", "UserAgent", value, sub, raw, _using); }
        public static SysLogsParamCollection SessionGuid(this SysLogsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[SessionGuid]", "SessionGuid", value, sub, raw, _using); }
        public static SqlParamCollection SysLogs_SessionGuid(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[SessionGuid]", "SessionGuid", value, sub, raw, _using); }
        public static SysLogsParamCollection ErrMessage(this SysLogsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ErrMessage]", "ErrMessage", value, sub, raw, _using); }
        public static SqlParamCollection SysLogs_ErrMessage(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ErrMessage]", "ErrMessage", value, sub, raw, _using); }
        public static SysLogsParamCollection ErrStackTrace(this SysLogsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ErrStackTrace]", "ErrStackTrace", value, sub, raw, _using); }
        public static SqlParamCollection SysLogs_ErrStackTrace(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ErrStackTrace]", "ErrStackTrace", value, sub, raw, _using); }
        public static SysLogsParamCollection InDebug(this SysLogsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[InDebug]", "InDebug", value, sub, raw, _using); }
        public static SqlParamCollection SysLogs_InDebug(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[InDebug]", "InDebug", value, sub, raw, _using); }
        public static SysLogsParamCollection AssemblyVersion(this SysLogsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[AssemblyVersion]", "AssemblyVersion", value, sub, raw, _using); }
        public static SqlParamCollection SysLogs_AssemblyVersion(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[AssemblyVersion]", "AssemblyVersion", value, sub, raw, _using); }
        public static SysLogsParamCollection Comments(this SysLogsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Comments]", "Comments", value, sub, raw, _using); }
        public static SqlParamCollection SysLogs_Comments(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Comments]", "Comments", value, sub, raw, _using); }
        public static SysLogsParamCollection Creator(this SysLogsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Creator]", "Creator", value, sub, raw, _using); }
        public static SqlParamCollection SysLogs_Creator(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Creator]", "Creator", value, sub, raw, _using); }
        public static SysLogsParamCollection Updator(this SysLogsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Updator]", "Updator", value, sub, raw, _using); }
        public static SqlParamCollection SysLogs_Updator(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Updator]", "Updator", value, sub, raw, _using); }
        public static SysLogsParamCollection UpdatedTime(this SysLogsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[UpdatedTime]", "UpdatedTime", value, sub, raw, _using); }
        public static SqlParamCollection SysLogs_UpdatedTime(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[UpdatedTime]", "UpdatedTime", value, sub, raw, _using); }

        public static DeptsColumnCollection DeptsColumn()
        {
            return new DeptsColumnCollection();
        }

        public class DeptsColumnCollection : SqlColumnCollection
        {
            public DeptsColumnCollection Add(params string[] columnBrackets)
            {
                base.Add(false, columnBrackets);
                return this;
            }

            public new DeptsColumnCollection Add(bool duplicates = false, params string[] columnBrackets)
            {
                base.Add(duplicates, columnBrackets);
                return this;
            }
        }

        public static DeptsJoinCollection DeptsJoin()
        {
            return new DeptsJoinCollection();
        }

        public class DeptsJoinCollection : SqlJoinCollection
        {
            public new DeptsJoinCollection Add(params string[] columnBrackets)
            {
                columnBrackets.ForEach(columnBracket => base.Add(new SqlJoin(columnBracket)));
                return this;
            }
        }

        public static DeptsWhereCollection DeptsWhere()
        {
            return new DeptsWhereCollection();
        }

        public class DeptsWhereCollection : SqlWhereCollection
        {
            public new DeptsWhereCollection Add(
                string[] columnBrackets = null,
                string name = "",
                object value = null,
                string _operator = "=",
                string multiColumnOperator = " or ",
                string multiParamOperator = " and ",
                SqlStatement sub = null,
                string raw = "",
                SqlWhereCollection or = null,
                bool _using = true)
            {
                base.Add(new SqlWhere(
                    columnBrackets: columnBrackets,
                    name: name,
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    sub: sub,
                    raw: raw,
                    or: or,
                    _using: _using));
                return this;
            }
        }

        public static DeptsGroupByCollection DeptsGroupBy()
        {
            return new DeptsGroupByCollection();
        }

        public class DeptsGroupByCollection : SqlGroupByCollection
        {
            public new DeptsGroupByCollection Add(
                params string[] columnBrackets)
            {
                columnBrackets.ForEach(columnBracket =>
                    base.Add(new SqlGroupBy(columnBracket)));
                return this;
            }
        }

        public static DeptsHavingCollection DeptsHaving()
        {
            return new DeptsHavingCollection();
        }

        public class DeptsHavingCollection : SqlHavingCollection
        {
            public DeptsHavingCollection Add(
                string columnBracket, string name, object value, string _operator)
            {
                base.Add(new SqlHaving(
                    columnBracket: columnBracket,
                    name: name,
                    value: value,
                    _operator: _operator));
                return this;
            }
        }

        public static DeptsOrderByCollection DeptsOrderBy()
        {
            return new DeptsOrderByCollection();
        }

        public class DeptsOrderByCollection : SqlOrderByCollection
        {
            public new DeptsOrderByCollection Add(
                SqlOrderBy.Types type = SqlOrderBy.Types.asc,
                params string[] columnBrackets)
            {
                columnBrackets.ForEach(columnBracket =>
                    base.Add(new SqlOrderBy(columnBracket, type)));
                return this;
            }
        }

        public static DeptsParamCollection DeptsParam()
        {
            return new DeptsParamCollection();
        }

        public class DeptsParamCollection : SqlParamCollection
        {
            public new DeptsParamCollection Add(
                string columnBracket = "",
                string name = "",
                object value = null,
                SqlStatement sub = null,
                string raw = null,
                bool _using = true)
            {
                base.Add(new SqlParam(columnBracket, name, value, sub, raw, _using));
                return this;
            }
        }

        public static string Depts_DeptId_WhereLike(string tableName = "t0") { return "([" + tableName + "].[DeptId] like '%' + @SearchText#ParamCount#_#CommandCount# + '%')"; }
        public static string Depts_DeptCode_WhereLike(string tableName = "t0") { return "([" + tableName + "].[DeptCode] like '%' + @SearchText#ParamCount#_#CommandCount# + '%')"; }
        public static string Depts_DeptName_WhereLike(string tableName = "t0") { return "([" + tableName + "].[DeptName] like '%' + @SearchText#ParamCount#_#CommandCount# + '%')"; }
        public static string Depts_Body_WhereLike(string tableName = "t0") { return "([" + tableName + "].[Body] like '%' + @SearchText#ParamCount#_#CommandCount# + '%')"; }
        public const string SqlWhereExists_Depts = "exists(select * from [Depts] where #SqlWhere#)";
        public const string SqlWhereNotExists_Depts = "not exists(select * from [Depts] where #SqlWhere#)";
        public static DeptsColumnCollection TenantId(this DeptsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[TenantId]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Depts_TenantId(this SqlColumnCollection self, string tableName = "Depts", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[TenantId]" + _as.ExistsTo(" as [{0}]")); }
        public static DeptsColumnCollection DeptId(this DeptsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[DeptId]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Depts_DeptId(this SqlColumnCollection self, string tableName = "Depts", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[DeptId]" + _as.ExistsTo(" as [{0}]")); }
        public static DeptsColumnCollection Ver(this DeptsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Ver]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Depts_Ver(this SqlColumnCollection self, string tableName = "Depts", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Ver]" + _as.ExistsTo(" as [{0}]")); }
        public static DeptsColumnCollection ParentDeptId(this DeptsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[ParentDeptId]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Depts_ParentDeptId(this SqlColumnCollection self, string tableName = "Depts", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[ParentDeptId]" + _as.ExistsTo(" as [{0}]")); }
        public static DeptsColumnCollection DeptCode(this DeptsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[DeptCode]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Depts_DeptCode(this SqlColumnCollection self, string tableName = "Depts", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[DeptCode]" + _as.ExistsTo(" as [{0}]")); }
        public static DeptsColumnCollection DeptName(this DeptsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[DeptName]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Depts_DeptName(this SqlColumnCollection self, string tableName = "Depts", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[DeptName]" + _as.ExistsTo(" as [{0}]")); }
        public static DeptsColumnCollection Body(this DeptsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Body]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Depts_Body(this SqlColumnCollection self, string tableName = "Depts", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Body]" + _as.ExistsTo(" as [{0}]")); }
        public static DeptsColumnCollection Comments(this DeptsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Comments]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Depts_Comments(this SqlColumnCollection self, string tableName = "Depts", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Comments]" + _as.ExistsTo(" as [{0}]")); }
        public static DeptsColumnCollection Creator(this DeptsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Creator]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Depts_Creator(this SqlColumnCollection self, string tableName = "Depts", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Creator]" + _as.ExistsTo(" as [{0}]")); }
        public static DeptsColumnCollection Updator(this DeptsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Updator]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Depts_Updator(this SqlColumnCollection self, string tableName = "Depts", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Updator]" + _as.ExistsTo(" as [{0}]")); }
        public static DeptsColumnCollection CreatedTime(this DeptsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[CreatedTime]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Depts_CreatedTime(this SqlColumnCollection self, string tableName = "Depts", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[CreatedTime]" + _as.ExistsTo(" as [{0}]")); }
        public static DeptsColumnCollection UpdatedTime(this DeptsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[UpdatedTime]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Depts_UpdatedTime(this SqlColumnCollection self, string tableName = "Depts", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[UpdatedTime]" + _as.ExistsTo(" as [{0}]")); }
        public static DeptsColumnCollection ParentDept(this DeptsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "[t0].[ParentDeptId] as [ParentDept]"); }
        public static SqlColumnCollection Depts_ParentDept(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "[t0].[ParentDeptId] as [ParentDept]"); }
        public static DeptsColumnCollection Dept(this DeptsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "[t0].[DeptId] as [Dept]"); }
        public static SqlColumnCollection Depts_Dept(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "[t0].[DeptId] as [Dept]"); }
        public static DeptsColumnCollection DeptsCount(this DeptsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "count(*) as DeptsCount"); }
        public static DeptsColumnCollection CreatedTimeMax(this DeptsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[CreatedTime]) as [CreatedTimeMax]"); }
        public static SqlColumnCollection Depts_CreatedTimeMax(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[CreatedTime]) as [CreatedTimeMax]"); }
        public static DeptsColumnCollection CreatedTimeMin(this DeptsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[CreatedTime]) as [CreatedTimeMin]"); }
        public static SqlColumnCollection Depts_CreatedTimeMin(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[CreatedTime]) as [CreatedTimeMin]"); }
        public static DeptsColumnCollection UpdatedTimeMax(this DeptsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[UpdatedTime]) as [UpdatedTimeMax]"); }
        public static SqlColumnCollection Depts_UpdatedTimeMax(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[UpdatedTime]) as [UpdatedTimeMax]"); }
        public static DeptsColumnCollection UpdatedTimeMin(this DeptsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[UpdatedTime]) as [UpdatedTimeMin]"); }
        public static SqlColumnCollection Depts_UpdatedTimeMin(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[UpdatedTime]) as [UpdatedTimeMin]"); }
        public static DeptsWhereCollection TenantId(this DeptsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[TenantId]" }, "TenantId", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Depts_TenantId(this SqlWhereCollection self, object value = null, string tableName = "Depts", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[TenantId]" }, "TenantId", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static DeptsWhereCollection DeptId(this DeptsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[DeptId]" }, "DeptId", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Depts_DeptId(this SqlWhereCollection self, object value = null, string tableName = "Depts", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[DeptId]" }, "DeptId", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static DeptsWhereCollection Ver(this DeptsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Ver]" }, "Ver", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Depts_Ver(this SqlWhereCollection self, object value = null, string tableName = "Depts", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Ver]" }, "Ver", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static DeptsWhereCollection ParentDeptId(this DeptsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[ParentDeptId]" }, "ParentDeptId", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Depts_ParentDeptId(this SqlWhereCollection self, object value = null, string tableName = "Depts", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[ParentDeptId]" }, "ParentDeptId", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static DeptsWhereCollection DeptCode(this DeptsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[DeptCode]" }, "DeptCode", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Depts_DeptCode(this SqlWhereCollection self, object value = null, string tableName = "Depts", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[DeptCode]" }, "DeptCode", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static DeptsWhereCollection DeptName(this DeptsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[DeptName]" }, "DeptName", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Depts_DeptName(this SqlWhereCollection self, object value = null, string tableName = "Depts", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[DeptName]" }, "DeptName", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static DeptsWhereCollection Body(this DeptsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Body]" }, "Body", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Depts_Body(this SqlWhereCollection self, object value = null, string tableName = "Depts", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Body]" }, "Body", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static DeptsWhereCollection Comments(this DeptsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Comments]" }, "Comments", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Depts_Comments(this SqlWhereCollection self, object value = null, string tableName = "Depts", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Comments]" }, "Comments", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static DeptsWhereCollection Creator(this DeptsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Creator]" }, "Creator", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Depts_Creator(this SqlWhereCollection self, object value = null, string tableName = "Depts", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Creator]" }, "Creator", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static DeptsWhereCollection Updator(this DeptsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Updator]" }, "Updator", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Depts_Updator(this SqlWhereCollection self, object value = null, string tableName = "Depts", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Updator]" }, "Updator", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static DeptsWhereCollection CreatedTime(this DeptsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[CreatedTime]" }, "CreatedTime", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Depts_CreatedTime(this SqlWhereCollection self, object value = null, string tableName = "Depts", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[CreatedTime]" }, "CreatedTime", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static DeptsWhereCollection UpdatedTime(this DeptsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[UpdatedTime]" }, "UpdatedTime", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Depts_UpdatedTime(this SqlWhereCollection self, object value = null, string tableName = "Depts", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[UpdatedTime]" }, "UpdatedTime", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static DeptsWhereCollection ParentDept(this DeptsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[ParentDeptId]" }, "ParentDept", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Depts_ParentDept(this SqlWhereCollection self, object value = null, string tableName = "Depts", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[ParentDeptId]" }, "ParentDept", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static DeptsWhereCollection Dept(this DeptsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[DeptId]" }, "Dept", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Depts_Dept(this SqlWhereCollection self, object value = null, string tableName = "Depts", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[DeptId]" }, "Dept", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static DeptsWhereCollection TenantId_In(this DeptsWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[TenantId]" }, "TenantId", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Depts_TenantId_In(this SqlWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[TenantId]" }, "TenantId", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static DeptsWhereCollection DeptId_In(this DeptsWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[DeptId]" }, "DeptId", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Depts_DeptId_In(this SqlWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[DeptId]" }, "DeptId", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static DeptsWhereCollection Ver_In(this DeptsWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Ver]" }, "Ver", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Depts_Ver_In(this SqlWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Ver]" }, "Ver", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static DeptsWhereCollection ParentDeptId_In(this DeptsWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[ParentDeptId]" }, "ParentDeptId", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Depts_ParentDeptId_In(this SqlWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[ParentDeptId]" }, "ParentDeptId", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static DeptsWhereCollection Creator_In(this DeptsWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Creator]" }, "Creator", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Depts_Creator_In(this SqlWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Creator]" }, "Creator", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static DeptsWhereCollection Updator_In(this DeptsWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Updator]" }, "Updator", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Depts_Updator_In(this SqlWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Updator]" }, "Updator", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static DeptsWhereCollection TenantId_Between(this DeptsWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[TenantId]" }, "TenantId", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Depts_TenantId_Between(this SqlWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[TenantId]" }, "TenantId", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static DeptsWhereCollection DeptId_Between(this DeptsWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[DeptId]" }, "DeptId", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Depts_DeptId_Between(this SqlWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[DeptId]" }, "DeptId", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static DeptsWhereCollection Ver_Between(this DeptsWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Ver]" }, "Ver", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Depts_Ver_Between(this SqlWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Ver]" }, "Ver", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static DeptsWhereCollection ParentDeptId_Between(this DeptsWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[ParentDeptId]" }, "ParentDeptId", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Depts_ParentDeptId_Between(this SqlWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[ParentDeptId]" }, "ParentDeptId", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static DeptsWhereCollection Creator_Between(this DeptsWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Creator]" }, "Creator", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Depts_Creator_Between(this SqlWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Creator]" }, "Creator", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static DeptsWhereCollection Updator_Between(this DeptsWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Updator]" }, "Updator", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Depts_Updator_Between(this SqlWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Updator]" }, "Updator", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static DeptsWhereCollection CreatedTime_Between(this DeptsWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[CreatedTime]" }, "CreatedTime", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Depts_CreatedTime_Between(this SqlWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[CreatedTime]" }, "CreatedTime", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static DeptsWhereCollection UpdatedTime_Between(this DeptsWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[UpdatedTime]" }, "UpdatedTime", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Depts_UpdatedTime_Between(this SqlWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[UpdatedTime]" }, "UpdatedTime", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static DeptsWhereCollection Sub(this DeptsWhereCollection self, SqlStatement sub, object value = null, string _operator = "=", bool _using = true) { return self.Add(null, null, value, _operator, sub: sub, _using: _using); }
        public static DeptsWhereCollection Or(this DeptsWhereCollection self, SqlWhereCollection or, bool _using = true) { return self.Add(null, null, or: or, _using: _using); }
        public static DeptsGroupByCollection TenantId(this DeptsGroupByCollection self) { return self.Add("[t0].[TenantId]"); }
        public static SqlGroupByCollection Depts_TenantId(this SqlGroupByCollection self) { return self.Add("[t0].[TenantId]"); }
        public static DeptsGroupByCollection DeptId(this DeptsGroupByCollection self) { return self.Add("[t0].[DeptId]"); }
        public static SqlGroupByCollection Depts_DeptId(this SqlGroupByCollection self) { return self.Add("[t0].[DeptId]"); }
        public static DeptsGroupByCollection Ver(this DeptsGroupByCollection self) { return self.Add("[t0].[Ver]"); }
        public static SqlGroupByCollection Depts_Ver(this SqlGroupByCollection self) { return self.Add("[t0].[Ver]"); }
        public static DeptsGroupByCollection ParentDeptId(this DeptsGroupByCollection self) { return self.Add("[t0].[ParentDeptId]"); }
        public static SqlGroupByCollection Depts_ParentDeptId(this SqlGroupByCollection self) { return self.Add("[t0].[ParentDeptId]"); }
        public static DeptsGroupByCollection ParentDept(this DeptsGroupByCollection self) { return self.Add("[t0].[ParentDeptId]"); }
        public static SqlGroupByCollection Depts_ParentDept(this SqlGroupByCollection self) { return self.Add("[t0].[ParentDeptId]"); }
        public static DeptsGroupByCollection DeptCode(this DeptsGroupByCollection self) { return self.Add("[t0].[DeptCode]"); }
        public static SqlGroupByCollection Depts_DeptCode(this SqlGroupByCollection self) { return self.Add("[t0].[DeptCode]"); }
        public static DeptsGroupByCollection Dept(this DeptsGroupByCollection self) { return self.Add("[t0].[DeptId]"); }
        public static SqlGroupByCollection Depts_Dept(this SqlGroupByCollection self) { return self.Add("[t0].[DeptId]"); }
        public static DeptsGroupByCollection DeptName(this DeptsGroupByCollection self) { return self.Add("[t0].[DeptName]"); }
        public static SqlGroupByCollection Depts_DeptName(this SqlGroupByCollection self) { return self.Add("[t0].[DeptName]"); }
        public static DeptsGroupByCollection Body(this DeptsGroupByCollection self) { return self.Add("[t0].[Body]"); }
        public static SqlGroupByCollection Depts_Body(this SqlGroupByCollection self) { return self.Add("[t0].[Body]"); }
        public static DeptsGroupByCollection Comments(this DeptsGroupByCollection self) { return self.Add("[t0].[Comments]"); }
        public static SqlGroupByCollection Depts_Comments(this SqlGroupByCollection self) { return self.Add("[t0].[Comments]"); }
        public static DeptsGroupByCollection Creator(this DeptsGroupByCollection self) { return self.Add("[t0].[Creator]"); }
        public static SqlGroupByCollection Depts_Creator(this SqlGroupByCollection self) { return self.Add("[t0].[Creator]"); }
        public static DeptsGroupByCollection Updator(this DeptsGroupByCollection self) { return self.Add("[t0].[Updator]"); }
        public static SqlGroupByCollection Depts_Updator(this SqlGroupByCollection self) { return self.Add("[t0].[Updator]"); }
        public static DeptsGroupByCollection CreatedTime(this DeptsGroupByCollection self) { return self.Add("[t0].[CreatedTime]"); }
        public static SqlGroupByCollection Depts_CreatedTime(this SqlGroupByCollection self) { return self.Add("[t0].[CreatedTime]"); }
        public static DeptsGroupByCollection UpdatedTime(this DeptsGroupByCollection self) { return self.Add("[t0].[UpdatedTime]"); }
        public static SqlGroupByCollection Depts_UpdatedTime(this SqlGroupByCollection self) { return self.Add("[t0].[UpdatedTime]"); }
        public static DeptsHavingCollection DeptsCount(this DeptsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "count(*)", name: "DeptsCount", value: value, _operator: _operator); }
        public static DeptsHavingCollection CreatedTimeMax(this DeptsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[CreatedTime])", name: "CreatedTimeMax", value: value, _operator: _operator); }
        public static SqlHavingCollection Depts_CreatedTimeMax(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[CreatedTime])", name: "CreatedTimeMax", value: value, _operator: _operator); }
        public static DeptsHavingCollection CreatedTimeMin(this DeptsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[CreatedTime])", name: "CreatedTimeMin", value: value, _operator: _operator); }
        public static SqlHavingCollection Depts_CreatedTimeMin(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[CreatedTime])", name: "CreatedTimeMin", value: value, _operator: _operator); }
        public static DeptsHavingCollection UpdatedTimeMax(this DeptsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[UpdatedTime])", name: "UpdatedTimeMax", value: value, _operator: _operator); }
        public static SqlHavingCollection Depts_UpdatedTimeMax(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[UpdatedTime])", name: "UpdatedTimeMax", value: value, _operator: _operator); }
        public static DeptsHavingCollection UpdatedTimeMin(this DeptsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[UpdatedTime])", name: "UpdatedTimeMin", value: value, _operator: _operator); }
        public static SqlHavingCollection Depts_UpdatedTimeMin(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[UpdatedTime])", name: "UpdatedTimeMin", value: value, _operator: _operator); }
        public static DeptsOrderByCollection TenantId(this DeptsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[TenantId]"); }
        public static DeptsOrderByCollection DeptId(this DeptsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[DeptId]"); }
        public static DeptsOrderByCollection Ver(this DeptsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Ver]"); }
        public static DeptsOrderByCollection ParentDeptId(this DeptsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[ParentDeptId]"); }
        public static DeptsOrderByCollection ParentDept(this DeptsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[ParentDeptId]"); }
        public static DeptsOrderByCollection DeptCode(this DeptsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[DeptCode]"); }
        public static DeptsOrderByCollection Dept(this DeptsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[DeptId]"); }
        public static DeptsOrderByCollection DeptName(this DeptsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[DeptName]"); }
        public static DeptsOrderByCollection Body(this DeptsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Body]"); }
        public static DeptsOrderByCollection Comments(this DeptsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Comments]"); }
        public static DeptsOrderByCollection Creator(this DeptsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Creator]"); }
        public static DeptsOrderByCollection Updator(this DeptsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Updator]"); }
        public static DeptsOrderByCollection CreatedTime(this DeptsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[CreatedTime]"); }
        public static DeptsOrderByCollection UpdatedTime(this DeptsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[UpdatedTime]"); }
        public static SqlOrderByCollection Depts_TenantId(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[TenantId]"); }
        public static SqlOrderByCollection Depts_DeptId(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[DeptId]"); }
        public static SqlOrderByCollection Depts_Ver(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Ver]"); }
        public static SqlOrderByCollection Depts_ParentDeptId(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[ParentDeptId]"); }
        public static SqlOrderByCollection Depts_ParentDept(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[ParentDeptId]"); }
        public static SqlOrderByCollection Depts_DeptCode(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[DeptCode]"); }
        public static SqlOrderByCollection Depts_Dept(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[DeptId]"); }
        public static SqlOrderByCollection Depts_DeptName(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[DeptName]"); }
        public static SqlOrderByCollection Depts_Body(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Body]"); }
        public static SqlOrderByCollection Depts_Comments(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Comments]"); }
        public static SqlOrderByCollection Depts_Creator(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Creator]"); }
        public static SqlOrderByCollection Depts_Updator(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Updator]"); }
        public static SqlOrderByCollection Depts_CreatedTime(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[CreatedTime]"); }
        public static SqlOrderByCollection Depts_UpdatedTime(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[UpdatedTime]"); }
        public static DeptsOrderByCollection DeptsCount(this DeptsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "count(*)"); }
        public static DeptsOrderByCollection CreatedTimeMax(this DeptsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[CreatedTime])"); }
        public static SqlOrderByCollection Depts_CreatedTimeMax(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[CreatedTime])"); }
        public static DeptsOrderByCollection CreatedTimeMin(this DeptsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[CreatedTime])"); }
        public static SqlOrderByCollection Depts_CreatedTimeMin(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[CreatedTime])"); }
        public static DeptsOrderByCollection UpdatedTimeMax(this DeptsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[UpdatedTime])"); }
        public static SqlOrderByCollection Depts_UpdatedTimeMax(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[UpdatedTime])"); }
        public static DeptsOrderByCollection UpdatedTimeMin(this DeptsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[UpdatedTime])"); }
        public static SqlOrderByCollection Depts_UpdatedTimeMin(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[UpdatedTime])"); }
        public static DeptsParamCollection TenantId(this DeptsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[TenantId]", "TenantId", value, sub, raw, _using); }
        public static SqlParamCollection Depts_TenantId(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[TenantId]", "TenantId", value, sub, raw, _using); }
        public static DeptsParamCollection DeptId(this DeptsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DeptId]", "DeptId", value, sub, raw, _using); }
        public static SqlParamCollection Depts_DeptId(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DeptId]", "DeptId", value, sub, raw, _using); }
        public static DeptsParamCollection Ver(this DeptsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Ver]", "Ver", value, sub, raw, _using); }
        public static SqlParamCollection Depts_Ver(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Ver]", "Ver", value, sub, raw, _using); }
        public static DeptsParamCollection ParentDeptId(this DeptsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ParentDeptId]", "ParentDeptId", value, sub, raw, _using); }
        public static SqlParamCollection Depts_ParentDeptId(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ParentDeptId]", "ParentDeptId", value, sub, raw, _using); }
        public static DeptsParamCollection DeptCode(this DeptsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DeptCode]", "DeptCode", value, sub, raw, _using); }
        public static SqlParamCollection Depts_DeptCode(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DeptCode]", "DeptCode", value, sub, raw, _using); }
        public static DeptsParamCollection DeptName(this DeptsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DeptName]", "DeptName", value, sub, raw, _using); }
        public static SqlParamCollection Depts_DeptName(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DeptName]", "DeptName", value, sub, raw, _using); }
        public static DeptsParamCollection Body(this DeptsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Body]", "Body", value, sub, raw, _using); }
        public static SqlParamCollection Depts_Body(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Body]", "Body", value, sub, raw, _using); }
        public static DeptsParamCollection Comments(this DeptsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Comments]", "Comments", value, sub, raw, _using); }
        public static SqlParamCollection Depts_Comments(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Comments]", "Comments", value, sub, raw, _using); }
        public static DeptsParamCollection Creator(this DeptsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Creator]", "Creator", value, sub, raw, _using); }
        public static SqlParamCollection Depts_Creator(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Creator]", "Creator", value, sub, raw, _using); }
        public static DeptsParamCollection Updator(this DeptsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Updator]", "Updator", value, sub, raw, _using); }
        public static SqlParamCollection Depts_Updator(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Updator]", "Updator", value, sub, raw, _using); }
        public static DeptsParamCollection CreatedTime(this DeptsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CreatedTime]", "CreatedTime", value, sub, raw, _using); }
        public static SqlParamCollection Depts_CreatedTime(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CreatedTime]", "CreatedTime", value, sub, raw, _using); }
        public static DeptsParamCollection UpdatedTime(this DeptsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[UpdatedTime]", "UpdatedTime", value, sub, raw, _using); }
        public static SqlParamCollection Depts_UpdatedTime(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[UpdatedTime]", "UpdatedTime", value, sub, raw, _using); }

        public static UsersColumnCollection UsersColumn()
        {
            return new UsersColumnCollection();
        }

        public class UsersColumnCollection : SqlColumnCollection
        {
            public UsersColumnCollection Add(params string[] columnBrackets)
            {
                base.Add(false, columnBrackets);
                return this;
            }

            public new UsersColumnCollection Add(bool duplicates = false, params string[] columnBrackets)
            {
                base.Add(duplicates, columnBrackets);
                return this;
            }
        }

        public static UsersJoinCollection UsersJoin()
        {
            return new UsersJoinCollection();
        }

        public class UsersJoinCollection : SqlJoinCollection
        {
            public new UsersJoinCollection Add(params string[] columnBrackets)
            {
                columnBrackets.ForEach(columnBracket => base.Add(new SqlJoin(columnBracket)));
                return this;
            }
        }

        public static UsersWhereCollection UsersWhere()
        {
            return new UsersWhereCollection();
        }

        public class UsersWhereCollection : SqlWhereCollection
        {
            public new UsersWhereCollection Add(
                string[] columnBrackets = null,
                string name = "",
                object value = null,
                string _operator = "=",
                string multiColumnOperator = " or ",
                string multiParamOperator = " and ",
                SqlStatement sub = null,
                string raw = "",
                SqlWhereCollection or = null,
                bool _using = true)
            {
                base.Add(new SqlWhere(
                    columnBrackets: columnBrackets,
                    name: name,
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    sub: sub,
                    raw: raw,
                    or: or,
                    _using: _using));
                return this;
            }
        }

        public static UsersGroupByCollection UsersGroupBy()
        {
            return new UsersGroupByCollection();
        }

        public class UsersGroupByCollection : SqlGroupByCollection
        {
            public new UsersGroupByCollection Add(
                params string[] columnBrackets)
            {
                columnBrackets.ForEach(columnBracket =>
                    base.Add(new SqlGroupBy(columnBracket)));
                return this;
            }
        }

        public static UsersHavingCollection UsersHaving()
        {
            return new UsersHavingCollection();
        }

        public class UsersHavingCollection : SqlHavingCollection
        {
            public UsersHavingCollection Add(
                string columnBracket, string name, object value, string _operator)
            {
                base.Add(new SqlHaving(
                    columnBracket: columnBracket,
                    name: name,
                    value: value,
                    _operator: _operator));
                return this;
            }
        }

        public static UsersOrderByCollection UsersOrderBy()
        {
            return new UsersOrderByCollection();
        }

        public class UsersOrderByCollection : SqlOrderByCollection
        {
            public new UsersOrderByCollection Add(
                SqlOrderBy.Types type = SqlOrderBy.Types.asc,
                params string[] columnBrackets)
            {
                columnBrackets.ForEach(columnBracket =>
                    base.Add(new SqlOrderBy(columnBracket, type)));
                return this;
            }
        }

        public static UsersParamCollection UsersParam()
        {
            return new UsersParamCollection();
        }

        public class UsersParamCollection : SqlParamCollection
        {
            public new UsersParamCollection Add(
                string columnBracket = "",
                string name = "",
                object value = null,
                SqlStatement sub = null,
                string raw = null,
                bool _using = true)
            {
                base.Add(new SqlParam(columnBracket, name, value, sub, raw, _using));
                return this;
            }
        }

        public static string Users_UserId_WhereLike(string tableName = "t0") { return "([" + tableName + "].[UserId] like '%' + @SearchText#ParamCount#_#CommandCount# + '%')"; }
        public static string Users_LoginId_WhereLike(string tableName = "t0") { return "([" + tableName + "].[LoginId] like '%' + @SearchText#ParamCount#_#CommandCount# + '%')"; }
        public static string Users_LastName_WhereLike(string tableName = "t0") { return "([" + tableName + "].[LastName] like '%' + @SearchText#ParamCount#_#CommandCount# + '%')"; }
        public static string Users_FirstName_WhereLike(string tableName = "t0") { return "([" + tableName + "].[FirstName] like '%' + @SearchText#ParamCount#_#CommandCount# + '%')"; }
        public const string SqlWhereExists_Users = "exists(select * from [Users] where #SqlWhere#)";
        public const string SqlWhereNotExists_Users = "not exists(select * from [Users] where #SqlWhere#)";
        public static UsersColumnCollection TenantId(this UsersColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[TenantId]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Users_TenantId(this SqlColumnCollection self, string tableName = "Users", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[TenantId]" + _as.ExistsTo(" as [{0}]")); }
        public static UsersColumnCollection UserId(this UsersColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[UserId]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Users_UserId(this SqlColumnCollection self, string tableName = "Users", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[UserId]" + _as.ExistsTo(" as [{0}]")); }
        public static UsersColumnCollection Ver(this UsersColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Ver]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Users_Ver(this SqlColumnCollection self, string tableName = "Users", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Ver]" + _as.ExistsTo(" as [{0}]")); }
        public static UsersColumnCollection LoginId(this UsersColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[LoginId]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Users_LoginId(this SqlColumnCollection self, string tableName = "Users", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[LoginId]" + _as.ExistsTo(" as [{0}]")); }
        public static UsersColumnCollection Disabled(this UsersColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Disabled]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Users_Disabled(this SqlColumnCollection self, string tableName = "Users", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Disabled]" + _as.ExistsTo(" as [{0}]")); }
        public static UsersColumnCollection UserCode(this UsersColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[UserCode]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Users_UserCode(this SqlColumnCollection self, string tableName = "Users", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[UserCode]" + _as.ExistsTo(" as [{0}]")); }
        public static UsersColumnCollection Password(this UsersColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Password]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Users_Password(this SqlColumnCollection self, string tableName = "Users", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Password]" + _as.ExistsTo(" as [{0}]")); }
        public static UsersColumnCollection LastName(this UsersColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[LastName]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Users_LastName(this SqlColumnCollection self, string tableName = "Users", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[LastName]" + _as.ExistsTo(" as [{0}]")); }
        public static UsersColumnCollection FirstName(this UsersColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[FirstName]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Users_FirstName(this SqlColumnCollection self, string tableName = "Users", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[FirstName]" + _as.ExistsTo(" as [{0}]")); }
        public static UsersColumnCollection Birthday(this UsersColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Birthday]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Users_Birthday(this SqlColumnCollection self, string tableName = "Users", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Birthday]" + _as.ExistsTo(" as [{0}]")); }
        public static UsersColumnCollection Sex(this UsersColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Sex]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Users_Sex(this SqlColumnCollection self, string tableName = "Users", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Sex]" + _as.ExistsTo(" as [{0}]")); }
        public static UsersColumnCollection Language(this UsersColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Language]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Users_Language(this SqlColumnCollection self, string tableName = "Users", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Language]" + _as.ExistsTo(" as [{0}]")); }
        public static UsersColumnCollection TimeZone(this UsersColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[TimeZone]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Users_TimeZone(this SqlColumnCollection self, string tableName = "Users", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[TimeZone]" + _as.ExistsTo(" as [{0}]")); }
        public static UsersColumnCollection DeptId(this UsersColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[DeptId]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Users_DeptId(this SqlColumnCollection self, string tableName = "Users", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[DeptId]" + _as.ExistsTo(" as [{0}]")); }
        public static UsersColumnCollection FirstAndLastNameOrder(this UsersColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[FirstAndLastNameOrder]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Users_FirstAndLastNameOrder(this SqlColumnCollection self, string tableName = "Users", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[FirstAndLastNameOrder]" + _as.ExistsTo(" as [{0}]")); }
        public static UsersColumnCollection LastLoginTime(this UsersColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[LastLoginTime]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Users_LastLoginTime(this SqlColumnCollection self, string tableName = "Users", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[LastLoginTime]" + _as.ExistsTo(" as [{0}]")); }
        public static UsersColumnCollection PasswordExpirationTime(this UsersColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[PasswordExpirationTime]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Users_PasswordExpirationTime(this SqlColumnCollection self, string tableName = "Users", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[PasswordExpirationTime]" + _as.ExistsTo(" as [{0}]")); }
        public static UsersColumnCollection PasswordChangeTime(this UsersColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[PasswordChangeTime]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Users_PasswordChangeTime(this SqlColumnCollection self, string tableName = "Users", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[PasswordChangeTime]" + _as.ExistsTo(" as [{0}]")); }
        public static UsersColumnCollection NumberOfLogins(this UsersColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[NumberOfLogins]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Users_NumberOfLogins(this SqlColumnCollection self, string tableName = "Users", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[NumberOfLogins]" + _as.ExistsTo(" as [{0}]")); }
        public static UsersColumnCollection NumberOfDenial(this UsersColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[NumberOfDenial]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Users_NumberOfDenial(this SqlColumnCollection self, string tableName = "Users", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[NumberOfDenial]" + _as.ExistsTo(" as [{0}]")); }
        public static UsersColumnCollection TenantAdmin(this UsersColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[TenantAdmin]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Users_TenantAdmin(this SqlColumnCollection self, string tableName = "Users", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[TenantAdmin]" + _as.ExistsTo(" as [{0}]")); }
        public static UsersColumnCollection ServiceAdmin(this UsersColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[ServiceAdmin]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Users_ServiceAdmin(this SqlColumnCollection self, string tableName = "Users", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[ServiceAdmin]" + _as.ExistsTo(" as [{0}]")); }
        public static UsersColumnCollection Developer(this UsersColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Developer]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Users_Developer(this SqlColumnCollection self, string tableName = "Users", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Developer]" + _as.ExistsTo(" as [{0}]")); }
        public static UsersColumnCollection Comments(this UsersColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Comments]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Users_Comments(this SqlColumnCollection self, string tableName = "Users", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Comments]" + _as.ExistsTo(" as [{0}]")); }
        public static UsersColumnCollection Creator(this UsersColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Creator]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Users_Creator(this SqlColumnCollection self, string tableName = "Users", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Creator]" + _as.ExistsTo(" as [{0}]")); }
        public static UsersColumnCollection Updator(this UsersColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Updator]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Users_Updator(this SqlColumnCollection self, string tableName = "Users", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Updator]" + _as.ExistsTo(" as [{0}]")); }
        public static UsersColumnCollection CreatedTime(this UsersColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[CreatedTime]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Users_CreatedTime(this SqlColumnCollection self, string tableName = "Users", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[CreatedTime]" + _as.ExistsTo(" as [{0}]")); }
        public static UsersColumnCollection UpdatedTime(this UsersColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[UpdatedTime]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Users_UpdatedTime(this SqlColumnCollection self, string tableName = "Users", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[UpdatedTime]" + _as.ExistsTo(" as [{0}]")); }
        public static UsersColumnCollection Dept(this UsersColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "[t0].[DeptId] as [Dept]"); }
        public static SqlColumnCollection Users_Dept(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "[t0].[DeptId] as [Dept]"); }
        public static UsersColumnCollection UsersCount(this UsersColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "count(*) as UsersCount"); }
        public static UsersColumnCollection CreatedTimeMax(this UsersColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[CreatedTime]) as [CreatedTimeMax]"); }
        public static SqlColumnCollection Users_CreatedTimeMax(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[CreatedTime]) as [CreatedTimeMax]"); }
        public static UsersColumnCollection CreatedTimeMin(this UsersColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[CreatedTime]) as [CreatedTimeMin]"); }
        public static SqlColumnCollection Users_CreatedTimeMin(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[CreatedTime]) as [CreatedTimeMin]"); }
        public static UsersColumnCollection UpdatedTimeMax(this UsersColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[UpdatedTime]) as [UpdatedTimeMax]"); }
        public static SqlColumnCollection Users_UpdatedTimeMax(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[UpdatedTime]) as [UpdatedTimeMax]"); }
        public static UsersColumnCollection UpdatedTimeMin(this UsersColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[UpdatedTime]) as [UpdatedTimeMin]"); }
        public static SqlColumnCollection Users_UpdatedTimeMin(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[UpdatedTime]) as [UpdatedTimeMin]"); }
        public static UsersWhereCollection TenantId(this UsersWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[TenantId]" }, "TenantId", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Users_TenantId(this SqlWhereCollection self, object value = null, string tableName = "Users", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[TenantId]" }, "TenantId", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static UsersWhereCollection UserId(this UsersWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[UserId]" }, "UserId", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Users_UserId(this SqlWhereCollection self, object value = null, string tableName = "Users", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[UserId]" }, "UserId", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static UsersWhereCollection Ver(this UsersWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Ver]" }, "Ver", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Users_Ver(this SqlWhereCollection self, object value = null, string tableName = "Users", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Ver]" }, "Ver", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static UsersWhereCollection LoginId(this UsersWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[LoginId]" }, "LoginId", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Users_LoginId(this SqlWhereCollection self, object value = null, string tableName = "Users", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[LoginId]" }, "LoginId", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static UsersWhereCollection Disabled(this UsersWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Disabled]" }, "Disabled", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Users_Disabled(this SqlWhereCollection self, object value = null, string tableName = "Users", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Disabled]" }, "Disabled", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static UsersWhereCollection UserCode(this UsersWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[UserCode]" }, "UserCode", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Users_UserCode(this SqlWhereCollection self, object value = null, string tableName = "Users", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[UserCode]" }, "UserCode", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static UsersWhereCollection Password(this UsersWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Password]" }, "Password", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Users_Password(this SqlWhereCollection self, object value = null, string tableName = "Users", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Password]" }, "Password", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static UsersWhereCollection LastName(this UsersWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[LastName]" }, "LastName", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Users_LastName(this SqlWhereCollection self, object value = null, string tableName = "Users", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[LastName]" }, "LastName", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static UsersWhereCollection FirstName(this UsersWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[FirstName]" }, "FirstName", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Users_FirstName(this SqlWhereCollection self, object value = null, string tableName = "Users", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[FirstName]" }, "FirstName", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static UsersWhereCollection Birthday(this UsersWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Birthday]" }, "Birthday", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Users_Birthday(this SqlWhereCollection self, object value = null, string tableName = "Users", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Birthday]" }, "Birthday", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static UsersWhereCollection Sex(this UsersWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Sex]" }, "Sex", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Users_Sex(this SqlWhereCollection self, object value = null, string tableName = "Users", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Sex]" }, "Sex", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static UsersWhereCollection Language(this UsersWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Language]" }, "Language", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Users_Language(this SqlWhereCollection self, object value = null, string tableName = "Users", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Language]" }, "Language", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static UsersWhereCollection TimeZone(this UsersWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[TimeZone]" }, "TimeZone", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Users_TimeZone(this SqlWhereCollection self, object value = null, string tableName = "Users", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[TimeZone]" }, "TimeZone", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static UsersWhereCollection DeptId(this UsersWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[DeptId]" }, "DeptId", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Users_DeptId(this SqlWhereCollection self, object value = null, string tableName = "Users", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[DeptId]" }, "DeptId", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static UsersWhereCollection FirstAndLastNameOrder(this UsersWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[FirstAndLastNameOrder]" }, "FirstAndLastNameOrder", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Users_FirstAndLastNameOrder(this SqlWhereCollection self, object value = null, string tableName = "Users", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[FirstAndLastNameOrder]" }, "FirstAndLastNameOrder", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static UsersWhereCollection LastLoginTime(this UsersWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[LastLoginTime]" }, "LastLoginTime", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Users_LastLoginTime(this SqlWhereCollection self, object value = null, string tableName = "Users", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[LastLoginTime]" }, "LastLoginTime", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static UsersWhereCollection PasswordExpirationTime(this UsersWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[PasswordExpirationTime]" }, "PasswordExpirationTime", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Users_PasswordExpirationTime(this SqlWhereCollection self, object value = null, string tableName = "Users", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[PasswordExpirationTime]" }, "PasswordExpirationTime", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static UsersWhereCollection PasswordChangeTime(this UsersWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[PasswordChangeTime]" }, "PasswordChangeTime", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Users_PasswordChangeTime(this SqlWhereCollection self, object value = null, string tableName = "Users", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[PasswordChangeTime]" }, "PasswordChangeTime", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static UsersWhereCollection NumberOfLogins(this UsersWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[NumberOfLogins]" }, "NumberOfLogins", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Users_NumberOfLogins(this SqlWhereCollection self, object value = null, string tableName = "Users", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[NumberOfLogins]" }, "NumberOfLogins", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static UsersWhereCollection NumberOfDenial(this UsersWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[NumberOfDenial]" }, "NumberOfDenial", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Users_NumberOfDenial(this SqlWhereCollection self, object value = null, string tableName = "Users", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[NumberOfDenial]" }, "NumberOfDenial", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static UsersWhereCollection TenantAdmin(this UsersWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[TenantAdmin]" }, "TenantAdmin", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Users_TenantAdmin(this SqlWhereCollection self, object value = null, string tableName = "Users", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[TenantAdmin]" }, "TenantAdmin", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static UsersWhereCollection ServiceAdmin(this UsersWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[ServiceAdmin]" }, "ServiceAdmin", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Users_ServiceAdmin(this SqlWhereCollection self, object value = null, string tableName = "Users", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[ServiceAdmin]" }, "ServiceAdmin", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static UsersWhereCollection Developer(this UsersWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Developer]" }, "Developer", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Users_Developer(this SqlWhereCollection self, object value = null, string tableName = "Users", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Developer]" }, "Developer", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static UsersWhereCollection Comments(this UsersWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Comments]" }, "Comments", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Users_Comments(this SqlWhereCollection self, object value = null, string tableName = "Users", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Comments]" }, "Comments", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static UsersWhereCollection Creator(this UsersWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Creator]" }, "Creator", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Users_Creator(this SqlWhereCollection self, object value = null, string tableName = "Users", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Creator]" }, "Creator", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static UsersWhereCollection Updator(this UsersWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Updator]" }, "Updator", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Users_Updator(this SqlWhereCollection self, object value = null, string tableName = "Users", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Updator]" }, "Updator", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static UsersWhereCollection CreatedTime(this UsersWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[CreatedTime]" }, "CreatedTime", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Users_CreatedTime(this SqlWhereCollection self, object value = null, string tableName = "Users", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[CreatedTime]" }, "CreatedTime", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static UsersWhereCollection UpdatedTime(this UsersWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[UpdatedTime]" }, "UpdatedTime", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Users_UpdatedTime(this SqlWhereCollection self, object value = null, string tableName = "Users", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[UpdatedTime]" }, "UpdatedTime", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static UsersWhereCollection Dept(this UsersWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[DeptId]" }, "Dept", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Users_Dept(this SqlWhereCollection self, object value = null, string tableName = "Users", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[DeptId]" }, "Dept", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static UsersWhereCollection TenantId_In(this UsersWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[TenantId]" }, "TenantId", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Users_TenantId_In(this SqlWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[TenantId]" }, "TenantId", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static UsersWhereCollection UserId_In(this UsersWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[UserId]" }, "UserId", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Users_UserId_In(this SqlWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[UserId]" }, "UserId", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static UsersWhereCollection Ver_In(this UsersWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Ver]" }, "Ver", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Users_Ver_In(this SqlWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Ver]" }, "Ver", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static UsersWhereCollection DeptId_In(this UsersWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[DeptId]" }, "DeptId", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Users_DeptId_In(this SqlWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[DeptId]" }, "DeptId", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static UsersWhereCollection FirstAndLastNameOrder_In(this UsersWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[FirstAndLastNameOrder]" }, "FirstAndLastNameOrder", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Users_FirstAndLastNameOrder_In(this SqlWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[FirstAndLastNameOrder]" }, "FirstAndLastNameOrder", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static UsersWhereCollection NumberOfLogins_In(this UsersWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[NumberOfLogins]" }, "NumberOfLogins", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Users_NumberOfLogins_In(this SqlWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[NumberOfLogins]" }, "NumberOfLogins", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static UsersWhereCollection NumberOfDenial_In(this UsersWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[NumberOfDenial]" }, "NumberOfDenial", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Users_NumberOfDenial_In(this SqlWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[NumberOfDenial]" }, "NumberOfDenial", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static UsersWhereCollection Creator_In(this UsersWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Creator]" }, "Creator", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Users_Creator_In(this SqlWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Creator]" }, "Creator", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static UsersWhereCollection Updator_In(this UsersWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Updator]" }, "Updator", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Users_Updator_In(this SqlWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Updator]" }, "Updator", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static UsersWhereCollection TenantId_Between(this UsersWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[TenantId]" }, "TenantId", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Users_TenantId_Between(this SqlWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[TenantId]" }, "TenantId", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static UsersWhereCollection UserId_Between(this UsersWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[UserId]" }, "UserId", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Users_UserId_Between(this SqlWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[UserId]" }, "UserId", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static UsersWhereCollection Ver_Between(this UsersWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Ver]" }, "Ver", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Users_Ver_Between(this SqlWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Ver]" }, "Ver", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static UsersWhereCollection DeptId_Between(this UsersWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[DeptId]" }, "DeptId", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Users_DeptId_Between(this SqlWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[DeptId]" }, "DeptId", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static UsersWhereCollection FirstAndLastNameOrder_Between(this UsersWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[FirstAndLastNameOrder]" }, "FirstAndLastNameOrder", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Users_FirstAndLastNameOrder_Between(this SqlWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[FirstAndLastNameOrder]" }, "FirstAndLastNameOrder", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static UsersWhereCollection NumberOfLogins_Between(this UsersWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[NumberOfLogins]" }, "NumberOfLogins", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Users_NumberOfLogins_Between(this SqlWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[NumberOfLogins]" }, "NumberOfLogins", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static UsersWhereCollection NumberOfDenial_Between(this UsersWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[NumberOfDenial]" }, "NumberOfDenial", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Users_NumberOfDenial_Between(this SqlWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[NumberOfDenial]" }, "NumberOfDenial", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static UsersWhereCollection Creator_Between(this UsersWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Creator]" }, "Creator", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Users_Creator_Between(this SqlWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Creator]" }, "Creator", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static UsersWhereCollection Updator_Between(this UsersWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Updator]" }, "Updator", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Users_Updator_Between(this SqlWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Updator]" }, "Updator", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static UsersWhereCollection Birthday_Between(this UsersWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[Birthday]" }, "Birthday", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Users_Birthday_Between(this SqlWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[Birthday]" }, "Birthday", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static UsersWhereCollection LastLoginTime_Between(this UsersWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[LastLoginTime]" }, "LastLoginTime", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Users_LastLoginTime_Between(this SqlWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[LastLoginTime]" }, "LastLoginTime", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static UsersWhereCollection PasswordExpirationTime_Between(this UsersWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[PasswordExpirationTime]" }, "PasswordExpirationTime", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Users_PasswordExpirationTime_Between(this SqlWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[PasswordExpirationTime]" }, "PasswordExpirationTime", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static UsersWhereCollection PasswordChangeTime_Between(this UsersWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[PasswordChangeTime]" }, "PasswordChangeTime", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Users_PasswordChangeTime_Between(this SqlWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[PasswordChangeTime]" }, "PasswordChangeTime", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static UsersWhereCollection CreatedTime_Between(this UsersWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[CreatedTime]" }, "CreatedTime", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Users_CreatedTime_Between(this SqlWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[CreatedTime]" }, "CreatedTime", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static UsersWhereCollection UpdatedTime_Between(this UsersWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[UpdatedTime]" }, "UpdatedTime", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Users_UpdatedTime_Between(this SqlWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[UpdatedTime]" }, "UpdatedTime", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static UsersWhereCollection Sub(this UsersWhereCollection self, SqlStatement sub, object value = null, string _operator = "=", bool _using = true) { return self.Add(null, null, value, _operator, sub: sub, _using: _using); }
        public static UsersWhereCollection Or(this UsersWhereCollection self, SqlWhereCollection or, bool _using = true) { return self.Add(null, null, or: or, _using: _using); }
        public static UsersGroupByCollection TenantId(this UsersGroupByCollection self) { return self.Add("[t0].[TenantId]"); }
        public static SqlGroupByCollection Users_TenantId(this SqlGroupByCollection self) { return self.Add("[t0].[TenantId]"); }
        public static UsersGroupByCollection UserId(this UsersGroupByCollection self) { return self.Add("[t0].[UserId]"); }
        public static SqlGroupByCollection Users_UserId(this SqlGroupByCollection self) { return self.Add("[t0].[UserId]"); }
        public static UsersGroupByCollection Ver(this UsersGroupByCollection self) { return self.Add("[t0].[Ver]"); }
        public static SqlGroupByCollection Users_Ver(this SqlGroupByCollection self) { return self.Add("[t0].[Ver]"); }
        public static UsersGroupByCollection LoginId(this UsersGroupByCollection self) { return self.Add("[t0].[LoginId]"); }
        public static SqlGroupByCollection Users_LoginId(this SqlGroupByCollection self) { return self.Add("[t0].[LoginId]"); }
        public static UsersGroupByCollection Disabled(this UsersGroupByCollection self) { return self.Add("[t0].[Disabled]"); }
        public static SqlGroupByCollection Users_Disabled(this SqlGroupByCollection self) { return self.Add("[t0].[Disabled]"); }
        public static UsersGroupByCollection UserCode(this UsersGroupByCollection self) { return self.Add("[t0].[UserCode]"); }
        public static SqlGroupByCollection Users_UserCode(this SqlGroupByCollection self) { return self.Add("[t0].[UserCode]"); }
        public static UsersGroupByCollection Password(this UsersGroupByCollection self) { return self.Add("[t0].[Password]"); }
        public static SqlGroupByCollection Users_Password(this SqlGroupByCollection self) { return self.Add("[t0].[Password]"); }
        public static UsersGroupByCollection LastName(this UsersGroupByCollection self) { return self.Add("[t0].[LastName]"); }
        public static SqlGroupByCollection Users_LastName(this SqlGroupByCollection self) { return self.Add("[t0].[LastName]"); }
        public static UsersGroupByCollection FirstName(this UsersGroupByCollection self) { return self.Add("[t0].[FirstName]"); }
        public static SqlGroupByCollection Users_FirstName(this SqlGroupByCollection self) { return self.Add("[t0].[FirstName]"); }
        public static UsersGroupByCollection Birthday(this UsersGroupByCollection self) { return self.Add("[t0].[Birthday]"); }
        public static SqlGroupByCollection Users_Birthday(this SqlGroupByCollection self) { return self.Add("[t0].[Birthday]"); }
        public static UsersGroupByCollection Sex(this UsersGroupByCollection self) { return self.Add("[t0].[Sex]"); }
        public static SqlGroupByCollection Users_Sex(this SqlGroupByCollection self) { return self.Add("[t0].[Sex]"); }
        public static UsersGroupByCollection Language(this UsersGroupByCollection self) { return self.Add("[t0].[Language]"); }
        public static SqlGroupByCollection Users_Language(this SqlGroupByCollection self) { return self.Add("[t0].[Language]"); }
        public static UsersGroupByCollection TimeZone(this UsersGroupByCollection self) { return self.Add("[t0].[TimeZone]"); }
        public static SqlGroupByCollection Users_TimeZone(this SqlGroupByCollection self) { return self.Add("[t0].[TimeZone]"); }
        public static UsersGroupByCollection DeptId(this UsersGroupByCollection self) { return self.Add("[t0].[DeptId]"); }
        public static SqlGroupByCollection Users_DeptId(this SqlGroupByCollection self) { return self.Add("[t0].[DeptId]"); }
        public static UsersGroupByCollection Dept(this UsersGroupByCollection self) { return self.Add("[t0].[DeptId]"); }
        public static SqlGroupByCollection Users_Dept(this SqlGroupByCollection self) { return self.Add("[t0].[DeptId]"); }
        public static UsersGroupByCollection FirstAndLastNameOrder(this UsersGroupByCollection self) { return self.Add("[t0].[FirstAndLastNameOrder]"); }
        public static SqlGroupByCollection Users_FirstAndLastNameOrder(this SqlGroupByCollection self) { return self.Add("[t0].[FirstAndLastNameOrder]"); }
        public static UsersGroupByCollection LastLoginTime(this UsersGroupByCollection self) { return self.Add("[t0].[LastLoginTime]"); }
        public static SqlGroupByCollection Users_LastLoginTime(this SqlGroupByCollection self) { return self.Add("[t0].[LastLoginTime]"); }
        public static UsersGroupByCollection PasswordExpirationTime(this UsersGroupByCollection self) { return self.Add("[t0].[PasswordExpirationTime]"); }
        public static SqlGroupByCollection Users_PasswordExpirationTime(this SqlGroupByCollection self) { return self.Add("[t0].[PasswordExpirationTime]"); }
        public static UsersGroupByCollection PasswordChangeTime(this UsersGroupByCollection self) { return self.Add("[t0].[PasswordChangeTime]"); }
        public static SqlGroupByCollection Users_PasswordChangeTime(this SqlGroupByCollection self) { return self.Add("[t0].[PasswordChangeTime]"); }
        public static UsersGroupByCollection NumberOfLogins(this UsersGroupByCollection self) { return self.Add("[t0].[NumberOfLogins]"); }
        public static SqlGroupByCollection Users_NumberOfLogins(this SqlGroupByCollection self) { return self.Add("[t0].[NumberOfLogins]"); }
        public static UsersGroupByCollection NumberOfDenial(this UsersGroupByCollection self) { return self.Add("[t0].[NumberOfDenial]"); }
        public static SqlGroupByCollection Users_NumberOfDenial(this SqlGroupByCollection self) { return self.Add("[t0].[NumberOfDenial]"); }
        public static UsersGroupByCollection TenantAdmin(this UsersGroupByCollection self) { return self.Add("[t0].[TenantAdmin]"); }
        public static SqlGroupByCollection Users_TenantAdmin(this SqlGroupByCollection self) { return self.Add("[t0].[TenantAdmin]"); }
        public static UsersGroupByCollection ServiceAdmin(this UsersGroupByCollection self) { return self.Add("[t0].[ServiceAdmin]"); }
        public static SqlGroupByCollection Users_ServiceAdmin(this SqlGroupByCollection self) { return self.Add("[t0].[ServiceAdmin]"); }
        public static UsersGroupByCollection Developer(this UsersGroupByCollection self) { return self.Add("[t0].[Developer]"); }
        public static SqlGroupByCollection Users_Developer(this SqlGroupByCollection self) { return self.Add("[t0].[Developer]"); }
        public static UsersGroupByCollection Comments(this UsersGroupByCollection self) { return self.Add("[t0].[Comments]"); }
        public static SqlGroupByCollection Users_Comments(this SqlGroupByCollection self) { return self.Add("[t0].[Comments]"); }
        public static UsersGroupByCollection Creator(this UsersGroupByCollection self) { return self.Add("[t0].[Creator]"); }
        public static SqlGroupByCollection Users_Creator(this SqlGroupByCollection self) { return self.Add("[t0].[Creator]"); }
        public static UsersGroupByCollection Updator(this UsersGroupByCollection self) { return self.Add("[t0].[Updator]"); }
        public static SqlGroupByCollection Users_Updator(this SqlGroupByCollection self) { return self.Add("[t0].[Updator]"); }
        public static UsersGroupByCollection CreatedTime(this UsersGroupByCollection self) { return self.Add("[t0].[CreatedTime]"); }
        public static SqlGroupByCollection Users_CreatedTime(this SqlGroupByCollection self) { return self.Add("[t0].[CreatedTime]"); }
        public static UsersGroupByCollection UpdatedTime(this UsersGroupByCollection self) { return self.Add("[t0].[UpdatedTime]"); }
        public static SqlGroupByCollection Users_UpdatedTime(this SqlGroupByCollection self) { return self.Add("[t0].[UpdatedTime]"); }
        public static UsersHavingCollection UsersCount(this UsersHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "count(*)", name: "UsersCount", value: value, _operator: _operator); }
        public static UsersHavingCollection CreatedTimeMax(this UsersHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[CreatedTime])", name: "CreatedTimeMax", value: value, _operator: _operator); }
        public static SqlHavingCollection Users_CreatedTimeMax(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[CreatedTime])", name: "CreatedTimeMax", value: value, _operator: _operator); }
        public static UsersHavingCollection CreatedTimeMin(this UsersHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[CreatedTime])", name: "CreatedTimeMin", value: value, _operator: _operator); }
        public static SqlHavingCollection Users_CreatedTimeMin(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[CreatedTime])", name: "CreatedTimeMin", value: value, _operator: _operator); }
        public static UsersHavingCollection UpdatedTimeMax(this UsersHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[UpdatedTime])", name: "UpdatedTimeMax", value: value, _operator: _operator); }
        public static SqlHavingCollection Users_UpdatedTimeMax(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[UpdatedTime])", name: "UpdatedTimeMax", value: value, _operator: _operator); }
        public static UsersHavingCollection UpdatedTimeMin(this UsersHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[UpdatedTime])", name: "UpdatedTimeMin", value: value, _operator: _operator); }
        public static SqlHavingCollection Users_UpdatedTimeMin(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[UpdatedTime])", name: "UpdatedTimeMin", value: value, _operator: _operator); }
        public static UsersOrderByCollection TenantId(this UsersOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[TenantId]"); }
        public static UsersOrderByCollection UserId(this UsersOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[UserId]"); }
        public static UsersOrderByCollection Ver(this UsersOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Ver]"); }
        public static UsersOrderByCollection LoginId(this UsersOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[LoginId]"); }
        public static UsersOrderByCollection Disabled(this UsersOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Disabled]"); }
        public static UsersOrderByCollection UserCode(this UsersOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[UserCode]"); }
        public static UsersOrderByCollection Password(this UsersOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Password]"); }
        public static UsersOrderByCollection LastName(this UsersOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[LastName]"); }
        public static UsersOrderByCollection FirstName(this UsersOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[FirstName]"); }
        public static UsersOrderByCollection Birthday(this UsersOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Birthday]"); }
        public static UsersOrderByCollection Sex(this UsersOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Sex]"); }
        public static UsersOrderByCollection Language(this UsersOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Language]"); }
        public static UsersOrderByCollection TimeZone(this UsersOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[TimeZone]"); }
        public static UsersOrderByCollection DeptId(this UsersOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[DeptId]"); }
        public static UsersOrderByCollection Dept(this UsersOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[DeptId]"); }
        public static UsersOrderByCollection FirstAndLastNameOrder(this UsersOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[FirstAndLastNameOrder]"); }
        public static UsersOrderByCollection LastLoginTime(this UsersOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[LastLoginTime]"); }
        public static UsersOrderByCollection PasswordExpirationTime(this UsersOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[PasswordExpirationTime]"); }
        public static UsersOrderByCollection PasswordChangeTime(this UsersOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[PasswordChangeTime]"); }
        public static UsersOrderByCollection NumberOfLogins(this UsersOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[NumberOfLogins]"); }
        public static UsersOrderByCollection NumberOfDenial(this UsersOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[NumberOfDenial]"); }
        public static UsersOrderByCollection TenantAdmin(this UsersOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[TenantAdmin]"); }
        public static UsersOrderByCollection ServiceAdmin(this UsersOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[ServiceAdmin]"); }
        public static UsersOrderByCollection Developer(this UsersOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Developer]"); }
        public static UsersOrderByCollection Comments(this UsersOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Comments]"); }
        public static UsersOrderByCollection Creator(this UsersOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Creator]"); }
        public static UsersOrderByCollection Updator(this UsersOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Updator]"); }
        public static UsersOrderByCollection CreatedTime(this UsersOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[CreatedTime]"); }
        public static UsersOrderByCollection UpdatedTime(this UsersOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[UpdatedTime]"); }
        public static SqlOrderByCollection Users_TenantId(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[TenantId]"); }
        public static SqlOrderByCollection Users_UserId(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[UserId]"); }
        public static SqlOrderByCollection Users_Ver(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Ver]"); }
        public static SqlOrderByCollection Users_LoginId(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[LoginId]"); }
        public static SqlOrderByCollection Users_Disabled(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Disabled]"); }
        public static SqlOrderByCollection Users_UserCode(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[UserCode]"); }
        public static SqlOrderByCollection Users_Password(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Password]"); }
        public static SqlOrderByCollection Users_LastName(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[LastName]"); }
        public static SqlOrderByCollection Users_FirstName(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[FirstName]"); }
        public static SqlOrderByCollection Users_Birthday(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Birthday]"); }
        public static SqlOrderByCollection Users_Sex(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Sex]"); }
        public static SqlOrderByCollection Users_Language(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Language]"); }
        public static SqlOrderByCollection Users_TimeZone(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[TimeZone]"); }
        public static SqlOrderByCollection Users_DeptId(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[DeptId]"); }
        public static SqlOrderByCollection Users_Dept(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[DeptId]"); }
        public static SqlOrderByCollection Users_FirstAndLastNameOrder(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[FirstAndLastNameOrder]"); }
        public static SqlOrderByCollection Users_LastLoginTime(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[LastLoginTime]"); }
        public static SqlOrderByCollection Users_PasswordExpirationTime(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[PasswordExpirationTime]"); }
        public static SqlOrderByCollection Users_PasswordChangeTime(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[PasswordChangeTime]"); }
        public static SqlOrderByCollection Users_NumberOfLogins(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[NumberOfLogins]"); }
        public static SqlOrderByCollection Users_NumberOfDenial(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[NumberOfDenial]"); }
        public static SqlOrderByCollection Users_TenantAdmin(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[TenantAdmin]"); }
        public static SqlOrderByCollection Users_ServiceAdmin(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[ServiceAdmin]"); }
        public static SqlOrderByCollection Users_Developer(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Developer]"); }
        public static SqlOrderByCollection Users_Comments(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Comments]"); }
        public static SqlOrderByCollection Users_Creator(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Creator]"); }
        public static SqlOrderByCollection Users_Updator(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Updator]"); }
        public static SqlOrderByCollection Users_CreatedTime(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[CreatedTime]"); }
        public static SqlOrderByCollection Users_UpdatedTime(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[UpdatedTime]"); }
        public static UsersOrderByCollection UsersCount(this UsersOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "count(*)"); }
        public static UsersOrderByCollection CreatedTimeMax(this UsersOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[CreatedTime])"); }
        public static SqlOrderByCollection Users_CreatedTimeMax(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[CreatedTime])"); }
        public static UsersOrderByCollection CreatedTimeMin(this UsersOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[CreatedTime])"); }
        public static SqlOrderByCollection Users_CreatedTimeMin(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[CreatedTime])"); }
        public static UsersOrderByCollection UpdatedTimeMax(this UsersOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[UpdatedTime])"); }
        public static SqlOrderByCollection Users_UpdatedTimeMax(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[UpdatedTime])"); }
        public static UsersOrderByCollection UpdatedTimeMin(this UsersOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[UpdatedTime])"); }
        public static SqlOrderByCollection Users_UpdatedTimeMin(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[UpdatedTime])"); }
        public static UsersParamCollection TenantId(this UsersParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[TenantId]", "TenantId", value, sub, raw, _using); }
        public static SqlParamCollection Users_TenantId(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[TenantId]", "TenantId", value, sub, raw, _using); }
        public static UsersParamCollection UserId(this UsersParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[UserId]", "UserId", value, sub, raw, _using); }
        public static SqlParamCollection Users_UserId(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[UserId]", "UserId", value, sub, raw, _using); }
        public static UsersParamCollection Ver(this UsersParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Ver]", "Ver", value, sub, raw, _using); }
        public static SqlParamCollection Users_Ver(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Ver]", "Ver", value, sub, raw, _using); }
        public static UsersParamCollection LoginId(this UsersParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[LoginId]", "LoginId", value, sub, raw, _using); }
        public static SqlParamCollection Users_LoginId(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[LoginId]", "LoginId", value, sub, raw, _using); }
        public static UsersParamCollection Disabled(this UsersParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Disabled]", "Disabled", value, sub, raw, _using); }
        public static SqlParamCollection Users_Disabled(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Disabled]", "Disabled", value, sub, raw, _using); }
        public static UsersParamCollection UserCode(this UsersParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[UserCode]", "UserCode", value, sub, raw, _using); }
        public static SqlParamCollection Users_UserCode(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[UserCode]", "UserCode", value, sub, raw, _using); }
        public static UsersParamCollection Password(this UsersParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Password]", "Password", value, sub, raw, _using); }
        public static SqlParamCollection Users_Password(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Password]", "Password", value, sub, raw, _using); }
        public static UsersParamCollection LastName(this UsersParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[LastName]", "LastName", value, sub, raw, _using); }
        public static SqlParamCollection Users_LastName(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[LastName]", "LastName", value, sub, raw, _using); }
        public static UsersParamCollection FirstName(this UsersParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[FirstName]", "FirstName", value, sub, raw, _using); }
        public static SqlParamCollection Users_FirstName(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[FirstName]", "FirstName", value, sub, raw, _using); }
        public static UsersParamCollection Birthday(this UsersParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Birthday]", "Birthday", value, sub, raw, _using); }
        public static SqlParamCollection Users_Birthday(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Birthday]", "Birthday", value, sub, raw, _using); }
        public static UsersParamCollection Sex(this UsersParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Sex]", "Sex", value, sub, raw, _using); }
        public static SqlParamCollection Users_Sex(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Sex]", "Sex", value, sub, raw, _using); }
        public static UsersParamCollection Language(this UsersParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Language]", "Language", value, sub, raw, _using); }
        public static SqlParamCollection Users_Language(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Language]", "Language", value, sub, raw, _using); }
        public static UsersParamCollection TimeZone(this UsersParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[TimeZone]", "TimeZone", value, sub, raw, _using); }
        public static SqlParamCollection Users_TimeZone(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[TimeZone]", "TimeZone", value, sub, raw, _using); }
        public static UsersParamCollection DeptId(this UsersParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DeptId]", "DeptId", value, sub, raw, _using); }
        public static SqlParamCollection Users_DeptId(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DeptId]", "DeptId", value, sub, raw, _using); }
        public static UsersParamCollection FirstAndLastNameOrder(this UsersParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[FirstAndLastNameOrder]", "FirstAndLastNameOrder", value.ToInt(), sub, raw, _using); }
        public static SqlParamCollection Users_FirstAndLastNameOrder(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[FirstAndLastNameOrder]", "FirstAndLastNameOrder", value.ToInt(), sub, raw, _using); }
        public static UsersParamCollection LastLoginTime(this UsersParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[LastLoginTime]", "LastLoginTime", value, sub, raw, _using); }
        public static SqlParamCollection Users_LastLoginTime(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[LastLoginTime]", "LastLoginTime", value, sub, raw, _using); }
        public static UsersParamCollection PasswordExpirationTime(this UsersParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[PasswordExpirationTime]", "PasswordExpirationTime", value, sub, raw, _using); }
        public static SqlParamCollection Users_PasswordExpirationTime(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[PasswordExpirationTime]", "PasswordExpirationTime", value, sub, raw, _using); }
        public static UsersParamCollection PasswordChangeTime(this UsersParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[PasswordChangeTime]", "PasswordChangeTime", value, sub, raw, _using); }
        public static SqlParamCollection Users_PasswordChangeTime(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[PasswordChangeTime]", "PasswordChangeTime", value, sub, raw, _using); }
        public static UsersParamCollection NumberOfLogins(this UsersParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[NumberOfLogins]", "NumberOfLogins", value, sub, raw, _using); }
        public static SqlParamCollection Users_NumberOfLogins(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[NumberOfLogins]", "NumberOfLogins", value, sub, raw, _using); }
        public static UsersParamCollection NumberOfDenial(this UsersParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[NumberOfDenial]", "NumberOfDenial", value, sub, raw, _using); }
        public static SqlParamCollection Users_NumberOfDenial(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[NumberOfDenial]", "NumberOfDenial", value, sub, raw, _using); }
        public static UsersParamCollection TenantAdmin(this UsersParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[TenantAdmin]", "TenantAdmin", value, sub, raw, _using); }
        public static SqlParamCollection Users_TenantAdmin(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[TenantAdmin]", "TenantAdmin", value, sub, raw, _using); }
        public static UsersParamCollection ServiceAdmin(this UsersParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ServiceAdmin]", "ServiceAdmin", value, sub, raw, _using); }
        public static SqlParamCollection Users_ServiceAdmin(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ServiceAdmin]", "ServiceAdmin", value, sub, raw, _using); }
        public static UsersParamCollection Developer(this UsersParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Developer]", "Developer", value, sub, raw, _using); }
        public static SqlParamCollection Users_Developer(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Developer]", "Developer", value, sub, raw, _using); }
        public static UsersParamCollection Comments(this UsersParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Comments]", "Comments", value, sub, raw, _using); }
        public static SqlParamCollection Users_Comments(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Comments]", "Comments", value, sub, raw, _using); }
        public static UsersParamCollection Creator(this UsersParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Creator]", "Creator", value, sub, raw, _using); }
        public static SqlParamCollection Users_Creator(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Creator]", "Creator", value, sub, raw, _using); }
        public static UsersParamCollection Updator(this UsersParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Updator]", "Updator", value, sub, raw, _using); }
        public static SqlParamCollection Users_Updator(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Updator]", "Updator", value, sub, raw, _using); }
        public static UsersParamCollection CreatedTime(this UsersParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CreatedTime]", "CreatedTime", value, sub, raw, _using); }
        public static SqlParamCollection Users_CreatedTime(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CreatedTime]", "CreatedTime", value, sub, raw, _using); }
        public static UsersParamCollection UpdatedTime(this UsersParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[UpdatedTime]", "UpdatedTime", value, sub, raw, _using); }
        public static SqlParamCollection Users_UpdatedTime(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[UpdatedTime]", "UpdatedTime", value, sub, raw, _using); }

        public static MailAddressesColumnCollection MailAddressesColumn()
        {
            return new MailAddressesColumnCollection();
        }

        public class MailAddressesColumnCollection : SqlColumnCollection
        {
            public MailAddressesColumnCollection Add(params string[] columnBrackets)
            {
                base.Add(false, columnBrackets);
                return this;
            }

            public new MailAddressesColumnCollection Add(bool duplicates = false, params string[] columnBrackets)
            {
                base.Add(duplicates, columnBrackets);
                return this;
            }
        }

        public static MailAddressesJoinCollection MailAddressesJoin()
        {
            return new MailAddressesJoinCollection();
        }

        public class MailAddressesJoinCollection : SqlJoinCollection
        {
            public new MailAddressesJoinCollection Add(params string[] columnBrackets)
            {
                columnBrackets.ForEach(columnBracket => base.Add(new SqlJoin(columnBracket)));
                return this;
            }
        }

        public static MailAddressesWhereCollection MailAddressesWhere()
        {
            return new MailAddressesWhereCollection();
        }

        public class MailAddressesWhereCollection : SqlWhereCollection
        {
            public new MailAddressesWhereCollection Add(
                string[] columnBrackets = null,
                string name = "",
                object value = null,
                string _operator = "=",
                string multiColumnOperator = " or ",
                string multiParamOperator = " and ",
                SqlStatement sub = null,
                string raw = "",
                SqlWhereCollection or = null,
                bool _using = true)
            {
                base.Add(new SqlWhere(
                    columnBrackets: columnBrackets,
                    name: name,
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    sub: sub,
                    raw: raw,
                    or: or,
                    _using: _using));
                return this;
            }
        }

        public static MailAddressesGroupByCollection MailAddressesGroupBy()
        {
            return new MailAddressesGroupByCollection();
        }

        public class MailAddressesGroupByCollection : SqlGroupByCollection
        {
            public new MailAddressesGroupByCollection Add(
                params string[] columnBrackets)
            {
                columnBrackets.ForEach(columnBracket =>
                    base.Add(new SqlGroupBy(columnBracket)));
                return this;
            }
        }

        public static MailAddressesHavingCollection MailAddressesHaving()
        {
            return new MailAddressesHavingCollection();
        }

        public class MailAddressesHavingCollection : SqlHavingCollection
        {
            public MailAddressesHavingCollection Add(
                string columnBracket, string name, object value, string _operator)
            {
                base.Add(new SqlHaving(
                    columnBracket: columnBracket,
                    name: name,
                    value: value,
                    _operator: _operator));
                return this;
            }
        }

        public static MailAddressesOrderByCollection MailAddressesOrderBy()
        {
            return new MailAddressesOrderByCollection();
        }

        public class MailAddressesOrderByCollection : SqlOrderByCollection
        {
            public new MailAddressesOrderByCollection Add(
                SqlOrderBy.Types type = SqlOrderBy.Types.asc,
                params string[] columnBrackets)
            {
                columnBrackets.ForEach(columnBracket =>
                    base.Add(new SqlOrderBy(columnBracket, type)));
                return this;
            }
        }

        public static MailAddressesParamCollection MailAddressesParam()
        {
            return new MailAddressesParamCollection();
        }

        public class MailAddressesParamCollection : SqlParamCollection
        {
            public new MailAddressesParamCollection Add(
                string columnBracket = "",
                string name = "",
                object value = null,
                SqlStatement sub = null,
                string raw = null,
                bool _using = true)
            {
                base.Add(new SqlParam(columnBracket, name, value, sub, raw, _using));
                return this;
            }
        }

        public static string MailAddresses_MailAddress_WhereLike(string tableName = "t0") { return "([" + tableName + "].[MailAddress] like '%' + @SearchText#ParamCount#_#CommandCount# + '%')"; }
        public const string SqlWhereExists_MailAddresses = "exists(select * from [MailAddresses] where #SqlWhere#)";
        public const string SqlWhereNotExists_MailAddresses = "not exists(select * from [MailAddresses] where #SqlWhere#)";
        public static MailAddressesColumnCollection OwnerId(this MailAddressesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[OwnerId]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection MailAddresses_OwnerId(this SqlColumnCollection self, string tableName = "MailAddresses", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[OwnerId]" + _as.ExistsTo(" as [{0}]")); }
        public static MailAddressesColumnCollection OwnerType(this MailAddressesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[OwnerType]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection MailAddresses_OwnerType(this SqlColumnCollection self, string tableName = "MailAddresses", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[OwnerType]" + _as.ExistsTo(" as [{0}]")); }
        public static MailAddressesColumnCollection MailAddressId(this MailAddressesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[MailAddressId]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection MailAddresses_MailAddressId(this SqlColumnCollection self, string tableName = "MailAddresses", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[MailAddressId]" + _as.ExistsTo(" as [{0}]")); }
        public static MailAddressesColumnCollection Ver(this MailAddressesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Ver]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection MailAddresses_Ver(this SqlColumnCollection self, string tableName = "MailAddresses", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Ver]" + _as.ExistsTo(" as [{0}]")); }
        public static MailAddressesColumnCollection MailAddress(this MailAddressesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[MailAddress]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection MailAddresses_MailAddress(this SqlColumnCollection self, string tableName = "MailAddresses", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[MailAddress]" + _as.ExistsTo(" as [{0}]")); }
        public static MailAddressesColumnCollection Comments(this MailAddressesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Comments]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection MailAddresses_Comments(this SqlColumnCollection self, string tableName = "MailAddresses", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Comments]" + _as.ExistsTo(" as [{0}]")); }
        public static MailAddressesColumnCollection Creator(this MailAddressesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Creator]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection MailAddresses_Creator(this SqlColumnCollection self, string tableName = "MailAddresses", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Creator]" + _as.ExistsTo(" as [{0}]")); }
        public static MailAddressesColumnCollection Updator(this MailAddressesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Updator]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection MailAddresses_Updator(this SqlColumnCollection self, string tableName = "MailAddresses", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Updator]" + _as.ExistsTo(" as [{0}]")); }
        public static MailAddressesColumnCollection CreatedTime(this MailAddressesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[CreatedTime]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection MailAddresses_CreatedTime(this SqlColumnCollection self, string tableName = "MailAddresses", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[CreatedTime]" + _as.ExistsTo(" as [{0}]")); }
        public static MailAddressesColumnCollection UpdatedTime(this MailAddressesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[UpdatedTime]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection MailAddresses_UpdatedTime(this SqlColumnCollection self, string tableName = "MailAddresses", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[UpdatedTime]" + _as.ExistsTo(" as [{0}]")); }
        public static MailAddressesColumnCollection MailAddressesCount(this MailAddressesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "count(*) as MailAddressesCount"); }
        public static MailAddressesColumnCollection CreatedTimeMax(this MailAddressesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[CreatedTime]) as [CreatedTimeMax]"); }
        public static SqlColumnCollection MailAddresses_CreatedTimeMax(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[CreatedTime]) as [CreatedTimeMax]"); }
        public static MailAddressesColumnCollection CreatedTimeMin(this MailAddressesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[CreatedTime]) as [CreatedTimeMin]"); }
        public static SqlColumnCollection MailAddresses_CreatedTimeMin(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[CreatedTime]) as [CreatedTimeMin]"); }
        public static MailAddressesColumnCollection UpdatedTimeMax(this MailAddressesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[UpdatedTime]) as [UpdatedTimeMax]"); }
        public static SqlColumnCollection MailAddresses_UpdatedTimeMax(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[UpdatedTime]) as [UpdatedTimeMax]"); }
        public static MailAddressesColumnCollection UpdatedTimeMin(this MailAddressesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[UpdatedTime]) as [UpdatedTimeMin]"); }
        public static SqlColumnCollection MailAddresses_UpdatedTimeMin(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[UpdatedTime]) as [UpdatedTimeMin]"); }
        public static MailAddressesWhereCollection OwnerId(this MailAddressesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[OwnerId]" }, "OwnerId", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection MailAddresses_OwnerId(this SqlWhereCollection self, object value = null, string tableName = "MailAddresses", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[OwnerId]" }, "OwnerId", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static MailAddressesWhereCollection OwnerType(this MailAddressesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[OwnerType]" }, "OwnerType", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection MailAddresses_OwnerType(this SqlWhereCollection self, object value = null, string tableName = "MailAddresses", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[OwnerType]" }, "OwnerType", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static MailAddressesWhereCollection MailAddressId(this MailAddressesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[MailAddressId]" }, "MailAddressId", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection MailAddresses_MailAddressId(this SqlWhereCollection self, object value = null, string tableName = "MailAddresses", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[MailAddressId]" }, "MailAddressId", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static MailAddressesWhereCollection Ver(this MailAddressesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Ver]" }, "Ver", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection MailAddresses_Ver(this SqlWhereCollection self, object value = null, string tableName = "MailAddresses", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Ver]" }, "Ver", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static MailAddressesWhereCollection MailAddress(this MailAddressesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[MailAddress]" }, "MailAddress", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection MailAddresses_MailAddress(this SqlWhereCollection self, object value = null, string tableName = "MailAddresses", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[MailAddress]" }, "MailAddress", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static MailAddressesWhereCollection Comments(this MailAddressesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Comments]" }, "Comments", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection MailAddresses_Comments(this SqlWhereCollection self, object value = null, string tableName = "MailAddresses", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Comments]" }, "Comments", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static MailAddressesWhereCollection Creator(this MailAddressesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Creator]" }, "Creator", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection MailAddresses_Creator(this SqlWhereCollection self, object value = null, string tableName = "MailAddresses", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Creator]" }, "Creator", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static MailAddressesWhereCollection Updator(this MailAddressesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Updator]" }, "Updator", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection MailAddresses_Updator(this SqlWhereCollection self, object value = null, string tableName = "MailAddresses", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Updator]" }, "Updator", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static MailAddressesWhereCollection CreatedTime(this MailAddressesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[CreatedTime]" }, "CreatedTime", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection MailAddresses_CreatedTime(this SqlWhereCollection self, object value = null, string tableName = "MailAddresses", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[CreatedTime]" }, "CreatedTime", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static MailAddressesWhereCollection UpdatedTime(this MailAddressesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[UpdatedTime]" }, "UpdatedTime", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection MailAddresses_UpdatedTime(this SqlWhereCollection self, object value = null, string tableName = "MailAddresses", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[UpdatedTime]" }, "UpdatedTime", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static MailAddressesWhereCollection OwnerId_In(this MailAddressesWhereCollection self, IEnumerable<long> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[OwnerId]" }, "OwnerId", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection MailAddresses_OwnerId_In(this SqlWhereCollection self, IEnumerable<long> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[OwnerId]" }, "OwnerId", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static MailAddressesWhereCollection MailAddressId_In(this MailAddressesWhereCollection self, IEnumerable<long> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[MailAddressId]" }, "MailAddressId", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection MailAddresses_MailAddressId_In(this SqlWhereCollection self, IEnumerable<long> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[MailAddressId]" }, "MailAddressId", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static MailAddressesWhereCollection Ver_In(this MailAddressesWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Ver]" }, "Ver", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection MailAddresses_Ver_In(this SqlWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Ver]" }, "Ver", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static MailAddressesWhereCollection Creator_In(this MailAddressesWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Creator]" }, "Creator", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection MailAddresses_Creator_In(this SqlWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Creator]" }, "Creator", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static MailAddressesWhereCollection Updator_In(this MailAddressesWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Updator]" }, "Updator", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection MailAddresses_Updator_In(this SqlWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Updator]" }, "Updator", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static MailAddressesWhereCollection OwnerId_Between(this MailAddressesWhereCollection self, long begin, long end, bool _using = true) { return self.Add(new string[] { "[t0].[OwnerId]" }, "OwnerId", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection MailAddresses_OwnerId_Between(this SqlWhereCollection self, long begin, long end, bool _using = true) { return self.Add(new string[] { "[t0].[OwnerId]" }, "OwnerId", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static MailAddressesWhereCollection MailAddressId_Between(this MailAddressesWhereCollection self, long begin, long end, bool _using = true) { return self.Add(new string[] { "[t0].[MailAddressId]" }, "MailAddressId", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection MailAddresses_MailAddressId_Between(this SqlWhereCollection self, long begin, long end, bool _using = true) { return self.Add(new string[] { "[t0].[MailAddressId]" }, "MailAddressId", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static MailAddressesWhereCollection Ver_Between(this MailAddressesWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Ver]" }, "Ver", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection MailAddresses_Ver_Between(this SqlWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Ver]" }, "Ver", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static MailAddressesWhereCollection Creator_Between(this MailAddressesWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Creator]" }, "Creator", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection MailAddresses_Creator_Between(this SqlWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Creator]" }, "Creator", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static MailAddressesWhereCollection Updator_Between(this MailAddressesWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Updator]" }, "Updator", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection MailAddresses_Updator_Between(this SqlWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Updator]" }, "Updator", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static MailAddressesWhereCollection CreatedTime_Between(this MailAddressesWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[CreatedTime]" }, "CreatedTime", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection MailAddresses_CreatedTime_Between(this SqlWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[CreatedTime]" }, "CreatedTime", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static MailAddressesWhereCollection UpdatedTime_Between(this MailAddressesWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[UpdatedTime]" }, "UpdatedTime", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection MailAddresses_UpdatedTime_Between(this SqlWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[UpdatedTime]" }, "UpdatedTime", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static MailAddressesWhereCollection Sub(this MailAddressesWhereCollection self, SqlStatement sub, object value = null, string _operator = "=", bool _using = true) { return self.Add(null, null, value, _operator, sub: sub, _using: _using); }
        public static MailAddressesWhereCollection Or(this MailAddressesWhereCollection self, SqlWhereCollection or, bool _using = true) { return self.Add(null, null, or: or, _using: _using); }
        public static MailAddressesGroupByCollection OwnerId(this MailAddressesGroupByCollection self) { return self.Add("[t0].[OwnerId]"); }
        public static SqlGroupByCollection MailAddresses_OwnerId(this SqlGroupByCollection self) { return self.Add("[t0].[OwnerId]"); }
        public static MailAddressesGroupByCollection OwnerType(this MailAddressesGroupByCollection self) { return self.Add("[t0].[OwnerType]"); }
        public static SqlGroupByCollection MailAddresses_OwnerType(this SqlGroupByCollection self) { return self.Add("[t0].[OwnerType]"); }
        public static MailAddressesGroupByCollection MailAddressId(this MailAddressesGroupByCollection self) { return self.Add("[t0].[MailAddressId]"); }
        public static SqlGroupByCollection MailAddresses_MailAddressId(this SqlGroupByCollection self) { return self.Add("[t0].[MailAddressId]"); }
        public static MailAddressesGroupByCollection Ver(this MailAddressesGroupByCollection self) { return self.Add("[t0].[Ver]"); }
        public static SqlGroupByCollection MailAddresses_Ver(this SqlGroupByCollection self) { return self.Add("[t0].[Ver]"); }
        public static MailAddressesGroupByCollection MailAddress(this MailAddressesGroupByCollection self) { return self.Add("[t0].[MailAddress]"); }
        public static SqlGroupByCollection MailAddresses_MailAddress(this SqlGroupByCollection self) { return self.Add("[t0].[MailAddress]"); }
        public static MailAddressesGroupByCollection Comments(this MailAddressesGroupByCollection self) { return self.Add("[t0].[Comments]"); }
        public static SqlGroupByCollection MailAddresses_Comments(this SqlGroupByCollection self) { return self.Add("[t0].[Comments]"); }
        public static MailAddressesGroupByCollection Creator(this MailAddressesGroupByCollection self) { return self.Add("[t0].[Creator]"); }
        public static SqlGroupByCollection MailAddresses_Creator(this SqlGroupByCollection self) { return self.Add("[t0].[Creator]"); }
        public static MailAddressesGroupByCollection Updator(this MailAddressesGroupByCollection self) { return self.Add("[t0].[Updator]"); }
        public static SqlGroupByCollection MailAddresses_Updator(this SqlGroupByCollection self) { return self.Add("[t0].[Updator]"); }
        public static MailAddressesGroupByCollection CreatedTime(this MailAddressesGroupByCollection self) { return self.Add("[t0].[CreatedTime]"); }
        public static SqlGroupByCollection MailAddresses_CreatedTime(this SqlGroupByCollection self) { return self.Add("[t0].[CreatedTime]"); }
        public static MailAddressesGroupByCollection UpdatedTime(this MailAddressesGroupByCollection self) { return self.Add("[t0].[UpdatedTime]"); }
        public static SqlGroupByCollection MailAddresses_UpdatedTime(this SqlGroupByCollection self) { return self.Add("[t0].[UpdatedTime]"); }
        public static MailAddressesHavingCollection MailAddressesCount(this MailAddressesHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "count(*)", name: "MailAddressesCount", value: value, _operator: _operator); }
        public static MailAddressesHavingCollection CreatedTimeMax(this MailAddressesHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[CreatedTime])", name: "CreatedTimeMax", value: value, _operator: _operator); }
        public static SqlHavingCollection MailAddresses_CreatedTimeMax(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[CreatedTime])", name: "CreatedTimeMax", value: value, _operator: _operator); }
        public static MailAddressesHavingCollection CreatedTimeMin(this MailAddressesHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[CreatedTime])", name: "CreatedTimeMin", value: value, _operator: _operator); }
        public static SqlHavingCollection MailAddresses_CreatedTimeMin(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[CreatedTime])", name: "CreatedTimeMin", value: value, _operator: _operator); }
        public static MailAddressesHavingCollection UpdatedTimeMax(this MailAddressesHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[UpdatedTime])", name: "UpdatedTimeMax", value: value, _operator: _operator); }
        public static SqlHavingCollection MailAddresses_UpdatedTimeMax(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[UpdatedTime])", name: "UpdatedTimeMax", value: value, _operator: _operator); }
        public static MailAddressesHavingCollection UpdatedTimeMin(this MailAddressesHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[UpdatedTime])", name: "UpdatedTimeMin", value: value, _operator: _operator); }
        public static SqlHavingCollection MailAddresses_UpdatedTimeMin(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[UpdatedTime])", name: "UpdatedTimeMin", value: value, _operator: _operator); }
        public static MailAddressesOrderByCollection OwnerId(this MailAddressesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[OwnerId]"); }
        public static MailAddressesOrderByCollection OwnerType(this MailAddressesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[OwnerType]"); }
        public static MailAddressesOrderByCollection MailAddressId(this MailAddressesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[MailAddressId]"); }
        public static MailAddressesOrderByCollection Ver(this MailAddressesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Ver]"); }
        public static MailAddressesOrderByCollection MailAddress(this MailAddressesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[MailAddress]"); }
        public static MailAddressesOrderByCollection Comments(this MailAddressesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Comments]"); }
        public static MailAddressesOrderByCollection Creator(this MailAddressesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Creator]"); }
        public static MailAddressesOrderByCollection Updator(this MailAddressesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Updator]"); }
        public static MailAddressesOrderByCollection CreatedTime(this MailAddressesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[CreatedTime]"); }
        public static MailAddressesOrderByCollection UpdatedTime(this MailAddressesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[UpdatedTime]"); }
        public static SqlOrderByCollection MailAddresses_OwnerId(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[OwnerId]"); }
        public static SqlOrderByCollection MailAddresses_OwnerType(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[OwnerType]"); }
        public static SqlOrderByCollection MailAddresses_MailAddressId(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[MailAddressId]"); }
        public static SqlOrderByCollection MailAddresses_Ver(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Ver]"); }
        public static SqlOrderByCollection MailAddresses_MailAddress(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[MailAddress]"); }
        public static SqlOrderByCollection MailAddresses_Comments(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Comments]"); }
        public static SqlOrderByCollection MailAddresses_Creator(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Creator]"); }
        public static SqlOrderByCollection MailAddresses_Updator(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Updator]"); }
        public static SqlOrderByCollection MailAddresses_CreatedTime(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[CreatedTime]"); }
        public static SqlOrderByCollection MailAddresses_UpdatedTime(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[UpdatedTime]"); }
        public static MailAddressesOrderByCollection MailAddressesCount(this MailAddressesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "count(*)"); }
        public static MailAddressesOrderByCollection CreatedTimeMax(this MailAddressesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[CreatedTime])"); }
        public static SqlOrderByCollection MailAddresses_CreatedTimeMax(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[CreatedTime])"); }
        public static MailAddressesOrderByCollection CreatedTimeMin(this MailAddressesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[CreatedTime])"); }
        public static SqlOrderByCollection MailAddresses_CreatedTimeMin(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[CreatedTime])"); }
        public static MailAddressesOrderByCollection UpdatedTimeMax(this MailAddressesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[UpdatedTime])"); }
        public static SqlOrderByCollection MailAddresses_UpdatedTimeMax(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[UpdatedTime])"); }
        public static MailAddressesOrderByCollection UpdatedTimeMin(this MailAddressesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[UpdatedTime])"); }
        public static SqlOrderByCollection MailAddresses_UpdatedTimeMin(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[UpdatedTime])"); }
        public static MailAddressesParamCollection OwnerId(this MailAddressesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[OwnerId]", "OwnerId", value, sub, raw, _using); }
        public static SqlParamCollection MailAddresses_OwnerId(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[OwnerId]", "OwnerId", value, sub, raw, _using); }
        public static MailAddressesParamCollection OwnerType(this MailAddressesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[OwnerType]", "OwnerType", value, sub, raw, _using); }
        public static SqlParamCollection MailAddresses_OwnerType(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[OwnerType]", "OwnerType", value, sub, raw, _using); }
        public static MailAddressesParamCollection MailAddressId(this MailAddressesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[MailAddressId]", "MailAddressId", value, sub, raw, _using); }
        public static SqlParamCollection MailAddresses_MailAddressId(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[MailAddressId]", "MailAddressId", value, sub, raw, _using); }
        public static MailAddressesParamCollection Ver(this MailAddressesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Ver]", "Ver", value, sub, raw, _using); }
        public static SqlParamCollection MailAddresses_Ver(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Ver]", "Ver", value, sub, raw, _using); }
        public static MailAddressesParamCollection MailAddress(this MailAddressesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[MailAddress]", "MailAddress", value, sub, raw, _using); }
        public static SqlParamCollection MailAddresses_MailAddress(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[MailAddress]", "MailAddress", value, sub, raw, _using); }
        public static MailAddressesParamCollection Comments(this MailAddressesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Comments]", "Comments", value, sub, raw, _using); }
        public static SqlParamCollection MailAddresses_Comments(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Comments]", "Comments", value, sub, raw, _using); }
        public static MailAddressesParamCollection Creator(this MailAddressesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Creator]", "Creator", value, sub, raw, _using); }
        public static SqlParamCollection MailAddresses_Creator(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Creator]", "Creator", value, sub, raw, _using); }
        public static MailAddressesParamCollection Updator(this MailAddressesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Updator]", "Updator", value, sub, raw, _using); }
        public static SqlParamCollection MailAddresses_Updator(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Updator]", "Updator", value, sub, raw, _using); }
        public static MailAddressesParamCollection CreatedTime(this MailAddressesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CreatedTime]", "CreatedTime", value, sub, raw, _using); }
        public static SqlParamCollection MailAddresses_CreatedTime(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CreatedTime]", "CreatedTime", value, sub, raw, _using); }
        public static MailAddressesParamCollection UpdatedTime(this MailAddressesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[UpdatedTime]", "UpdatedTime", value, sub, raw, _using); }
        public static SqlParamCollection MailAddresses_UpdatedTime(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[UpdatedTime]", "UpdatedTime", value, sub, raw, _using); }

        public static PermissionsColumnCollection PermissionsColumn()
        {
            return new PermissionsColumnCollection();
        }

        public class PermissionsColumnCollection : SqlColumnCollection
        {
            public PermissionsColumnCollection Add(params string[] columnBrackets)
            {
                base.Add(false, columnBrackets);
                return this;
            }

            public new PermissionsColumnCollection Add(bool duplicates = false, params string[] columnBrackets)
            {
                base.Add(duplicates, columnBrackets);
                return this;
            }
        }

        public static PermissionsJoinCollection PermissionsJoin()
        {
            return new PermissionsJoinCollection();
        }

        public class PermissionsJoinCollection : SqlJoinCollection
        {
            public new PermissionsJoinCollection Add(params string[] columnBrackets)
            {
                columnBrackets.ForEach(columnBracket => base.Add(new SqlJoin(columnBracket)));
                return this;
            }
        }

        public static PermissionsWhereCollection PermissionsWhere()
        {
            return new PermissionsWhereCollection();
        }

        public class PermissionsWhereCollection : SqlWhereCollection
        {
            public new PermissionsWhereCollection Add(
                string[] columnBrackets = null,
                string name = "",
                object value = null,
                string _operator = "=",
                string multiColumnOperator = " or ",
                string multiParamOperator = " and ",
                SqlStatement sub = null,
                string raw = "",
                SqlWhereCollection or = null,
                bool _using = true)
            {
                base.Add(new SqlWhere(
                    columnBrackets: columnBrackets,
                    name: name,
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    sub: sub,
                    raw: raw,
                    or: or,
                    _using: _using));
                return this;
            }
        }

        public static PermissionsGroupByCollection PermissionsGroupBy()
        {
            return new PermissionsGroupByCollection();
        }

        public class PermissionsGroupByCollection : SqlGroupByCollection
        {
            public new PermissionsGroupByCollection Add(
                params string[] columnBrackets)
            {
                columnBrackets.ForEach(columnBracket =>
                    base.Add(new SqlGroupBy(columnBracket)));
                return this;
            }
        }

        public static PermissionsHavingCollection PermissionsHaving()
        {
            return new PermissionsHavingCollection();
        }

        public class PermissionsHavingCollection : SqlHavingCollection
        {
            public PermissionsHavingCollection Add(
                string columnBracket, string name, object value, string _operator)
            {
                base.Add(new SqlHaving(
                    columnBracket: columnBracket,
                    name: name,
                    value: value,
                    _operator: _operator));
                return this;
            }
        }

        public static PermissionsOrderByCollection PermissionsOrderBy()
        {
            return new PermissionsOrderByCollection();
        }

        public class PermissionsOrderByCollection : SqlOrderByCollection
        {
            public new PermissionsOrderByCollection Add(
                SqlOrderBy.Types type = SqlOrderBy.Types.asc,
                params string[] columnBrackets)
            {
                columnBrackets.ForEach(columnBracket =>
                    base.Add(new SqlOrderBy(columnBracket, type)));
                return this;
            }
        }

        public static PermissionsParamCollection PermissionsParam()
        {
            return new PermissionsParamCollection();
        }

        public class PermissionsParamCollection : SqlParamCollection
        {
            public new PermissionsParamCollection Add(
                string columnBracket = "",
                string name = "",
                object value = null,
                SqlStatement sub = null,
                string raw = null,
                bool _using = true)
            {
                base.Add(new SqlParam(columnBracket, name, value, sub, raw, _using));
                return this;
            }
        }

        public static string Permissions_DeptName_WhereLike(string tableName = "t0") { return "([" + tableName + "].[DeptName] like '%' + @SearchText#ParamCount#_#CommandCount# + '%')"; }
        public const string SqlWhereExists_Permissions = "exists(select * from [Permissions] where #SqlWhere#)";
        public const string SqlWhereNotExists_Permissions = "not exists(select * from [Permissions] where #SqlWhere#)";
        public static PermissionsColumnCollection ReferenceType(this PermissionsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[ReferenceType]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Permissions_ReferenceType(this SqlColumnCollection self, string tableName = "Permissions", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[ReferenceType]" + _as.ExistsTo(" as [{0}]")); }
        public static PermissionsColumnCollection ReferenceId(this PermissionsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[ReferenceId]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Permissions_ReferenceId(this SqlColumnCollection self, string tableName = "Permissions", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[ReferenceId]" + _as.ExistsTo(" as [{0}]")); }
        public static PermissionsColumnCollection DeptId(this PermissionsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[DeptId]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Permissions_DeptId(this SqlColumnCollection self, string tableName = "Permissions", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[DeptId]" + _as.ExistsTo(" as [{0}]")); }
        public static PermissionsColumnCollection UserId(this PermissionsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[UserId]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Permissions_UserId(this SqlColumnCollection self, string tableName = "Permissions", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[UserId]" + _as.ExistsTo(" as [{0}]")); }
        public static PermissionsColumnCollection Ver(this PermissionsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Ver]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Permissions_Ver(this SqlColumnCollection self, string tableName = "Permissions", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Ver]" + _as.ExistsTo(" as [{0}]")); }
        public static PermissionsColumnCollection DeptName(this PermissionsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t1].[DeptName]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Permissions_DeptName(this SqlColumnCollection self, string tableName = "Permissions", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[DeptName]" + _as.ExistsTo(" as [{0}]")); }
        public static PermissionsColumnCollection FirstAndLastNameOrder(this PermissionsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t2].[FirstAndLastNameOrder]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Permissions_FirstAndLastNameOrder(this SqlColumnCollection self, string tableName = "Permissions", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[FirstAndLastNameOrder]" + _as.ExistsTo(" as [{0}]")); }
        public static PermissionsColumnCollection PermissionType(this PermissionsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[PermissionType]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Permissions_PermissionType(this SqlColumnCollection self, string tableName = "Permissions", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[PermissionType]" + _as.ExistsTo(" as [{0}]")); }
        public static PermissionsColumnCollection Comments(this PermissionsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Comments]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Permissions_Comments(this SqlColumnCollection self, string tableName = "Permissions", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Comments]" + _as.ExistsTo(" as [{0}]")); }
        public static PermissionsColumnCollection Creator(this PermissionsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Creator]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Permissions_Creator(this SqlColumnCollection self, string tableName = "Permissions", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Creator]" + _as.ExistsTo(" as [{0}]")); }
        public static PermissionsColumnCollection Updator(this PermissionsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Updator]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Permissions_Updator(this SqlColumnCollection self, string tableName = "Permissions", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Updator]" + _as.ExistsTo(" as [{0}]")); }
        public static PermissionsColumnCollection CreatedTime(this PermissionsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[CreatedTime]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Permissions_CreatedTime(this SqlColumnCollection self, string tableName = "Permissions", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[CreatedTime]" + _as.ExistsTo(" as [{0}]")); }
        public static PermissionsColumnCollection UpdatedTime(this PermissionsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[UpdatedTime]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Permissions_UpdatedTime(this SqlColumnCollection self, string tableName = "Permissions", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[UpdatedTime]" + _as.ExistsTo(" as [{0}]")); }
        public static PermissionsColumnCollection FullName1(this PermissionsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "[t2].[FirstName] + ' ' + [t2].[LastName] as [FullName1]"); }
        public static SqlColumnCollection Permissions_FullName1(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "[t2].[FirstName] + ' ' + [t2].[LastName] as [FullName1]"); }
        public static PermissionsColumnCollection FullName2(this PermissionsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "[t2].[LastName] + ' ' + [t2].[FirstName] as [FullName2]"); }
        public static SqlColumnCollection Permissions_FullName2(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "[t2].[LastName] + ' ' + [t2].[FirstName] as [FullName2]"); }
        public static PermissionsColumnCollection PermissionsCount(this PermissionsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "count(*) as PermissionsCount"); }
        public static PermissionsColumnCollection CreatedTimeMax(this PermissionsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[CreatedTime]) as [CreatedTimeMax]"); }
        public static SqlColumnCollection Permissions_CreatedTimeMax(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[CreatedTime]) as [CreatedTimeMax]"); }
        public static PermissionsColumnCollection CreatedTimeMin(this PermissionsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[CreatedTime]) as [CreatedTimeMin]"); }
        public static SqlColumnCollection Permissions_CreatedTimeMin(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[CreatedTime]) as [CreatedTimeMin]"); }
        public static PermissionsColumnCollection UpdatedTimeMax(this PermissionsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[UpdatedTime]) as [UpdatedTimeMax]"); }
        public static SqlColumnCollection Permissions_UpdatedTimeMax(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[UpdatedTime]) as [UpdatedTimeMax]"); }
        public static PermissionsColumnCollection UpdatedTimeMin(this PermissionsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[UpdatedTime]) as [UpdatedTimeMin]"); }
        public static SqlColumnCollection Permissions_UpdatedTimeMin(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[UpdatedTime]) as [UpdatedTimeMin]"); }
        public static PermissionsWhereCollection ReferenceType(this PermissionsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[ReferenceType]" }, "ReferenceType", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Permissions_ReferenceType(this SqlWhereCollection self, object value = null, string tableName = "Permissions", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[ReferenceType]" }, "ReferenceType", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static PermissionsWhereCollection ReferenceId(this PermissionsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[ReferenceId]" }, "ReferenceId", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Permissions_ReferenceId(this SqlWhereCollection self, object value = null, string tableName = "Permissions", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[ReferenceId]" }, "ReferenceId", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static PermissionsWhereCollection DeptId(this PermissionsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[DeptId]" }, "DeptId", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Permissions_DeptId(this SqlWhereCollection self, object value = null, string tableName = "Permissions", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[DeptId]" }, "DeptId", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static PermissionsWhereCollection UserId(this PermissionsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[UserId]" }, "UserId", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Permissions_UserId(this SqlWhereCollection self, object value = null, string tableName = "Permissions", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[UserId]" }, "UserId", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static PermissionsWhereCollection Ver(this PermissionsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Ver]" }, "Ver", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Permissions_Ver(this SqlWhereCollection self, object value = null, string tableName = "Permissions", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Ver]" }, "Ver", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static PermissionsWhereCollection DeptName(this PermissionsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t1].[DeptName]" }, "DeptName", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Permissions_DeptName(this SqlWhereCollection self, object value = null, string tableName = "Permissions", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[DeptName]" }, "DeptName", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static PermissionsWhereCollection FirstAndLastNameOrder(this PermissionsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t2].[FirstAndLastNameOrder]" }, "FirstAndLastNameOrder", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Permissions_FirstAndLastNameOrder(this SqlWhereCollection self, object value = null, string tableName = "Permissions", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[FirstAndLastNameOrder]" }, "FirstAndLastNameOrder", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static PermissionsWhereCollection PermissionType(this PermissionsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[PermissionType]" }, "PermissionType", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Permissions_PermissionType(this SqlWhereCollection self, object value = null, string tableName = "Permissions", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[PermissionType]" }, "PermissionType", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static PermissionsWhereCollection Comments(this PermissionsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Comments]" }, "Comments", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Permissions_Comments(this SqlWhereCollection self, object value = null, string tableName = "Permissions", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Comments]" }, "Comments", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static PermissionsWhereCollection Creator(this PermissionsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Creator]" }, "Creator", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Permissions_Creator(this SqlWhereCollection self, object value = null, string tableName = "Permissions", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Creator]" }, "Creator", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static PermissionsWhereCollection Updator(this PermissionsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Updator]" }, "Updator", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Permissions_Updator(this SqlWhereCollection self, object value = null, string tableName = "Permissions", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Updator]" }, "Updator", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static PermissionsWhereCollection CreatedTime(this PermissionsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[CreatedTime]" }, "CreatedTime", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Permissions_CreatedTime(this SqlWhereCollection self, object value = null, string tableName = "Permissions", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[CreatedTime]" }, "CreatedTime", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static PermissionsWhereCollection UpdatedTime(this PermissionsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[UpdatedTime]" }, "UpdatedTime", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Permissions_UpdatedTime(this SqlWhereCollection self, object value = null, string tableName = "Permissions", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[UpdatedTime]" }, "UpdatedTime", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static PermissionsWhereCollection FullName1(this PermissionsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t2].[FirstName] + ' ' + [t2].[LastName]" }, "FullName1", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Permissions_FullName1(this SqlWhereCollection self, object value = null, string tableName = "Permissions", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t2].[FirstName] + ' ' + [t2].[LastName]" }, "FullName1", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static PermissionsWhereCollection FullName2(this PermissionsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t2].[LastName] + ' ' + [t2].[FirstName]" }, "FullName2", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Permissions_FullName2(this SqlWhereCollection self, object value = null, string tableName = "Permissions", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t2].[LastName] + ' ' + [t2].[FirstName]" }, "FullName2", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static PermissionsWhereCollection ReferenceId_In(this PermissionsWhereCollection self, IEnumerable<long> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[ReferenceId]" }, "ReferenceId", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Permissions_ReferenceId_In(this SqlWhereCollection self, IEnumerable<long> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[ReferenceId]" }, "ReferenceId", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static PermissionsWhereCollection DeptId_In(this PermissionsWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[DeptId]" }, "DeptId", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Permissions_DeptId_In(this SqlWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[DeptId]" }, "DeptId", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static PermissionsWhereCollection UserId_In(this PermissionsWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[UserId]" }, "UserId", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Permissions_UserId_In(this SqlWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[UserId]" }, "UserId", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static PermissionsWhereCollection Ver_In(this PermissionsWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Ver]" }, "Ver", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Permissions_Ver_In(this SqlWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Ver]" }, "Ver", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static PermissionsWhereCollection FirstAndLastNameOrder_In(this PermissionsWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t2].[FirstAndLastNameOrder]" }, "FirstAndLastNameOrder", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Permissions_FirstAndLastNameOrder_In(this SqlWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t2].[FirstAndLastNameOrder]" }, "FirstAndLastNameOrder", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static PermissionsWhereCollection PermissionType_In(this PermissionsWhereCollection self, IEnumerable<long> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[PermissionType]" }, "PermissionType", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Permissions_PermissionType_In(this SqlWhereCollection self, IEnumerable<long> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[PermissionType]" }, "PermissionType", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static PermissionsWhereCollection Creator_In(this PermissionsWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Creator]" }, "Creator", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Permissions_Creator_In(this SqlWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Creator]" }, "Creator", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static PermissionsWhereCollection Updator_In(this PermissionsWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Updator]" }, "Updator", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Permissions_Updator_In(this SqlWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Updator]" }, "Updator", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static PermissionsWhereCollection ReferenceId_Between(this PermissionsWhereCollection self, long begin, long end, bool _using = true) { return self.Add(new string[] { "[t0].[ReferenceId]" }, "ReferenceId", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Permissions_ReferenceId_Between(this SqlWhereCollection self, long begin, long end, bool _using = true) { return self.Add(new string[] { "[t0].[ReferenceId]" }, "ReferenceId", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static PermissionsWhereCollection DeptId_Between(this PermissionsWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[DeptId]" }, "DeptId", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Permissions_DeptId_Between(this SqlWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[DeptId]" }, "DeptId", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static PermissionsWhereCollection UserId_Between(this PermissionsWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[UserId]" }, "UserId", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Permissions_UserId_Between(this SqlWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[UserId]" }, "UserId", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static PermissionsWhereCollection Ver_Between(this PermissionsWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Ver]" }, "Ver", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Permissions_Ver_Between(this SqlWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Ver]" }, "Ver", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static PermissionsWhereCollection FirstAndLastNameOrder_Between(this PermissionsWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t2].[FirstAndLastNameOrder]" }, "FirstAndLastNameOrder", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Permissions_FirstAndLastNameOrder_Between(this SqlWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t2].[FirstAndLastNameOrder]" }, "FirstAndLastNameOrder", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static PermissionsWhereCollection PermissionType_Between(this PermissionsWhereCollection self, long begin, long end, bool _using = true) { return self.Add(new string[] { "[t0].[PermissionType]" }, "PermissionType", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Permissions_PermissionType_Between(this SqlWhereCollection self, long begin, long end, bool _using = true) { return self.Add(new string[] { "[t0].[PermissionType]" }, "PermissionType", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static PermissionsWhereCollection Creator_Between(this PermissionsWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Creator]" }, "Creator", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Permissions_Creator_Between(this SqlWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Creator]" }, "Creator", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static PermissionsWhereCollection Updator_Between(this PermissionsWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Updator]" }, "Updator", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Permissions_Updator_Between(this SqlWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Updator]" }, "Updator", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static PermissionsWhereCollection CreatedTime_Between(this PermissionsWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[CreatedTime]" }, "CreatedTime", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Permissions_CreatedTime_Between(this SqlWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[CreatedTime]" }, "CreatedTime", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static PermissionsWhereCollection UpdatedTime_Between(this PermissionsWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[UpdatedTime]" }, "UpdatedTime", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Permissions_UpdatedTime_Between(this SqlWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[UpdatedTime]" }, "UpdatedTime", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static PermissionsWhereCollection Sub(this PermissionsWhereCollection self, SqlStatement sub, object value = null, string _operator = "=", bool _using = true) { return self.Add(null, null, value, _operator, sub: sub, _using: _using); }
        public static PermissionsWhereCollection Or(this PermissionsWhereCollection self, SqlWhereCollection or, bool _using = true) { return self.Add(null, null, or: or, _using: _using); }
        public static PermissionsGroupByCollection ReferenceType(this PermissionsGroupByCollection self) { return self.Add("[t0].[ReferenceType]"); }
        public static SqlGroupByCollection Permissions_ReferenceType(this SqlGroupByCollection self) { return self.Add("[t0].[ReferenceType]"); }
        public static PermissionsGroupByCollection ReferenceId(this PermissionsGroupByCollection self) { return self.Add("[t0].[ReferenceId]"); }
        public static SqlGroupByCollection Permissions_ReferenceId(this SqlGroupByCollection self) { return self.Add("[t0].[ReferenceId]"); }
        public static PermissionsGroupByCollection DeptId(this PermissionsGroupByCollection self) { return self.Add("[t0].[DeptId]"); }
        public static SqlGroupByCollection Permissions_DeptId(this SqlGroupByCollection self) { return self.Add("[t0].[DeptId]"); }
        public static PermissionsGroupByCollection UserId(this PermissionsGroupByCollection self) { return self.Add("[t0].[UserId]"); }
        public static SqlGroupByCollection Permissions_UserId(this SqlGroupByCollection self) { return self.Add("[t0].[UserId]"); }
        public static PermissionsGroupByCollection Ver(this PermissionsGroupByCollection self) { return self.Add("[t0].[Ver]"); }
        public static SqlGroupByCollection Permissions_Ver(this SqlGroupByCollection self) { return self.Add("[t0].[Ver]"); }
        public static PermissionsGroupByCollection DeptName(this PermissionsGroupByCollection self) { return self.Add("[t1].[DeptName]"); }
        public static SqlGroupByCollection Permissions_DeptName(this SqlGroupByCollection self) { return self.Add("[t1].[DeptName]"); }
        public static PermissionsGroupByCollection FullName1(this PermissionsGroupByCollection self) { return self.Add("[t2].[FirstName] + ' ' + [t2].[LastName]"); }
        public static SqlGroupByCollection Permissions_FullName1(this SqlGroupByCollection self) { return self.Add("[t2].[FirstName] + ' ' + [t2].[LastName]"); }
        public static PermissionsGroupByCollection FullName2(this PermissionsGroupByCollection self) { return self.Add("[t2].[LastName] + ' ' + [t2].[FirstName]"); }
        public static SqlGroupByCollection Permissions_FullName2(this SqlGroupByCollection self) { return self.Add("[t2].[LastName] + ' ' + [t2].[FirstName]"); }
        public static PermissionsGroupByCollection FirstAndLastNameOrder(this PermissionsGroupByCollection self) { return self.Add("[t2].[FirstAndLastNameOrder]"); }
        public static SqlGroupByCollection Permissions_FirstAndLastNameOrder(this SqlGroupByCollection self) { return self.Add("[t2].[FirstAndLastNameOrder]"); }
        public static PermissionsGroupByCollection PermissionType(this PermissionsGroupByCollection self) { return self.Add("[t0].[PermissionType]"); }
        public static SqlGroupByCollection Permissions_PermissionType(this SqlGroupByCollection self) { return self.Add("[t0].[PermissionType]"); }
        public static PermissionsGroupByCollection Comments(this PermissionsGroupByCollection self) { return self.Add("[t0].[Comments]"); }
        public static SqlGroupByCollection Permissions_Comments(this SqlGroupByCollection self) { return self.Add("[t0].[Comments]"); }
        public static PermissionsGroupByCollection Creator(this PermissionsGroupByCollection self) { return self.Add("[t0].[Creator]"); }
        public static SqlGroupByCollection Permissions_Creator(this SqlGroupByCollection self) { return self.Add("[t0].[Creator]"); }
        public static PermissionsGroupByCollection Updator(this PermissionsGroupByCollection self) { return self.Add("[t0].[Updator]"); }
        public static SqlGroupByCollection Permissions_Updator(this SqlGroupByCollection self) { return self.Add("[t0].[Updator]"); }
        public static PermissionsGroupByCollection CreatedTime(this PermissionsGroupByCollection self) { return self.Add("[t0].[CreatedTime]"); }
        public static SqlGroupByCollection Permissions_CreatedTime(this SqlGroupByCollection self) { return self.Add("[t0].[CreatedTime]"); }
        public static PermissionsGroupByCollection UpdatedTime(this PermissionsGroupByCollection self) { return self.Add("[t0].[UpdatedTime]"); }
        public static SqlGroupByCollection Permissions_UpdatedTime(this SqlGroupByCollection self) { return self.Add("[t0].[UpdatedTime]"); }
        public static PermissionsHavingCollection PermissionsCount(this PermissionsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "count(*)", name: "PermissionsCount", value: value, _operator: _operator); }
        public static PermissionsHavingCollection CreatedTimeMax(this PermissionsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[CreatedTime])", name: "CreatedTimeMax", value: value, _operator: _operator); }
        public static SqlHavingCollection Permissions_CreatedTimeMax(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[CreatedTime])", name: "CreatedTimeMax", value: value, _operator: _operator); }
        public static PermissionsHavingCollection CreatedTimeMin(this PermissionsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[CreatedTime])", name: "CreatedTimeMin", value: value, _operator: _operator); }
        public static SqlHavingCollection Permissions_CreatedTimeMin(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[CreatedTime])", name: "CreatedTimeMin", value: value, _operator: _operator); }
        public static PermissionsHavingCollection UpdatedTimeMax(this PermissionsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[UpdatedTime])", name: "UpdatedTimeMax", value: value, _operator: _operator); }
        public static SqlHavingCollection Permissions_UpdatedTimeMax(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[UpdatedTime])", name: "UpdatedTimeMax", value: value, _operator: _operator); }
        public static PermissionsHavingCollection UpdatedTimeMin(this PermissionsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[UpdatedTime])", name: "UpdatedTimeMin", value: value, _operator: _operator); }
        public static SqlHavingCollection Permissions_UpdatedTimeMin(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[UpdatedTime])", name: "UpdatedTimeMin", value: value, _operator: _operator); }
        public static PermissionsOrderByCollection ReferenceType(this PermissionsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[ReferenceType]"); }
        public static PermissionsOrderByCollection ReferenceId(this PermissionsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[ReferenceId]"); }
        public static PermissionsOrderByCollection DeptId(this PermissionsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[DeptId]"); }
        public static PermissionsOrderByCollection UserId(this PermissionsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[UserId]"); }
        public static PermissionsOrderByCollection Ver(this PermissionsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Ver]"); }
        public static PermissionsOrderByCollection DeptName(this PermissionsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t1].[DeptName]"); }
        public static PermissionsOrderByCollection FullName1(this PermissionsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t2].[FirstName] + ' ' + [t2].[LastName]"); }
        public static PermissionsOrderByCollection FullName2(this PermissionsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t2].[LastName] + ' ' + [t2].[FirstName]"); }
        public static PermissionsOrderByCollection FirstAndLastNameOrder(this PermissionsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t2].[FirstAndLastNameOrder]"); }
        public static PermissionsOrderByCollection PermissionType(this PermissionsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[PermissionType]"); }
        public static PermissionsOrderByCollection Comments(this PermissionsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Comments]"); }
        public static PermissionsOrderByCollection Creator(this PermissionsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Creator]"); }
        public static PermissionsOrderByCollection Updator(this PermissionsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Updator]"); }
        public static PermissionsOrderByCollection CreatedTime(this PermissionsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[CreatedTime]"); }
        public static PermissionsOrderByCollection UpdatedTime(this PermissionsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[UpdatedTime]"); }
        public static SqlOrderByCollection Permissions_ReferenceType(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[ReferenceType]"); }
        public static SqlOrderByCollection Permissions_ReferenceId(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[ReferenceId]"); }
        public static SqlOrderByCollection Permissions_DeptId(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[DeptId]"); }
        public static SqlOrderByCollection Permissions_UserId(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[UserId]"); }
        public static SqlOrderByCollection Permissions_Ver(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Ver]"); }
        public static SqlOrderByCollection Permissions_DeptName(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[t1].[DeptName]"); }
        public static SqlOrderByCollection Permissions_FullName1(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[t2].[FirstName] + ' ' + [t2].[LastName]"); }
        public static SqlOrderByCollection Permissions_FullName2(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[t2].[LastName] + ' ' + [t2].[FirstName]"); }
        public static SqlOrderByCollection Permissions_FirstAndLastNameOrder(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[t2].[FirstAndLastNameOrder]"); }
        public static SqlOrderByCollection Permissions_PermissionType(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[PermissionType]"); }
        public static SqlOrderByCollection Permissions_Comments(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Comments]"); }
        public static SqlOrderByCollection Permissions_Creator(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Creator]"); }
        public static SqlOrderByCollection Permissions_Updator(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Updator]"); }
        public static SqlOrderByCollection Permissions_CreatedTime(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[CreatedTime]"); }
        public static SqlOrderByCollection Permissions_UpdatedTime(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[UpdatedTime]"); }
        public static PermissionsOrderByCollection PermissionsCount(this PermissionsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "count(*)"); }
        public static PermissionsOrderByCollection CreatedTimeMax(this PermissionsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[CreatedTime])"); }
        public static SqlOrderByCollection Permissions_CreatedTimeMax(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[CreatedTime])"); }
        public static PermissionsOrderByCollection CreatedTimeMin(this PermissionsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[CreatedTime])"); }
        public static SqlOrderByCollection Permissions_CreatedTimeMin(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[CreatedTime])"); }
        public static PermissionsOrderByCollection UpdatedTimeMax(this PermissionsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[UpdatedTime])"); }
        public static SqlOrderByCollection Permissions_UpdatedTimeMax(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[UpdatedTime])"); }
        public static PermissionsOrderByCollection UpdatedTimeMin(this PermissionsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[UpdatedTime])"); }
        public static SqlOrderByCollection Permissions_UpdatedTimeMin(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[UpdatedTime])"); }
        public static PermissionsParamCollection ReferenceType(this PermissionsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ReferenceType]", "ReferenceType", value, sub, raw, _using); }
        public static SqlParamCollection Permissions_ReferenceType(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ReferenceType]", "ReferenceType", value, sub, raw, _using); }
        public static PermissionsParamCollection ReferenceId(this PermissionsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ReferenceId]", "ReferenceId", value, sub, raw, _using); }
        public static SqlParamCollection Permissions_ReferenceId(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ReferenceId]", "ReferenceId", value, sub, raw, _using); }
        public static PermissionsParamCollection DeptId(this PermissionsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DeptId]", "DeptId", value, sub, raw, _using); }
        public static SqlParamCollection Permissions_DeptId(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DeptId]", "DeptId", value, sub, raw, _using); }
        public static PermissionsParamCollection UserId(this PermissionsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[UserId]", "UserId", value, sub, raw, _using); }
        public static SqlParamCollection Permissions_UserId(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[UserId]", "UserId", value, sub, raw, _using); }
        public static PermissionsParamCollection Ver(this PermissionsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Ver]", "Ver", value, sub, raw, _using); }
        public static SqlParamCollection Permissions_Ver(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Ver]", "Ver", value, sub, raw, _using); }
        public static PermissionsParamCollection DeptName(this PermissionsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DeptName]", "DeptName", value, sub, raw, _using); }
        public static SqlParamCollection Permissions_DeptName(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DeptName]", "DeptName", value, sub, raw, _using); }
        public static PermissionsParamCollection FirstAndLastNameOrder(this PermissionsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[FirstAndLastNameOrder]", "FirstAndLastNameOrder", value.ToInt(), sub, raw, _using); }
        public static SqlParamCollection Permissions_FirstAndLastNameOrder(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[FirstAndLastNameOrder]", "FirstAndLastNameOrder", value.ToInt(), sub, raw, _using); }
        public static PermissionsParamCollection PermissionType(this PermissionsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[PermissionType]", "PermissionType", value.ToLong(), sub, raw, _using); }
        public static SqlParamCollection Permissions_PermissionType(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[PermissionType]", "PermissionType", value.ToLong(), sub, raw, _using); }
        public static PermissionsParamCollection Comments(this PermissionsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Comments]", "Comments", value, sub, raw, _using); }
        public static SqlParamCollection Permissions_Comments(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Comments]", "Comments", value, sub, raw, _using); }
        public static PermissionsParamCollection Creator(this PermissionsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Creator]", "Creator", value, sub, raw, _using); }
        public static SqlParamCollection Permissions_Creator(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Creator]", "Creator", value, sub, raw, _using); }
        public static PermissionsParamCollection Updator(this PermissionsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Updator]", "Updator", value, sub, raw, _using); }
        public static SqlParamCollection Permissions_Updator(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Updator]", "Updator", value, sub, raw, _using); }
        public static PermissionsParamCollection CreatedTime(this PermissionsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CreatedTime]", "CreatedTime", value, sub, raw, _using); }
        public static SqlParamCollection Permissions_CreatedTime(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CreatedTime]", "CreatedTime", value, sub, raw, _using); }
        public static PermissionsParamCollection UpdatedTime(this PermissionsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[UpdatedTime]", "UpdatedTime", value, sub, raw, _using); }
        public static SqlParamCollection Permissions_UpdatedTime(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[UpdatedTime]", "UpdatedTime", value, sub, raw, _using); }

        public static OutgoingMailsColumnCollection OutgoingMailsColumn()
        {
            return new OutgoingMailsColumnCollection();
        }

        public class OutgoingMailsColumnCollection : SqlColumnCollection
        {
            public OutgoingMailsColumnCollection Add(params string[] columnBrackets)
            {
                base.Add(false, columnBrackets);
                return this;
            }

            public new OutgoingMailsColumnCollection Add(bool duplicates = false, params string[] columnBrackets)
            {
                base.Add(duplicates, columnBrackets);
                return this;
            }
        }

        public static OutgoingMailsJoinCollection OutgoingMailsJoin()
        {
            return new OutgoingMailsJoinCollection();
        }

        public class OutgoingMailsJoinCollection : SqlJoinCollection
        {
            public new OutgoingMailsJoinCollection Add(params string[] columnBrackets)
            {
                columnBrackets.ForEach(columnBracket => base.Add(new SqlJoin(columnBracket)));
                return this;
            }
        }

        public static OutgoingMailsWhereCollection OutgoingMailsWhere()
        {
            return new OutgoingMailsWhereCollection();
        }

        public class OutgoingMailsWhereCollection : SqlWhereCollection
        {
            public new OutgoingMailsWhereCollection Add(
                string[] columnBrackets = null,
                string name = "",
                object value = null,
                string _operator = "=",
                string multiColumnOperator = " or ",
                string multiParamOperator = " and ",
                SqlStatement sub = null,
                string raw = "",
                SqlWhereCollection or = null,
                bool _using = true)
            {
                base.Add(new SqlWhere(
                    columnBrackets: columnBrackets,
                    name: name,
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    sub: sub,
                    raw: raw,
                    or: or,
                    _using: _using));
                return this;
            }
        }

        public static OutgoingMailsGroupByCollection OutgoingMailsGroupBy()
        {
            return new OutgoingMailsGroupByCollection();
        }

        public class OutgoingMailsGroupByCollection : SqlGroupByCollection
        {
            public new OutgoingMailsGroupByCollection Add(
                params string[] columnBrackets)
            {
                columnBrackets.ForEach(columnBracket =>
                    base.Add(new SqlGroupBy(columnBracket)));
                return this;
            }
        }

        public static OutgoingMailsHavingCollection OutgoingMailsHaving()
        {
            return new OutgoingMailsHavingCollection();
        }

        public class OutgoingMailsHavingCollection : SqlHavingCollection
        {
            public OutgoingMailsHavingCollection Add(
                string columnBracket, string name, object value, string _operator)
            {
                base.Add(new SqlHaving(
                    columnBracket: columnBracket,
                    name: name,
                    value: value,
                    _operator: _operator));
                return this;
            }
        }

        public static OutgoingMailsOrderByCollection OutgoingMailsOrderBy()
        {
            return new OutgoingMailsOrderByCollection();
        }

        public class OutgoingMailsOrderByCollection : SqlOrderByCollection
        {
            public new OutgoingMailsOrderByCollection Add(
                SqlOrderBy.Types type = SqlOrderBy.Types.asc,
                params string[] columnBrackets)
            {
                columnBrackets.ForEach(columnBracket =>
                    base.Add(new SqlOrderBy(columnBracket, type)));
                return this;
            }
        }

        public static OutgoingMailsParamCollection OutgoingMailsParam()
        {
            return new OutgoingMailsParamCollection();
        }

        public class OutgoingMailsParamCollection : SqlParamCollection
        {
            public new OutgoingMailsParamCollection Add(
                string columnBracket = "",
                string name = "",
                object value = null,
                SqlStatement sub = null,
                string raw = null,
                bool _using = true)
            {
                base.Add(new SqlParam(columnBracket, name, value, sub, raw, _using));
                return this;
            }
        }

        public const string SqlWhereExists_OutgoingMails = "exists(select * from [OutgoingMails] where #SqlWhere#)";
        public const string SqlWhereNotExists_OutgoingMails = "not exists(select * from [OutgoingMails] where #SqlWhere#)";
        public static OutgoingMailsColumnCollection ReferenceType(this OutgoingMailsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[ReferenceType]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection OutgoingMails_ReferenceType(this SqlColumnCollection self, string tableName = "OutgoingMails", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[ReferenceType]" + _as.ExistsTo(" as [{0}]")); }
        public static OutgoingMailsColumnCollection ReferenceId(this OutgoingMailsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[ReferenceId]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection OutgoingMails_ReferenceId(this SqlColumnCollection self, string tableName = "OutgoingMails", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[ReferenceId]" + _as.ExistsTo(" as [{0}]")); }
        public static OutgoingMailsColumnCollection ReferenceVer(this OutgoingMailsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[ReferenceVer]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection OutgoingMails_ReferenceVer(this SqlColumnCollection self, string tableName = "OutgoingMails", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[ReferenceVer]" + _as.ExistsTo(" as [{0}]")); }
        public static OutgoingMailsColumnCollection OutgoingMailId(this OutgoingMailsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[OutgoingMailId]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection OutgoingMails_OutgoingMailId(this SqlColumnCollection self, string tableName = "OutgoingMails", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[OutgoingMailId]" + _as.ExistsTo(" as [{0}]")); }
        public static OutgoingMailsColumnCollection Ver(this OutgoingMailsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Ver]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection OutgoingMails_Ver(this SqlColumnCollection self, string tableName = "OutgoingMails", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Ver]" + _as.ExistsTo(" as [{0}]")); }
        public static OutgoingMailsColumnCollection Host(this OutgoingMailsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Host]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection OutgoingMails_Host(this SqlColumnCollection self, string tableName = "OutgoingMails", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Host]" + _as.ExistsTo(" as [{0}]")); }
        public static OutgoingMailsColumnCollection Port(this OutgoingMailsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Port]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection OutgoingMails_Port(this SqlColumnCollection self, string tableName = "OutgoingMails", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Port]" + _as.ExistsTo(" as [{0}]")); }
        public static OutgoingMailsColumnCollection From(this OutgoingMailsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[From]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection OutgoingMails_From(this SqlColumnCollection self, string tableName = "OutgoingMails", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[From]" + _as.ExistsTo(" as [{0}]")); }
        public static OutgoingMailsColumnCollection To(this OutgoingMailsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[To]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection OutgoingMails_To(this SqlColumnCollection self, string tableName = "OutgoingMails", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[To]" + _as.ExistsTo(" as [{0}]")); }
        public static OutgoingMailsColumnCollection Cc(this OutgoingMailsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Cc]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection OutgoingMails_Cc(this SqlColumnCollection self, string tableName = "OutgoingMails", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Cc]" + _as.ExistsTo(" as [{0}]")); }
        public static OutgoingMailsColumnCollection Bcc(this OutgoingMailsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Bcc]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection OutgoingMails_Bcc(this SqlColumnCollection self, string tableName = "OutgoingMails", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Bcc]" + _as.ExistsTo(" as [{0}]")); }
        public static OutgoingMailsColumnCollection Title(this OutgoingMailsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Title]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection OutgoingMails_Title(this SqlColumnCollection self, string tableName = "OutgoingMails", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Title]" + _as.ExistsTo(" as [{0}]")); }
        public static OutgoingMailsColumnCollection Body(this OutgoingMailsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Body]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection OutgoingMails_Body(this SqlColumnCollection self, string tableName = "OutgoingMails", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Body]" + _as.ExistsTo(" as [{0}]")); }
        public static OutgoingMailsColumnCollection SentTime(this OutgoingMailsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[SentTime]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection OutgoingMails_SentTime(this SqlColumnCollection self, string tableName = "OutgoingMails", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[SentTime]" + _as.ExistsTo(" as [{0}]")); }
        public static OutgoingMailsColumnCollection Comments(this OutgoingMailsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Comments]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection OutgoingMails_Comments(this SqlColumnCollection self, string tableName = "OutgoingMails", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Comments]" + _as.ExistsTo(" as [{0}]")); }
        public static OutgoingMailsColumnCollection Creator(this OutgoingMailsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Creator]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection OutgoingMails_Creator(this SqlColumnCollection self, string tableName = "OutgoingMails", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Creator]" + _as.ExistsTo(" as [{0}]")); }
        public static OutgoingMailsColumnCollection Updator(this OutgoingMailsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Updator]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection OutgoingMails_Updator(this SqlColumnCollection self, string tableName = "OutgoingMails", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Updator]" + _as.ExistsTo(" as [{0}]")); }
        public static OutgoingMailsColumnCollection CreatedTime(this OutgoingMailsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[CreatedTime]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection OutgoingMails_CreatedTime(this SqlColumnCollection self, string tableName = "OutgoingMails", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[CreatedTime]" + _as.ExistsTo(" as [{0}]")); }
        public static OutgoingMailsColumnCollection UpdatedTime(this OutgoingMailsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[UpdatedTime]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection OutgoingMails_UpdatedTime(this SqlColumnCollection self, string tableName = "OutgoingMails", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[UpdatedTime]" + _as.ExistsTo(" as [{0}]")); }
        public static OutgoingMailsColumnCollection OutgoingMailsCount(this OutgoingMailsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "count(*) as OutgoingMailsCount"); }
        public static OutgoingMailsColumnCollection CreatedTimeMax(this OutgoingMailsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[CreatedTime]) as [CreatedTimeMax]"); }
        public static SqlColumnCollection OutgoingMails_CreatedTimeMax(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[CreatedTime]) as [CreatedTimeMax]"); }
        public static OutgoingMailsColumnCollection CreatedTimeMin(this OutgoingMailsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[CreatedTime]) as [CreatedTimeMin]"); }
        public static SqlColumnCollection OutgoingMails_CreatedTimeMin(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[CreatedTime]) as [CreatedTimeMin]"); }
        public static OutgoingMailsColumnCollection UpdatedTimeMax(this OutgoingMailsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[UpdatedTime]) as [UpdatedTimeMax]"); }
        public static SqlColumnCollection OutgoingMails_UpdatedTimeMax(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[UpdatedTime]) as [UpdatedTimeMax]"); }
        public static OutgoingMailsColumnCollection UpdatedTimeMin(this OutgoingMailsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[UpdatedTime]) as [UpdatedTimeMin]"); }
        public static SqlColumnCollection OutgoingMails_UpdatedTimeMin(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[UpdatedTime]) as [UpdatedTimeMin]"); }
        public static OutgoingMailsWhereCollection ReferenceType(this OutgoingMailsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[ReferenceType]" }, "ReferenceType", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection OutgoingMails_ReferenceType(this SqlWhereCollection self, object value = null, string tableName = "OutgoingMails", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[ReferenceType]" }, "ReferenceType", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static OutgoingMailsWhereCollection ReferenceId(this OutgoingMailsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[ReferenceId]" }, "ReferenceId", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection OutgoingMails_ReferenceId(this SqlWhereCollection self, object value = null, string tableName = "OutgoingMails", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[ReferenceId]" }, "ReferenceId", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static OutgoingMailsWhereCollection ReferenceVer(this OutgoingMailsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[ReferenceVer]" }, "ReferenceVer", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection OutgoingMails_ReferenceVer(this SqlWhereCollection self, object value = null, string tableName = "OutgoingMails", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[ReferenceVer]" }, "ReferenceVer", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static OutgoingMailsWhereCollection OutgoingMailId(this OutgoingMailsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[OutgoingMailId]" }, "OutgoingMailId", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection OutgoingMails_OutgoingMailId(this SqlWhereCollection self, object value = null, string tableName = "OutgoingMails", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[OutgoingMailId]" }, "OutgoingMailId", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static OutgoingMailsWhereCollection Ver(this OutgoingMailsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Ver]" }, "Ver", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection OutgoingMails_Ver(this SqlWhereCollection self, object value = null, string tableName = "OutgoingMails", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Ver]" }, "Ver", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static OutgoingMailsWhereCollection Host(this OutgoingMailsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Host]" }, "Host", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection OutgoingMails_Host(this SqlWhereCollection self, object value = null, string tableName = "OutgoingMails", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Host]" }, "Host", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static OutgoingMailsWhereCollection Port(this OutgoingMailsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Port]" }, "Port", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection OutgoingMails_Port(this SqlWhereCollection self, object value = null, string tableName = "OutgoingMails", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Port]" }, "Port", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static OutgoingMailsWhereCollection From(this OutgoingMailsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[From]" }, "From", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection OutgoingMails_From(this SqlWhereCollection self, object value = null, string tableName = "OutgoingMails", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[From]" }, "From", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static OutgoingMailsWhereCollection To(this OutgoingMailsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[To]" }, "To", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection OutgoingMails_To(this SqlWhereCollection self, object value = null, string tableName = "OutgoingMails", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[To]" }, "To", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static OutgoingMailsWhereCollection Cc(this OutgoingMailsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Cc]" }, "Cc", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection OutgoingMails_Cc(this SqlWhereCollection self, object value = null, string tableName = "OutgoingMails", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Cc]" }, "Cc", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static OutgoingMailsWhereCollection Bcc(this OutgoingMailsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Bcc]" }, "Bcc", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection OutgoingMails_Bcc(this SqlWhereCollection self, object value = null, string tableName = "OutgoingMails", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Bcc]" }, "Bcc", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static OutgoingMailsWhereCollection Title(this OutgoingMailsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Title]" }, "Title", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection OutgoingMails_Title(this SqlWhereCollection self, object value = null, string tableName = "OutgoingMails", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Title]" }, "Title", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static OutgoingMailsWhereCollection Body(this OutgoingMailsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Body]" }, "Body", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection OutgoingMails_Body(this SqlWhereCollection self, object value = null, string tableName = "OutgoingMails", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Body]" }, "Body", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static OutgoingMailsWhereCollection SentTime(this OutgoingMailsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[SentTime]" }, "SentTime", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection OutgoingMails_SentTime(this SqlWhereCollection self, object value = null, string tableName = "OutgoingMails", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[SentTime]" }, "SentTime", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static OutgoingMailsWhereCollection Comments(this OutgoingMailsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Comments]" }, "Comments", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection OutgoingMails_Comments(this SqlWhereCollection self, object value = null, string tableName = "OutgoingMails", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Comments]" }, "Comments", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static OutgoingMailsWhereCollection Creator(this OutgoingMailsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Creator]" }, "Creator", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection OutgoingMails_Creator(this SqlWhereCollection self, object value = null, string tableName = "OutgoingMails", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Creator]" }, "Creator", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static OutgoingMailsWhereCollection Updator(this OutgoingMailsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Updator]" }, "Updator", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection OutgoingMails_Updator(this SqlWhereCollection self, object value = null, string tableName = "OutgoingMails", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Updator]" }, "Updator", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static OutgoingMailsWhereCollection CreatedTime(this OutgoingMailsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[CreatedTime]" }, "CreatedTime", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection OutgoingMails_CreatedTime(this SqlWhereCollection self, object value = null, string tableName = "OutgoingMails", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[CreatedTime]" }, "CreatedTime", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static OutgoingMailsWhereCollection UpdatedTime(this OutgoingMailsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[UpdatedTime]" }, "UpdatedTime", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection OutgoingMails_UpdatedTime(this SqlWhereCollection self, object value = null, string tableName = "OutgoingMails", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[UpdatedTime]" }, "UpdatedTime", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static OutgoingMailsWhereCollection ReferenceId_In(this OutgoingMailsWhereCollection self, IEnumerable<long> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[ReferenceId]" }, "ReferenceId", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection OutgoingMails_ReferenceId_In(this SqlWhereCollection self, IEnumerable<long> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[ReferenceId]" }, "ReferenceId", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static OutgoingMailsWhereCollection ReferenceVer_In(this OutgoingMailsWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[ReferenceVer]" }, "ReferenceVer", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection OutgoingMails_ReferenceVer_In(this SqlWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[ReferenceVer]" }, "ReferenceVer", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static OutgoingMailsWhereCollection OutgoingMailId_In(this OutgoingMailsWhereCollection self, IEnumerable<long> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[OutgoingMailId]" }, "OutgoingMailId", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection OutgoingMails_OutgoingMailId_In(this SqlWhereCollection self, IEnumerable<long> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[OutgoingMailId]" }, "OutgoingMailId", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static OutgoingMailsWhereCollection Ver_In(this OutgoingMailsWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Ver]" }, "Ver", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection OutgoingMails_Ver_In(this SqlWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Ver]" }, "Ver", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static OutgoingMailsWhereCollection Port_In(this OutgoingMailsWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Port]" }, "Port", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection OutgoingMails_Port_In(this SqlWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Port]" }, "Port", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static OutgoingMailsWhereCollection Creator_In(this OutgoingMailsWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Creator]" }, "Creator", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection OutgoingMails_Creator_In(this SqlWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Creator]" }, "Creator", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static OutgoingMailsWhereCollection Updator_In(this OutgoingMailsWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Updator]" }, "Updator", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection OutgoingMails_Updator_In(this SqlWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Updator]" }, "Updator", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static OutgoingMailsWhereCollection ReferenceId_Between(this OutgoingMailsWhereCollection self, long begin, long end, bool _using = true) { return self.Add(new string[] { "[t0].[ReferenceId]" }, "ReferenceId", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection OutgoingMails_ReferenceId_Between(this SqlWhereCollection self, long begin, long end, bool _using = true) { return self.Add(new string[] { "[t0].[ReferenceId]" }, "ReferenceId", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static OutgoingMailsWhereCollection ReferenceVer_Between(this OutgoingMailsWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[ReferenceVer]" }, "ReferenceVer", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection OutgoingMails_ReferenceVer_Between(this SqlWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[ReferenceVer]" }, "ReferenceVer", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static OutgoingMailsWhereCollection OutgoingMailId_Between(this OutgoingMailsWhereCollection self, long begin, long end, bool _using = true) { return self.Add(new string[] { "[t0].[OutgoingMailId]" }, "OutgoingMailId", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection OutgoingMails_OutgoingMailId_Between(this SqlWhereCollection self, long begin, long end, bool _using = true) { return self.Add(new string[] { "[t0].[OutgoingMailId]" }, "OutgoingMailId", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static OutgoingMailsWhereCollection Ver_Between(this OutgoingMailsWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Ver]" }, "Ver", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection OutgoingMails_Ver_Between(this SqlWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Ver]" }, "Ver", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static OutgoingMailsWhereCollection Port_Between(this OutgoingMailsWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Port]" }, "Port", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection OutgoingMails_Port_Between(this SqlWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Port]" }, "Port", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static OutgoingMailsWhereCollection Creator_Between(this OutgoingMailsWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Creator]" }, "Creator", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection OutgoingMails_Creator_Between(this SqlWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Creator]" }, "Creator", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static OutgoingMailsWhereCollection Updator_Between(this OutgoingMailsWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Updator]" }, "Updator", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection OutgoingMails_Updator_Between(this SqlWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Updator]" }, "Updator", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static OutgoingMailsWhereCollection SentTime_Between(this OutgoingMailsWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[SentTime]" }, "SentTime", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection OutgoingMails_SentTime_Between(this SqlWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[SentTime]" }, "SentTime", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static OutgoingMailsWhereCollection CreatedTime_Between(this OutgoingMailsWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[CreatedTime]" }, "CreatedTime", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection OutgoingMails_CreatedTime_Between(this SqlWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[CreatedTime]" }, "CreatedTime", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static OutgoingMailsWhereCollection UpdatedTime_Between(this OutgoingMailsWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[UpdatedTime]" }, "UpdatedTime", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection OutgoingMails_UpdatedTime_Between(this SqlWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[UpdatedTime]" }, "UpdatedTime", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static OutgoingMailsWhereCollection Sub(this OutgoingMailsWhereCollection self, SqlStatement sub, object value = null, string _operator = "=", bool _using = true) { return self.Add(null, null, value, _operator, sub: sub, _using: _using); }
        public static OutgoingMailsWhereCollection Or(this OutgoingMailsWhereCollection self, SqlWhereCollection or, bool _using = true) { return self.Add(null, null, or: or, _using: _using); }
        public static OutgoingMailsGroupByCollection ReferenceType(this OutgoingMailsGroupByCollection self) { return self.Add("[t0].[ReferenceType]"); }
        public static SqlGroupByCollection OutgoingMails_ReferenceType(this SqlGroupByCollection self) { return self.Add("[t0].[ReferenceType]"); }
        public static OutgoingMailsGroupByCollection ReferenceId(this OutgoingMailsGroupByCollection self) { return self.Add("[t0].[ReferenceId]"); }
        public static SqlGroupByCollection OutgoingMails_ReferenceId(this SqlGroupByCollection self) { return self.Add("[t0].[ReferenceId]"); }
        public static OutgoingMailsGroupByCollection ReferenceVer(this OutgoingMailsGroupByCollection self) { return self.Add("[t0].[ReferenceVer]"); }
        public static SqlGroupByCollection OutgoingMails_ReferenceVer(this SqlGroupByCollection self) { return self.Add("[t0].[ReferenceVer]"); }
        public static OutgoingMailsGroupByCollection OutgoingMailId(this OutgoingMailsGroupByCollection self) { return self.Add("[t0].[OutgoingMailId]"); }
        public static SqlGroupByCollection OutgoingMails_OutgoingMailId(this SqlGroupByCollection self) { return self.Add("[t0].[OutgoingMailId]"); }
        public static OutgoingMailsGroupByCollection Ver(this OutgoingMailsGroupByCollection self) { return self.Add("[t0].[Ver]"); }
        public static SqlGroupByCollection OutgoingMails_Ver(this SqlGroupByCollection self) { return self.Add("[t0].[Ver]"); }
        public static OutgoingMailsGroupByCollection Host(this OutgoingMailsGroupByCollection self) { return self.Add("[t0].[Host]"); }
        public static SqlGroupByCollection OutgoingMails_Host(this SqlGroupByCollection self) { return self.Add("[t0].[Host]"); }
        public static OutgoingMailsGroupByCollection Port(this OutgoingMailsGroupByCollection self) { return self.Add("[t0].[Port]"); }
        public static SqlGroupByCollection OutgoingMails_Port(this SqlGroupByCollection self) { return self.Add("[t0].[Port]"); }
        public static OutgoingMailsGroupByCollection From(this OutgoingMailsGroupByCollection self) { return self.Add("[t0].[From]"); }
        public static SqlGroupByCollection OutgoingMails_From(this SqlGroupByCollection self) { return self.Add("[t0].[From]"); }
        public static OutgoingMailsGroupByCollection To(this OutgoingMailsGroupByCollection self) { return self.Add("[t0].[To]"); }
        public static SqlGroupByCollection OutgoingMails_To(this SqlGroupByCollection self) { return self.Add("[t0].[To]"); }
        public static OutgoingMailsGroupByCollection Cc(this OutgoingMailsGroupByCollection self) { return self.Add("[t0].[Cc]"); }
        public static SqlGroupByCollection OutgoingMails_Cc(this SqlGroupByCollection self) { return self.Add("[t0].[Cc]"); }
        public static OutgoingMailsGroupByCollection Bcc(this OutgoingMailsGroupByCollection self) { return self.Add("[t0].[Bcc]"); }
        public static SqlGroupByCollection OutgoingMails_Bcc(this SqlGroupByCollection self) { return self.Add("[t0].[Bcc]"); }
        public static OutgoingMailsGroupByCollection Title(this OutgoingMailsGroupByCollection self) { return self.Add("[t0].[Title]"); }
        public static SqlGroupByCollection OutgoingMails_Title(this SqlGroupByCollection self) { return self.Add("[t0].[Title]"); }
        public static OutgoingMailsGroupByCollection Body(this OutgoingMailsGroupByCollection self) { return self.Add("[t0].[Body]"); }
        public static SqlGroupByCollection OutgoingMails_Body(this SqlGroupByCollection self) { return self.Add("[t0].[Body]"); }
        public static OutgoingMailsGroupByCollection SentTime(this OutgoingMailsGroupByCollection self) { return self.Add("[t0].[SentTime]"); }
        public static SqlGroupByCollection OutgoingMails_SentTime(this SqlGroupByCollection self) { return self.Add("[t0].[SentTime]"); }
        public static OutgoingMailsGroupByCollection Comments(this OutgoingMailsGroupByCollection self) { return self.Add("[t0].[Comments]"); }
        public static SqlGroupByCollection OutgoingMails_Comments(this SqlGroupByCollection self) { return self.Add("[t0].[Comments]"); }
        public static OutgoingMailsGroupByCollection Creator(this OutgoingMailsGroupByCollection self) { return self.Add("[t0].[Creator]"); }
        public static SqlGroupByCollection OutgoingMails_Creator(this SqlGroupByCollection self) { return self.Add("[t0].[Creator]"); }
        public static OutgoingMailsGroupByCollection Updator(this OutgoingMailsGroupByCollection self) { return self.Add("[t0].[Updator]"); }
        public static SqlGroupByCollection OutgoingMails_Updator(this SqlGroupByCollection self) { return self.Add("[t0].[Updator]"); }
        public static OutgoingMailsGroupByCollection CreatedTime(this OutgoingMailsGroupByCollection self) { return self.Add("[t0].[CreatedTime]"); }
        public static SqlGroupByCollection OutgoingMails_CreatedTime(this SqlGroupByCollection self) { return self.Add("[t0].[CreatedTime]"); }
        public static OutgoingMailsGroupByCollection UpdatedTime(this OutgoingMailsGroupByCollection self) { return self.Add("[t0].[UpdatedTime]"); }
        public static SqlGroupByCollection OutgoingMails_UpdatedTime(this SqlGroupByCollection self) { return self.Add("[t0].[UpdatedTime]"); }
        public static OutgoingMailsHavingCollection OutgoingMailsCount(this OutgoingMailsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "count(*)", name: "OutgoingMailsCount", value: value, _operator: _operator); }
        public static OutgoingMailsHavingCollection CreatedTimeMax(this OutgoingMailsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[CreatedTime])", name: "CreatedTimeMax", value: value, _operator: _operator); }
        public static SqlHavingCollection OutgoingMails_CreatedTimeMax(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[CreatedTime])", name: "CreatedTimeMax", value: value, _operator: _operator); }
        public static OutgoingMailsHavingCollection CreatedTimeMin(this OutgoingMailsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[CreatedTime])", name: "CreatedTimeMin", value: value, _operator: _operator); }
        public static SqlHavingCollection OutgoingMails_CreatedTimeMin(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[CreatedTime])", name: "CreatedTimeMin", value: value, _operator: _operator); }
        public static OutgoingMailsHavingCollection UpdatedTimeMax(this OutgoingMailsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[UpdatedTime])", name: "UpdatedTimeMax", value: value, _operator: _operator); }
        public static SqlHavingCollection OutgoingMails_UpdatedTimeMax(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[UpdatedTime])", name: "UpdatedTimeMax", value: value, _operator: _operator); }
        public static OutgoingMailsHavingCollection UpdatedTimeMin(this OutgoingMailsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[UpdatedTime])", name: "UpdatedTimeMin", value: value, _operator: _operator); }
        public static SqlHavingCollection OutgoingMails_UpdatedTimeMin(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[UpdatedTime])", name: "UpdatedTimeMin", value: value, _operator: _operator); }
        public static OutgoingMailsOrderByCollection ReferenceType(this OutgoingMailsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[ReferenceType]"); }
        public static OutgoingMailsOrderByCollection ReferenceId(this OutgoingMailsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[ReferenceId]"); }
        public static OutgoingMailsOrderByCollection ReferenceVer(this OutgoingMailsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[ReferenceVer]"); }
        public static OutgoingMailsOrderByCollection OutgoingMailId(this OutgoingMailsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[OutgoingMailId]"); }
        public static OutgoingMailsOrderByCollection Ver(this OutgoingMailsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Ver]"); }
        public static OutgoingMailsOrderByCollection Host(this OutgoingMailsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Host]"); }
        public static OutgoingMailsOrderByCollection Port(this OutgoingMailsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Port]"); }
        public static OutgoingMailsOrderByCollection From(this OutgoingMailsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[From]"); }
        public static OutgoingMailsOrderByCollection To(this OutgoingMailsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[To]"); }
        public static OutgoingMailsOrderByCollection Cc(this OutgoingMailsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Cc]"); }
        public static OutgoingMailsOrderByCollection Bcc(this OutgoingMailsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Bcc]"); }
        public static OutgoingMailsOrderByCollection Title(this OutgoingMailsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Title]"); }
        public static OutgoingMailsOrderByCollection Body(this OutgoingMailsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Body]"); }
        public static OutgoingMailsOrderByCollection SentTime(this OutgoingMailsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[SentTime]"); }
        public static OutgoingMailsOrderByCollection Comments(this OutgoingMailsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Comments]"); }
        public static OutgoingMailsOrderByCollection Creator(this OutgoingMailsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Creator]"); }
        public static OutgoingMailsOrderByCollection Updator(this OutgoingMailsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Updator]"); }
        public static OutgoingMailsOrderByCollection CreatedTime(this OutgoingMailsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[CreatedTime]"); }
        public static OutgoingMailsOrderByCollection UpdatedTime(this OutgoingMailsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[UpdatedTime]"); }
        public static SqlOrderByCollection OutgoingMails_ReferenceType(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[ReferenceType]"); }
        public static SqlOrderByCollection OutgoingMails_ReferenceId(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[ReferenceId]"); }
        public static SqlOrderByCollection OutgoingMails_ReferenceVer(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[ReferenceVer]"); }
        public static SqlOrderByCollection OutgoingMails_OutgoingMailId(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[OutgoingMailId]"); }
        public static SqlOrderByCollection OutgoingMails_Ver(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Ver]"); }
        public static SqlOrderByCollection OutgoingMails_Host(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Host]"); }
        public static SqlOrderByCollection OutgoingMails_Port(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Port]"); }
        public static SqlOrderByCollection OutgoingMails_From(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[From]"); }
        public static SqlOrderByCollection OutgoingMails_To(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[To]"); }
        public static SqlOrderByCollection OutgoingMails_Cc(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Cc]"); }
        public static SqlOrderByCollection OutgoingMails_Bcc(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Bcc]"); }
        public static SqlOrderByCollection OutgoingMails_Title(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Title]"); }
        public static SqlOrderByCollection OutgoingMails_Body(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Body]"); }
        public static SqlOrderByCollection OutgoingMails_SentTime(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[SentTime]"); }
        public static SqlOrderByCollection OutgoingMails_Comments(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Comments]"); }
        public static SqlOrderByCollection OutgoingMails_Creator(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Creator]"); }
        public static SqlOrderByCollection OutgoingMails_Updator(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Updator]"); }
        public static SqlOrderByCollection OutgoingMails_CreatedTime(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[CreatedTime]"); }
        public static SqlOrderByCollection OutgoingMails_UpdatedTime(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[UpdatedTime]"); }
        public static OutgoingMailsOrderByCollection OutgoingMailsCount(this OutgoingMailsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "count(*)"); }
        public static OutgoingMailsOrderByCollection CreatedTimeMax(this OutgoingMailsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[CreatedTime])"); }
        public static SqlOrderByCollection OutgoingMails_CreatedTimeMax(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[CreatedTime])"); }
        public static OutgoingMailsOrderByCollection CreatedTimeMin(this OutgoingMailsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[CreatedTime])"); }
        public static SqlOrderByCollection OutgoingMails_CreatedTimeMin(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[CreatedTime])"); }
        public static OutgoingMailsOrderByCollection UpdatedTimeMax(this OutgoingMailsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[UpdatedTime])"); }
        public static SqlOrderByCollection OutgoingMails_UpdatedTimeMax(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[UpdatedTime])"); }
        public static OutgoingMailsOrderByCollection UpdatedTimeMin(this OutgoingMailsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[UpdatedTime])"); }
        public static SqlOrderByCollection OutgoingMails_UpdatedTimeMin(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[UpdatedTime])"); }
        public static OutgoingMailsParamCollection ReferenceType(this OutgoingMailsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ReferenceType]", "ReferenceType", value, sub, raw, _using); }
        public static SqlParamCollection OutgoingMails_ReferenceType(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ReferenceType]", "ReferenceType", value, sub, raw, _using); }
        public static OutgoingMailsParamCollection ReferenceId(this OutgoingMailsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ReferenceId]", "ReferenceId", value, sub, raw, _using); }
        public static SqlParamCollection OutgoingMails_ReferenceId(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ReferenceId]", "ReferenceId", value, sub, raw, _using); }
        public static OutgoingMailsParamCollection ReferenceVer(this OutgoingMailsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ReferenceVer]", "ReferenceVer", value, sub, raw, _using); }
        public static SqlParamCollection OutgoingMails_ReferenceVer(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ReferenceVer]", "ReferenceVer", value, sub, raw, _using); }
        public static OutgoingMailsParamCollection OutgoingMailId(this OutgoingMailsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[OutgoingMailId]", "OutgoingMailId", value, sub, raw, _using); }
        public static SqlParamCollection OutgoingMails_OutgoingMailId(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[OutgoingMailId]", "OutgoingMailId", value, sub, raw, _using); }
        public static OutgoingMailsParamCollection Ver(this OutgoingMailsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Ver]", "Ver", value, sub, raw, _using); }
        public static SqlParamCollection OutgoingMails_Ver(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Ver]", "Ver", value, sub, raw, _using); }
        public static OutgoingMailsParamCollection Host(this OutgoingMailsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Host]", "Host", value, sub, raw, _using); }
        public static SqlParamCollection OutgoingMails_Host(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Host]", "Host", value, sub, raw, _using); }
        public static OutgoingMailsParamCollection Port(this OutgoingMailsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Port]", "Port", value, sub, raw, _using); }
        public static SqlParamCollection OutgoingMails_Port(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Port]", "Port", value, sub, raw, _using); }
        public static OutgoingMailsParamCollection From(this OutgoingMailsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[From]", "From", value, sub, raw, _using); }
        public static SqlParamCollection OutgoingMails_From(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[From]", "From", value, sub, raw, _using); }
        public static OutgoingMailsParamCollection To(this OutgoingMailsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[To]", "To", value, sub, raw, _using); }
        public static SqlParamCollection OutgoingMails_To(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[To]", "To", value, sub, raw, _using); }
        public static OutgoingMailsParamCollection Cc(this OutgoingMailsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Cc]", "Cc", value, sub, raw, _using); }
        public static SqlParamCollection OutgoingMails_Cc(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Cc]", "Cc", value, sub, raw, _using); }
        public static OutgoingMailsParamCollection Bcc(this OutgoingMailsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Bcc]", "Bcc", value, sub, raw, _using); }
        public static SqlParamCollection OutgoingMails_Bcc(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Bcc]", "Bcc", value, sub, raw, _using); }
        public static OutgoingMailsParamCollection Title(this OutgoingMailsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Title]", "Title", value, sub, raw, _using); }
        public static SqlParamCollection OutgoingMails_Title(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Title]", "Title", value, sub, raw, _using); }
        public static OutgoingMailsParamCollection Body(this OutgoingMailsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Body]", "Body", value, sub, raw, _using); }
        public static SqlParamCollection OutgoingMails_Body(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Body]", "Body", value, sub, raw, _using); }
        public static OutgoingMailsParamCollection SentTime(this OutgoingMailsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[SentTime]", "SentTime", value, sub, raw, _using); }
        public static SqlParamCollection OutgoingMails_SentTime(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[SentTime]", "SentTime", value, sub, raw, _using); }
        public static OutgoingMailsParamCollection Comments(this OutgoingMailsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Comments]", "Comments", value, sub, raw, _using); }
        public static SqlParamCollection OutgoingMails_Comments(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Comments]", "Comments", value, sub, raw, _using); }
        public static OutgoingMailsParamCollection Creator(this OutgoingMailsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Creator]", "Creator", value, sub, raw, _using); }
        public static SqlParamCollection OutgoingMails_Creator(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Creator]", "Creator", value, sub, raw, _using); }
        public static OutgoingMailsParamCollection Updator(this OutgoingMailsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Updator]", "Updator", value, sub, raw, _using); }
        public static SqlParamCollection OutgoingMails_Updator(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Updator]", "Updator", value, sub, raw, _using); }
        public static OutgoingMailsParamCollection CreatedTime(this OutgoingMailsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CreatedTime]", "CreatedTime", value, sub, raw, _using); }
        public static SqlParamCollection OutgoingMails_CreatedTime(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CreatedTime]", "CreatedTime", value, sub, raw, _using); }
        public static OutgoingMailsParamCollection UpdatedTime(this OutgoingMailsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[UpdatedTime]", "UpdatedTime", value, sub, raw, _using); }
        public static SqlParamCollection OutgoingMails_UpdatedTime(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[UpdatedTime]", "UpdatedTime", value, sub, raw, _using); }

        public static SearchIndexesColumnCollection SearchIndexesColumn()
        {
            return new SearchIndexesColumnCollection();
        }

        public class SearchIndexesColumnCollection : SqlColumnCollection
        {
            public SearchIndexesColumnCollection Add(params string[] columnBrackets)
            {
                base.Add(false, columnBrackets);
                return this;
            }

            public new SearchIndexesColumnCollection Add(bool duplicates = false, params string[] columnBrackets)
            {
                base.Add(duplicates, columnBrackets);
                return this;
            }
        }

        public static SearchIndexesJoinCollection SearchIndexesJoin()
        {
            return new SearchIndexesJoinCollection();
        }

        public class SearchIndexesJoinCollection : SqlJoinCollection
        {
            public new SearchIndexesJoinCollection Add(params string[] columnBrackets)
            {
                columnBrackets.ForEach(columnBracket => base.Add(new SqlJoin(columnBracket)));
                return this;
            }
        }

        public static SearchIndexesWhereCollection SearchIndexesWhere()
        {
            return new SearchIndexesWhereCollection();
        }

        public class SearchIndexesWhereCollection : SqlWhereCollection
        {
            public new SearchIndexesWhereCollection Add(
                string[] columnBrackets = null,
                string name = "",
                object value = null,
                string _operator = "=",
                string multiColumnOperator = " or ",
                string multiParamOperator = " and ",
                SqlStatement sub = null,
                string raw = "",
                SqlWhereCollection or = null,
                bool _using = true)
            {
                base.Add(new SqlWhere(
                    columnBrackets: columnBrackets,
                    name: name,
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    sub: sub,
                    raw: raw,
                    or: or,
                    _using: _using));
                return this;
            }
        }

        public static SearchIndexesGroupByCollection SearchIndexesGroupBy()
        {
            return new SearchIndexesGroupByCollection();
        }

        public class SearchIndexesGroupByCollection : SqlGroupByCollection
        {
            public new SearchIndexesGroupByCollection Add(
                params string[] columnBrackets)
            {
                columnBrackets.ForEach(columnBracket =>
                    base.Add(new SqlGroupBy(columnBracket)));
                return this;
            }
        }

        public static SearchIndexesHavingCollection SearchIndexesHaving()
        {
            return new SearchIndexesHavingCollection();
        }

        public class SearchIndexesHavingCollection : SqlHavingCollection
        {
            public SearchIndexesHavingCollection Add(
                string columnBracket, string name, object value, string _operator)
            {
                base.Add(new SqlHaving(
                    columnBracket: columnBracket,
                    name: name,
                    value: value,
                    _operator: _operator));
                return this;
            }
        }

        public static SearchIndexesOrderByCollection SearchIndexesOrderBy()
        {
            return new SearchIndexesOrderByCollection();
        }

        public class SearchIndexesOrderByCollection : SqlOrderByCollection
        {
            public new SearchIndexesOrderByCollection Add(
                SqlOrderBy.Types type = SqlOrderBy.Types.asc,
                params string[] columnBrackets)
            {
                columnBrackets.ForEach(columnBracket =>
                    base.Add(new SqlOrderBy(columnBracket, type)));
                return this;
            }
        }

        public static SearchIndexesParamCollection SearchIndexesParam()
        {
            return new SearchIndexesParamCollection();
        }

        public class SearchIndexesParamCollection : SqlParamCollection
        {
            public new SearchIndexesParamCollection Add(
                string columnBracket = "",
                string name = "",
                object value = null,
                SqlStatement sub = null,
                string raw = null,
                bool _using = true)
            {
                base.Add(new SqlParam(columnBracket, name, value, sub, raw, _using));
                return this;
            }
        }

        public const string SqlWhereExists_SearchIndexes = "exists(select * from [SearchIndexes] where #SqlWhere#)";
        public const string SqlWhereNotExists_SearchIndexes = "not exists(select * from [SearchIndexes] where #SqlWhere#)";
        public static SearchIndexesColumnCollection Word(this SearchIndexesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Word]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection SearchIndexes_Word(this SqlColumnCollection self, string tableName = "SearchIndexes", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Word]" + _as.ExistsTo(" as [{0}]")); }
        public static SearchIndexesColumnCollection ReferenceId(this SearchIndexesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[ReferenceId]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection SearchIndexes_ReferenceId(this SqlColumnCollection self, string tableName = "SearchIndexes", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[ReferenceId]" + _as.ExistsTo(" as [{0}]")); }
        public static SearchIndexesColumnCollection Ver(this SearchIndexesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Ver]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection SearchIndexes_Ver(this SqlColumnCollection self, string tableName = "SearchIndexes", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Ver]" + _as.ExistsTo(" as [{0}]")); }
        public static SearchIndexesColumnCollection Priority(this SearchIndexesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Priority]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection SearchIndexes_Priority(this SqlColumnCollection self, string tableName = "SearchIndexes", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Priority]" + _as.ExistsTo(" as [{0}]")); }
        public static SearchIndexesColumnCollection ReferenceType(this SearchIndexesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t1].[ReferenceType]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection SearchIndexes_ReferenceType(this SqlColumnCollection self, string tableName = "SearchIndexes", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[ReferenceType]" + _as.ExistsTo(" as [{0}]")); }
        public static SearchIndexesColumnCollection Title(this SearchIndexesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t1].[Title]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection SearchIndexes_Title(this SqlColumnCollection self, string tableName = "SearchIndexes", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Title]" + _as.ExistsTo(" as [{0}]")); }
        public static SearchIndexesColumnCollection Subset(this SearchIndexesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t1].[Subset]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection SearchIndexes_Subset(this SqlColumnCollection self, string tableName = "SearchIndexes", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Subset]" + _as.ExistsTo(" as [{0}]")); }
        public static SearchIndexesColumnCollection Comments(this SearchIndexesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Comments]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection SearchIndexes_Comments(this SqlColumnCollection self, string tableName = "SearchIndexes", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Comments]" + _as.ExistsTo(" as [{0}]")); }
        public static SearchIndexesColumnCollection Creator(this SearchIndexesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Creator]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection SearchIndexes_Creator(this SqlColumnCollection self, string tableName = "SearchIndexes", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Creator]" + _as.ExistsTo(" as [{0}]")); }
        public static SearchIndexesColumnCollection Updator(this SearchIndexesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Updator]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection SearchIndexes_Updator(this SqlColumnCollection self, string tableName = "SearchIndexes", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Updator]" + _as.ExistsTo(" as [{0}]")); }
        public static SearchIndexesColumnCollection CreatedTime(this SearchIndexesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[CreatedTime]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection SearchIndexes_CreatedTime(this SqlColumnCollection self, string tableName = "SearchIndexes", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[CreatedTime]" + _as.ExistsTo(" as [{0}]")); }
        public static SearchIndexesColumnCollection UpdatedTime(this SearchIndexesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[UpdatedTime]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection SearchIndexes_UpdatedTime(this SqlColumnCollection self, string tableName = "SearchIndexes", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[UpdatedTime]" + _as.ExistsTo(" as [{0}]")); }
        public static SearchIndexesColumnCollection PermissionType(this SearchIndexesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "(select max([PermissionType]) from [Permissions] where [Permissions].[ReferenceType] = 'Sites' and [Permissions].[ReferenceId] = [t2].[InheritPermission] and (([Permissions].[UserId] = @_U and @_U <> 0) or ([Permissions].[DeptId] = @_D and @_D <> 0))) as [PermissionType]"); }
        public static SqlColumnCollection SearchIndexes_PermissionType(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "(select max([PermissionType]) from [Permissions] where [Permissions].[ReferenceType] = 'Sites' and [Permissions].[ReferenceId] = [t2].[InheritPermission] and (([Permissions].[UserId] = @_U and @_U <> 0) or ([Permissions].[DeptId] = @_D and @_D <> 0))) as [PermissionType]"); }
        public static SearchIndexesColumnCollection SearchIndexesCount(this SearchIndexesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "count(*) as SearchIndexesCount"); }
        public static SearchIndexesColumnCollection PriorityTotal(this SearchIndexesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "sum([t0].[Priority]) as [PriorityTotal]"); }
        public static SqlColumnCollection SearchIndexes_PriorityTotal(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "sum([t0].[Priority]) as [PriorityTotal]"); }
        public static SearchIndexesColumnCollection PriorityAverage(this SearchIndexesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "avg([t0].[Priority]) as [PriorityAverage]"); }
        public static SqlColumnCollection SearchIndexes_PriorityAverage(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "avg([t0].[Priority]) as [PriorityAverage]"); }
        public static SearchIndexesColumnCollection PriorityMax(this SearchIndexesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[Priority]) as [PriorityMax]"); }
        public static SqlColumnCollection SearchIndexes_PriorityMax(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[Priority]) as [PriorityMax]"); }
        public static SearchIndexesColumnCollection PriorityMin(this SearchIndexesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[Priority]) as [PriorityMin]"); }
        public static SqlColumnCollection SearchIndexes_PriorityMin(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[Priority]) as [PriorityMin]"); }
        public static SearchIndexesColumnCollection CreatedTimeMax(this SearchIndexesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[CreatedTime]) as [CreatedTimeMax]"); }
        public static SqlColumnCollection SearchIndexes_CreatedTimeMax(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[CreatedTime]) as [CreatedTimeMax]"); }
        public static SearchIndexesColumnCollection CreatedTimeMin(this SearchIndexesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[CreatedTime]) as [CreatedTimeMin]"); }
        public static SqlColumnCollection SearchIndexes_CreatedTimeMin(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[CreatedTime]) as [CreatedTimeMin]"); }
        public static SearchIndexesColumnCollection UpdatedTimeMax(this SearchIndexesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[UpdatedTime]) as [UpdatedTimeMax]"); }
        public static SqlColumnCollection SearchIndexes_UpdatedTimeMax(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[UpdatedTime]) as [UpdatedTimeMax]"); }
        public static SearchIndexesColumnCollection UpdatedTimeMin(this SearchIndexesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[UpdatedTime]) as [UpdatedTimeMin]"); }
        public static SqlColumnCollection SearchIndexes_UpdatedTimeMin(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[UpdatedTime]) as [UpdatedTimeMin]"); }
        public static SearchIndexesWhereCollection Word(this SearchIndexesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Word]" }, "Word", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection SearchIndexes_Word(this SqlWhereCollection self, object value = null, string tableName = "SearchIndexes", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Word]" }, "Word", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SearchIndexesWhereCollection ReferenceId(this SearchIndexesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[ReferenceId]" }, "ReferenceId", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection SearchIndexes_ReferenceId(this SqlWhereCollection self, object value = null, string tableName = "SearchIndexes", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[ReferenceId]" }, "ReferenceId", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SearchIndexesWhereCollection Ver(this SearchIndexesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Ver]" }, "Ver", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection SearchIndexes_Ver(this SqlWhereCollection self, object value = null, string tableName = "SearchIndexes", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Ver]" }, "Ver", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SearchIndexesWhereCollection Priority(this SearchIndexesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Priority]" }, "Priority", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection SearchIndexes_Priority(this SqlWhereCollection self, object value = null, string tableName = "SearchIndexes", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Priority]" }, "Priority", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SearchIndexesWhereCollection ReferenceType(this SearchIndexesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t1].[ReferenceType]" }, "ReferenceType", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection SearchIndexes_ReferenceType(this SqlWhereCollection self, object value = null, string tableName = "SearchIndexes", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[ReferenceType]" }, "ReferenceType", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SearchIndexesWhereCollection Title(this SearchIndexesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t1].[Title]" }, "Title", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection SearchIndexes_Title(this SqlWhereCollection self, object value = null, string tableName = "SearchIndexes", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Title]" }, "Title", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SearchIndexesWhereCollection Subset(this SearchIndexesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t1].[Subset]" }, "Subset", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection SearchIndexes_Subset(this SqlWhereCollection self, object value = null, string tableName = "SearchIndexes", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Subset]" }, "Subset", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SearchIndexesWhereCollection Comments(this SearchIndexesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Comments]" }, "Comments", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection SearchIndexes_Comments(this SqlWhereCollection self, object value = null, string tableName = "SearchIndexes", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Comments]" }, "Comments", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SearchIndexesWhereCollection Creator(this SearchIndexesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Creator]" }, "Creator", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection SearchIndexes_Creator(this SqlWhereCollection self, object value = null, string tableName = "SearchIndexes", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Creator]" }, "Creator", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SearchIndexesWhereCollection Updator(this SearchIndexesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Updator]" }, "Updator", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection SearchIndexes_Updator(this SqlWhereCollection self, object value = null, string tableName = "SearchIndexes", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Updator]" }, "Updator", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SearchIndexesWhereCollection CreatedTime(this SearchIndexesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[CreatedTime]" }, "CreatedTime", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection SearchIndexes_CreatedTime(this SqlWhereCollection self, object value = null, string tableName = "SearchIndexes", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[CreatedTime]" }, "CreatedTime", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SearchIndexesWhereCollection UpdatedTime(this SearchIndexesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[UpdatedTime]" }, "UpdatedTime", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection SearchIndexes_UpdatedTime(this SqlWhereCollection self, object value = null, string tableName = "SearchIndexes", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[UpdatedTime]" }, "UpdatedTime", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SearchIndexesWhereCollection PermissionType(this SearchIndexesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "(select max([PermissionType]) from [Permissions] where [Permissions].[ReferenceType] = 'Sites' and [Permissions].[ReferenceId] = [t2].[InheritPermission] and (([Permissions].[UserId] = @_U and @_U <> 0) or ([Permissions].[DeptId] = @_D and @_D <> 0)))" }, "PermissionType", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection SearchIndexes_PermissionType(this SqlWhereCollection self, object value = null, string tableName = "SearchIndexes", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "(select max([PermissionType]) from [Permissions] where [Permissions].[ReferenceType] = 'Sites' and [Permissions].[ReferenceId] = [t2].[InheritPermission] and (([Permissions].[UserId] = @_U and @_U <> 0) or ([Permissions].[DeptId] = @_D and @_D <> 0)))" }, "PermissionType", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SearchIndexesWhereCollection ReferenceId_In(this SearchIndexesWhereCollection self, IEnumerable<long> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[ReferenceId]" }, "ReferenceId", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection SearchIndexes_ReferenceId_In(this SqlWhereCollection self, IEnumerable<long> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[ReferenceId]" }, "ReferenceId", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SearchIndexesWhereCollection Ver_In(this SearchIndexesWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Ver]" }, "Ver", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection SearchIndexes_Ver_In(this SqlWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Ver]" }, "Ver", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SearchIndexesWhereCollection Priority_In(this SearchIndexesWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Priority]" }, "Priority", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection SearchIndexes_Priority_In(this SqlWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Priority]" }, "Priority", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SearchIndexesWhereCollection PermissionType_In(this SearchIndexesWhereCollection self, IEnumerable<long> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t2].[PermissionType]" }, "PermissionType", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection SearchIndexes_PermissionType_In(this SqlWhereCollection self, IEnumerable<long> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t2].[PermissionType]" }, "PermissionType", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SearchIndexesWhereCollection Creator_In(this SearchIndexesWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Creator]" }, "Creator", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection SearchIndexes_Creator_In(this SqlWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Creator]" }, "Creator", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SearchIndexesWhereCollection Updator_In(this SearchIndexesWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Updator]" }, "Updator", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection SearchIndexes_Updator_In(this SqlWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Updator]" }, "Updator", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SearchIndexesWhereCollection ReferenceId_Between(this SearchIndexesWhereCollection self, long begin, long end, bool _using = true) { return self.Add(new string[] { "[t0].[ReferenceId]" }, "ReferenceId", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection SearchIndexes_ReferenceId_Between(this SqlWhereCollection self, long begin, long end, bool _using = true) { return self.Add(new string[] { "[t0].[ReferenceId]" }, "ReferenceId", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SearchIndexesWhereCollection Ver_Between(this SearchIndexesWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Ver]" }, "Ver", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection SearchIndexes_Ver_Between(this SqlWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Ver]" }, "Ver", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SearchIndexesWhereCollection Priority_Between(this SearchIndexesWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Priority]" }, "Priority", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection SearchIndexes_Priority_Between(this SqlWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Priority]" }, "Priority", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SearchIndexesWhereCollection PermissionType_Between(this SearchIndexesWhereCollection self, long begin, long end, bool _using = true) { return self.Add(new string[] { "[t2].[PermissionType]" }, "PermissionType", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection SearchIndexes_PermissionType_Between(this SqlWhereCollection self, long begin, long end, bool _using = true) { return self.Add(new string[] { "[t2].[PermissionType]" }, "PermissionType", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SearchIndexesWhereCollection Creator_Between(this SearchIndexesWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Creator]" }, "Creator", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection SearchIndexes_Creator_Between(this SqlWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Creator]" }, "Creator", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SearchIndexesWhereCollection Updator_Between(this SearchIndexesWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Updator]" }, "Updator", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection SearchIndexes_Updator_Between(this SqlWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Updator]" }, "Updator", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SearchIndexesWhereCollection CreatedTime_Between(this SearchIndexesWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[CreatedTime]" }, "CreatedTime", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection SearchIndexes_CreatedTime_Between(this SqlWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[CreatedTime]" }, "CreatedTime", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static SearchIndexesWhereCollection UpdatedTime_Between(this SearchIndexesWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[UpdatedTime]" }, "UpdatedTime", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection SearchIndexes_UpdatedTime_Between(this SqlWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[UpdatedTime]" }, "UpdatedTime", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static SearchIndexesWhereCollection Sub(this SearchIndexesWhereCollection self, SqlStatement sub, object value = null, string _operator = "=", bool _using = true) { return self.Add(null, null, value, _operator, sub: sub, _using: _using); }
        public static SearchIndexesWhereCollection Or(this SearchIndexesWhereCollection self, SqlWhereCollection or, bool _using = true) { return self.Add(null, null, or: or, _using: _using); }
        public static SearchIndexesGroupByCollection Word(this SearchIndexesGroupByCollection self) { return self.Add("[t0].[Word]"); }
        public static SqlGroupByCollection SearchIndexes_Word(this SqlGroupByCollection self) { return self.Add("[t0].[Word]"); }
        public static SearchIndexesGroupByCollection ReferenceId(this SearchIndexesGroupByCollection self) { return self.Add("[t0].[ReferenceId]"); }
        public static SqlGroupByCollection SearchIndexes_ReferenceId(this SqlGroupByCollection self) { return self.Add("[t0].[ReferenceId]"); }
        public static SearchIndexesGroupByCollection Ver(this SearchIndexesGroupByCollection self) { return self.Add("[t0].[Ver]"); }
        public static SqlGroupByCollection SearchIndexes_Ver(this SqlGroupByCollection self) { return self.Add("[t0].[Ver]"); }
        public static SearchIndexesGroupByCollection Priority(this SearchIndexesGroupByCollection self) { return self.Add("[t0].[Priority]"); }
        public static SqlGroupByCollection SearchIndexes_Priority(this SqlGroupByCollection self) { return self.Add("[t0].[Priority]"); }
        public static SearchIndexesGroupByCollection ReferenceType(this SearchIndexesGroupByCollection self) { return self.Add("[t1].[ReferenceType]"); }
        public static SqlGroupByCollection SearchIndexes_ReferenceType(this SqlGroupByCollection self) { return self.Add("[t1].[ReferenceType]"); }
        public static SearchIndexesGroupByCollection Title(this SearchIndexesGroupByCollection self) { return self.Add("[t1].[Title]"); }
        public static SqlGroupByCollection SearchIndexes_Title(this SqlGroupByCollection self) { return self.Add("[t1].[Title]"); }
        public static SearchIndexesGroupByCollection Subset(this SearchIndexesGroupByCollection self) { return self.Add("[t1].[Subset]"); }
        public static SqlGroupByCollection SearchIndexes_Subset(this SqlGroupByCollection self) { return self.Add("[t1].[Subset]"); }
        public static SearchIndexesGroupByCollection PermissionType(this SearchIndexesGroupByCollection self) { return self.Add("(select max([PermissionType]) from [Permissions] where [Permissions].[ReferenceType] = 'Sites' and [Permissions].[ReferenceId] = [t2].[InheritPermission] and (([Permissions].[UserId] = @_U and @_U <> 0) or ([Permissions].[DeptId] = @_D and @_D <> 0)))"); }
        public static SqlGroupByCollection SearchIndexes_PermissionType(this SqlGroupByCollection self) { return self.Add("(select max([PermissionType]) from [Permissions] where [Permissions].[ReferenceType] = 'Sites' and [Permissions].[ReferenceId] = [t2].[InheritPermission] and (([Permissions].[UserId] = @_U and @_U <> 0) or ([Permissions].[DeptId] = @_D and @_D <> 0)))"); }
        public static SearchIndexesGroupByCollection Comments(this SearchIndexesGroupByCollection self) { return self.Add("[t0].[Comments]"); }
        public static SqlGroupByCollection SearchIndexes_Comments(this SqlGroupByCollection self) { return self.Add("[t0].[Comments]"); }
        public static SearchIndexesGroupByCollection Creator(this SearchIndexesGroupByCollection self) { return self.Add("[t0].[Creator]"); }
        public static SqlGroupByCollection SearchIndexes_Creator(this SqlGroupByCollection self) { return self.Add("[t0].[Creator]"); }
        public static SearchIndexesGroupByCollection Updator(this SearchIndexesGroupByCollection self) { return self.Add("[t0].[Updator]"); }
        public static SqlGroupByCollection SearchIndexes_Updator(this SqlGroupByCollection self) { return self.Add("[t0].[Updator]"); }
        public static SearchIndexesGroupByCollection CreatedTime(this SearchIndexesGroupByCollection self) { return self.Add("[t0].[CreatedTime]"); }
        public static SqlGroupByCollection SearchIndexes_CreatedTime(this SqlGroupByCollection self) { return self.Add("[t0].[CreatedTime]"); }
        public static SearchIndexesGroupByCollection UpdatedTime(this SearchIndexesGroupByCollection self) { return self.Add("[t0].[UpdatedTime]"); }
        public static SqlGroupByCollection SearchIndexes_UpdatedTime(this SqlGroupByCollection self) { return self.Add("[t0].[UpdatedTime]"); }
        public static SearchIndexesHavingCollection SearchIndexesCount(this SearchIndexesHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "count(*)", name: "SearchIndexesCount", value: value, _operator: _operator); }
        public static SearchIndexesHavingCollection PriorityTotal(this SearchIndexesHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "sum([t0].[Priority])", name: "PriorityTotal", value: value, _operator: _operator); }
        public static SqlHavingCollection SearchIndexes_PriorityTotal(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "sum([t0].[Priority])", name: "PriorityTotal", value: value, _operator: _operator); }
        public static SearchIndexesHavingCollection PriorityAverage(this SearchIndexesHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "avg([t0].[Priority])", name: "PriorityAverage", value: value, _operator: _operator); }
        public static SqlHavingCollection SearchIndexes_PriorityAverage(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "avg([t0].[Priority])", name: "PriorityAverage", value: value, _operator: _operator); }
        public static SearchIndexesHavingCollection PriorityMax(this SearchIndexesHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[Priority])", name: "PriorityMax", value: value, _operator: _operator); }
        public static SqlHavingCollection SearchIndexes_PriorityMax(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[Priority])", name: "PriorityMax", value: value, _operator: _operator); }
        public static SearchIndexesHavingCollection PriorityMin(this SearchIndexesHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[Priority])", name: "PriorityMin", value: value, _operator: _operator); }
        public static SqlHavingCollection SearchIndexes_PriorityMin(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[Priority])", name: "PriorityMin", value: value, _operator: _operator); }
        public static SearchIndexesHavingCollection CreatedTimeMax(this SearchIndexesHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[CreatedTime])", name: "CreatedTimeMax", value: value, _operator: _operator); }
        public static SqlHavingCollection SearchIndexes_CreatedTimeMax(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[CreatedTime])", name: "CreatedTimeMax", value: value, _operator: _operator); }
        public static SearchIndexesHavingCollection CreatedTimeMin(this SearchIndexesHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[CreatedTime])", name: "CreatedTimeMin", value: value, _operator: _operator); }
        public static SqlHavingCollection SearchIndexes_CreatedTimeMin(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[CreatedTime])", name: "CreatedTimeMin", value: value, _operator: _operator); }
        public static SearchIndexesHavingCollection UpdatedTimeMax(this SearchIndexesHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[UpdatedTime])", name: "UpdatedTimeMax", value: value, _operator: _operator); }
        public static SqlHavingCollection SearchIndexes_UpdatedTimeMax(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[UpdatedTime])", name: "UpdatedTimeMax", value: value, _operator: _operator); }
        public static SearchIndexesHavingCollection UpdatedTimeMin(this SearchIndexesHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[UpdatedTime])", name: "UpdatedTimeMin", value: value, _operator: _operator); }
        public static SqlHavingCollection SearchIndexes_UpdatedTimeMin(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[UpdatedTime])", name: "UpdatedTimeMin", value: value, _operator: _operator); }
        public static SearchIndexesOrderByCollection Word(this SearchIndexesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Word]"); }
        public static SearchIndexesOrderByCollection ReferenceId(this SearchIndexesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[ReferenceId]"); }
        public static SearchIndexesOrderByCollection Ver(this SearchIndexesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Ver]"); }
        public static SearchIndexesOrderByCollection Priority(this SearchIndexesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Priority]"); }
        public static SearchIndexesOrderByCollection ReferenceType(this SearchIndexesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t1].[ReferenceType]"); }
        public static SearchIndexesOrderByCollection Title(this SearchIndexesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t1].[Title]"); }
        public static SearchIndexesOrderByCollection Subset(this SearchIndexesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t1].[Subset]"); }
        public static SearchIndexesOrderByCollection PermissionType(this SearchIndexesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "(select max([PermissionType]) from [Permissions] where [Permissions].[ReferenceType] = 'Sites' and [Permissions].[ReferenceId] = [t2].[InheritPermission] and (([Permissions].[UserId] = @_U and @_U <> 0) or ([Permissions].[DeptId] = @_D and @_D <> 0)))"); }
        public static SearchIndexesOrderByCollection Comments(this SearchIndexesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Comments]"); }
        public static SearchIndexesOrderByCollection Creator(this SearchIndexesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Creator]"); }
        public static SearchIndexesOrderByCollection Updator(this SearchIndexesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Updator]"); }
        public static SearchIndexesOrderByCollection CreatedTime(this SearchIndexesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[CreatedTime]"); }
        public static SearchIndexesOrderByCollection UpdatedTime(this SearchIndexesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[UpdatedTime]"); }
        public static SqlOrderByCollection SearchIndexes_Word(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Word]"); }
        public static SqlOrderByCollection SearchIndexes_ReferenceId(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[ReferenceId]"); }
        public static SqlOrderByCollection SearchIndexes_Ver(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Ver]"); }
        public static SqlOrderByCollection SearchIndexes_Priority(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Priority]"); }
        public static SqlOrderByCollection SearchIndexes_ReferenceType(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[t1].[ReferenceType]"); }
        public static SqlOrderByCollection SearchIndexes_Title(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[t1].[Title]"); }
        public static SqlOrderByCollection SearchIndexes_Subset(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[t1].[Subset]"); }
        public static SqlOrderByCollection SearchIndexes_PermissionType(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "(select max([PermissionType]) from [Permissions] where [Permissions].[ReferenceType] = 'Sites' and [Permissions].[ReferenceId] = [t2].[InheritPermission] and (([Permissions].[UserId] = @_U and @_U <> 0) or ([Permissions].[DeptId] = @_D and @_D <> 0)))"); }
        public static SqlOrderByCollection SearchIndexes_Comments(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Comments]"); }
        public static SqlOrderByCollection SearchIndexes_Creator(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Creator]"); }
        public static SqlOrderByCollection SearchIndexes_Updator(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Updator]"); }
        public static SqlOrderByCollection SearchIndexes_CreatedTime(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[CreatedTime]"); }
        public static SqlOrderByCollection SearchIndexes_UpdatedTime(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[UpdatedTime]"); }
        public static SearchIndexesOrderByCollection SearchIndexesCount(this SearchIndexesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "count(*)"); }
        public static SearchIndexesOrderByCollection PriorityTotal(this SearchIndexesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "sum([t0].[Priority])"); }
        public static SqlOrderByCollection SearchIndexes_PriorityTotal(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "sum([t0].[Priority])"); }
        public static SearchIndexesOrderByCollection PriorityAverage(this SearchIndexesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "avg([t0].[Priority])"); }
        public static SqlOrderByCollection SearchIndexes_PriorityAverage(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "avg([t0].[Priority])"); }
        public static SearchIndexesOrderByCollection PriorityMax(this SearchIndexesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[Priority])"); }
        public static SqlOrderByCollection SearchIndexes_PriorityMax(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[Priority])"); }
        public static SearchIndexesOrderByCollection PriorityMin(this SearchIndexesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[Priority])"); }
        public static SqlOrderByCollection SearchIndexes_PriorityMin(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[Priority])"); }
        public static SearchIndexesOrderByCollection CreatedTimeMax(this SearchIndexesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[CreatedTime])"); }
        public static SqlOrderByCollection SearchIndexes_CreatedTimeMax(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[CreatedTime])"); }
        public static SearchIndexesOrderByCollection CreatedTimeMin(this SearchIndexesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[CreatedTime])"); }
        public static SqlOrderByCollection SearchIndexes_CreatedTimeMin(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[CreatedTime])"); }
        public static SearchIndexesOrderByCollection UpdatedTimeMax(this SearchIndexesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[UpdatedTime])"); }
        public static SqlOrderByCollection SearchIndexes_UpdatedTimeMax(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[UpdatedTime])"); }
        public static SearchIndexesOrderByCollection UpdatedTimeMin(this SearchIndexesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[UpdatedTime])"); }
        public static SqlOrderByCollection SearchIndexes_UpdatedTimeMin(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[UpdatedTime])"); }
        public static SearchIndexesParamCollection Word(this SearchIndexesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Word]", "Word", value, sub, raw, _using); }
        public static SqlParamCollection SearchIndexes_Word(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Word]", "Word", value, sub, raw, _using); }
        public static SearchIndexesParamCollection ReferenceId(this SearchIndexesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ReferenceId]", "ReferenceId", value, sub, raw, _using); }
        public static SqlParamCollection SearchIndexes_ReferenceId(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ReferenceId]", "ReferenceId", value, sub, raw, _using); }
        public static SearchIndexesParamCollection Ver(this SearchIndexesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Ver]", "Ver", value, sub, raw, _using); }
        public static SqlParamCollection SearchIndexes_Ver(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Ver]", "Ver", value, sub, raw, _using); }
        public static SearchIndexesParamCollection Priority(this SearchIndexesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Priority]", "Priority", value, sub, raw, _using); }
        public static SqlParamCollection SearchIndexes_Priority(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Priority]", "Priority", value, sub, raw, _using); }
        public static SearchIndexesParamCollection Comments(this SearchIndexesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Comments]", "Comments", value, sub, raw, _using); }
        public static SqlParamCollection SearchIndexes_Comments(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Comments]", "Comments", value, sub, raw, _using); }
        public static SearchIndexesParamCollection Creator(this SearchIndexesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Creator]", "Creator", value, sub, raw, _using); }
        public static SqlParamCollection SearchIndexes_Creator(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Creator]", "Creator", value, sub, raw, _using); }
        public static SearchIndexesParamCollection Updator(this SearchIndexesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Updator]", "Updator", value, sub, raw, _using); }
        public static SqlParamCollection SearchIndexes_Updator(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Updator]", "Updator", value, sub, raw, _using); }
        public static SearchIndexesParamCollection CreatedTime(this SearchIndexesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CreatedTime]", "CreatedTime", value, sub, raw, _using); }
        public static SqlParamCollection SearchIndexes_CreatedTime(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CreatedTime]", "CreatedTime", value, sub, raw, _using); }
        public static SearchIndexesParamCollection UpdatedTime(this SearchIndexesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[UpdatedTime]", "UpdatedTime", value, sub, raw, _using); }
        public static SqlParamCollection SearchIndexes_UpdatedTime(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[UpdatedTime]", "UpdatedTime", value, sub, raw, _using); }

        public static ItemsColumnCollection ItemsColumn()
        {
            return new ItemsColumnCollection();
        }

        public class ItemsColumnCollection : SqlColumnCollection
        {
            public ItemsColumnCollection Add(params string[] columnBrackets)
            {
                base.Add(false, columnBrackets);
                return this;
            }

            public new ItemsColumnCollection Add(bool duplicates = false, params string[] columnBrackets)
            {
                base.Add(duplicates, columnBrackets);
                return this;
            }
        }

        public static ItemsJoinCollection ItemsJoin()
        {
            return new ItemsJoinCollection();
        }

        public class ItemsJoinCollection : SqlJoinCollection
        {
            public new ItemsJoinCollection Add(params string[] columnBrackets)
            {
                columnBrackets.ForEach(columnBracket => base.Add(new SqlJoin(columnBracket)));
                return this;
            }
        }

        public static ItemsWhereCollection ItemsWhere()
        {
            return new ItemsWhereCollection();
        }

        public class ItemsWhereCollection : SqlWhereCollection
        {
            public new ItemsWhereCollection Add(
                string[] columnBrackets = null,
                string name = "",
                object value = null,
                string _operator = "=",
                string multiColumnOperator = " or ",
                string multiParamOperator = " and ",
                SqlStatement sub = null,
                string raw = "",
                SqlWhereCollection or = null,
                bool _using = true)
            {
                base.Add(new SqlWhere(
                    columnBrackets: columnBrackets,
                    name: name,
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    sub: sub,
                    raw: raw,
                    or: or,
                    _using: _using));
                return this;
            }
        }

        public static ItemsGroupByCollection ItemsGroupBy()
        {
            return new ItemsGroupByCollection();
        }

        public class ItemsGroupByCollection : SqlGroupByCollection
        {
            public new ItemsGroupByCollection Add(
                params string[] columnBrackets)
            {
                columnBrackets.ForEach(columnBracket =>
                    base.Add(new SqlGroupBy(columnBracket)));
                return this;
            }
        }

        public static ItemsHavingCollection ItemsHaving()
        {
            return new ItemsHavingCollection();
        }

        public class ItemsHavingCollection : SqlHavingCollection
        {
            public ItemsHavingCollection Add(
                string columnBracket, string name, object value, string _operator)
            {
                base.Add(new SqlHaving(
                    columnBracket: columnBracket,
                    name: name,
                    value: value,
                    _operator: _operator));
                return this;
            }
        }

        public static ItemsOrderByCollection ItemsOrderBy()
        {
            return new ItemsOrderByCollection();
        }

        public class ItemsOrderByCollection : SqlOrderByCollection
        {
            public new ItemsOrderByCollection Add(
                SqlOrderBy.Types type = SqlOrderBy.Types.asc,
                params string[] columnBrackets)
            {
                columnBrackets.ForEach(columnBracket =>
                    base.Add(new SqlOrderBy(columnBracket, type)));
                return this;
            }
        }

        public static ItemsParamCollection ItemsParam()
        {
            return new ItemsParamCollection();
        }

        public class ItemsParamCollection : SqlParamCollection
        {
            public new ItemsParamCollection Add(
                string columnBracket = "",
                string name = "",
                object value = null,
                SqlStatement sub = null,
                string raw = null,
                bool _using = true)
            {
                base.Add(new SqlParam(columnBracket, name, value, sub, raw, _using));
                return this;
            }
        }

        public const string SqlWhereExists_Items = "exists(select * from [Items] where #SqlWhere#)";
        public const string SqlWhereNotExists_Items = "not exists(select * from [Items] where #SqlWhere#)";
        public static ItemsColumnCollection ReferenceId(this ItemsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[ReferenceId]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Items_ReferenceId(this SqlColumnCollection self, string tableName = "Items", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[ReferenceId]" + _as.ExistsTo(" as [{0}]")); }
        public static ItemsColumnCollection Ver(this ItemsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Ver]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Items_Ver(this SqlColumnCollection self, string tableName = "Items", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Ver]" + _as.ExistsTo(" as [{0}]")); }
        public static ItemsColumnCollection ReferenceType(this ItemsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[ReferenceType]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Items_ReferenceType(this SqlColumnCollection self, string tableName = "Items", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[ReferenceType]" + _as.ExistsTo(" as [{0}]")); }
        public static ItemsColumnCollection SiteId(this ItemsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[SiteId]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Items_SiteId(this SqlColumnCollection self, string tableName = "Items", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[SiteId]" + _as.ExistsTo(" as [{0}]")); }
        public static ItemsColumnCollection Title(this ItemsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Title]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Items_Title(this SqlColumnCollection self, string tableName = "Items", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Title]" + _as.ExistsTo(" as [{0}]")); }
        public static ItemsColumnCollection Subset(this ItemsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Subset]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Items_Subset(this SqlColumnCollection self, string tableName = "Items", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Subset]" + _as.ExistsTo(" as [{0}]")); }
        public static ItemsColumnCollection MaintenanceTarget(this ItemsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[MaintenanceTarget]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Items_MaintenanceTarget(this SqlColumnCollection self, string tableName = "Items", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[MaintenanceTarget]" + _as.ExistsTo(" as [{0}]")); }
        public static ItemsColumnCollection Comments(this ItemsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Comments]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Items_Comments(this SqlColumnCollection self, string tableName = "Items", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Comments]" + _as.ExistsTo(" as [{0}]")); }
        public static ItemsColumnCollection Creator(this ItemsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Creator]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Items_Creator(this SqlColumnCollection self, string tableName = "Items", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Creator]" + _as.ExistsTo(" as [{0}]")); }
        public static ItemsColumnCollection Updator(this ItemsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Updator]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Items_Updator(this SqlColumnCollection self, string tableName = "Items", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Updator]" + _as.ExistsTo(" as [{0}]")); }
        public static ItemsColumnCollection CreatedTime(this ItemsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[CreatedTime]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Items_CreatedTime(this SqlColumnCollection self, string tableName = "Items", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[CreatedTime]" + _as.ExistsTo(" as [{0}]")); }
        public static ItemsColumnCollection UpdatedTime(this ItemsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[UpdatedTime]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Items_UpdatedTime(this SqlColumnCollection self, string tableName = "Items", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[UpdatedTime]" + _as.ExistsTo(" as [{0}]")); }
        public static ItemsColumnCollection ItemsCount(this ItemsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "count(*) as ItemsCount"); }
        public static ItemsColumnCollection CreatedTimeMax(this ItemsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[CreatedTime]) as [CreatedTimeMax]"); }
        public static SqlColumnCollection Items_CreatedTimeMax(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[CreatedTime]) as [CreatedTimeMax]"); }
        public static ItemsColumnCollection CreatedTimeMin(this ItemsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[CreatedTime]) as [CreatedTimeMin]"); }
        public static SqlColumnCollection Items_CreatedTimeMin(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[CreatedTime]) as [CreatedTimeMin]"); }
        public static ItemsColumnCollection UpdatedTimeMax(this ItemsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[UpdatedTime]) as [UpdatedTimeMax]"); }
        public static SqlColumnCollection Items_UpdatedTimeMax(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[UpdatedTime]) as [UpdatedTimeMax]"); }
        public static ItemsColumnCollection UpdatedTimeMin(this ItemsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[UpdatedTime]) as [UpdatedTimeMin]"); }
        public static SqlColumnCollection Items_UpdatedTimeMin(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[UpdatedTime]) as [UpdatedTimeMin]"); }
        public static ItemsWhereCollection ReferenceId(this ItemsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[ReferenceId]" }, "ReferenceId", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Items_ReferenceId(this SqlWhereCollection self, object value = null, string tableName = "Items", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[ReferenceId]" }, "ReferenceId", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ItemsWhereCollection Ver(this ItemsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Ver]" }, "Ver", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Items_Ver(this SqlWhereCollection self, object value = null, string tableName = "Items", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Ver]" }, "Ver", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ItemsWhereCollection ReferenceType(this ItemsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[ReferenceType]" }, "ReferenceType", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Items_ReferenceType(this SqlWhereCollection self, object value = null, string tableName = "Items", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[ReferenceType]" }, "ReferenceType", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ItemsWhereCollection SiteId(this ItemsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[SiteId]" }, "SiteId", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Items_SiteId(this SqlWhereCollection self, object value = null, string tableName = "Items", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[SiteId]" }, "SiteId", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ItemsWhereCollection Title(this ItemsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Title]" }, "Title", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Items_Title(this SqlWhereCollection self, object value = null, string tableName = "Items", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Title]" }, "Title", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ItemsWhereCollection Subset(this ItemsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Subset]" }, "Subset", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Items_Subset(this SqlWhereCollection self, object value = null, string tableName = "Items", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Subset]" }, "Subset", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ItemsWhereCollection MaintenanceTarget(this ItemsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[MaintenanceTarget]" }, "MaintenanceTarget", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Items_MaintenanceTarget(this SqlWhereCollection self, object value = null, string tableName = "Items", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[MaintenanceTarget]" }, "MaintenanceTarget", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ItemsWhereCollection Comments(this ItemsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Comments]" }, "Comments", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Items_Comments(this SqlWhereCollection self, object value = null, string tableName = "Items", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Comments]" }, "Comments", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ItemsWhereCollection Creator(this ItemsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Creator]" }, "Creator", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Items_Creator(this SqlWhereCollection self, object value = null, string tableName = "Items", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Creator]" }, "Creator", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ItemsWhereCollection Updator(this ItemsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Updator]" }, "Updator", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Items_Updator(this SqlWhereCollection self, object value = null, string tableName = "Items", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Updator]" }, "Updator", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ItemsWhereCollection CreatedTime(this ItemsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[CreatedTime]" }, "CreatedTime", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Items_CreatedTime(this SqlWhereCollection self, object value = null, string tableName = "Items", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[CreatedTime]" }, "CreatedTime", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ItemsWhereCollection UpdatedTime(this ItemsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[UpdatedTime]" }, "UpdatedTime", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Items_UpdatedTime(this SqlWhereCollection self, object value = null, string tableName = "Items", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[UpdatedTime]" }, "UpdatedTime", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ItemsWhereCollection ReferenceId_In(this ItemsWhereCollection self, IEnumerable<long> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[ReferenceId]" }, "ReferenceId", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Items_ReferenceId_In(this SqlWhereCollection self, IEnumerable<long> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[ReferenceId]" }, "ReferenceId", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static ItemsWhereCollection Ver_In(this ItemsWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Ver]" }, "Ver", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Items_Ver_In(this SqlWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Ver]" }, "Ver", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static ItemsWhereCollection SiteId_In(this ItemsWhereCollection self, IEnumerable<long> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[SiteId]" }, "SiteId", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Items_SiteId_In(this SqlWhereCollection self, IEnumerable<long> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[SiteId]" }, "SiteId", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static ItemsWhereCollection Creator_In(this ItemsWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Creator]" }, "Creator", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Items_Creator_In(this SqlWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Creator]" }, "Creator", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static ItemsWhereCollection Updator_In(this ItemsWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Updator]" }, "Updator", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Items_Updator_In(this SqlWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Updator]" }, "Updator", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static ItemsWhereCollection ReferenceId_Between(this ItemsWhereCollection self, long begin, long end, bool _using = true) { return self.Add(new string[] { "[t0].[ReferenceId]" }, "ReferenceId", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Items_ReferenceId_Between(this SqlWhereCollection self, long begin, long end, bool _using = true) { return self.Add(new string[] { "[t0].[ReferenceId]" }, "ReferenceId", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static ItemsWhereCollection Ver_Between(this ItemsWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Ver]" }, "Ver", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Items_Ver_Between(this SqlWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Ver]" }, "Ver", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static ItemsWhereCollection SiteId_Between(this ItemsWhereCollection self, long begin, long end, bool _using = true) { return self.Add(new string[] { "[t0].[SiteId]" }, "SiteId", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Items_SiteId_Between(this SqlWhereCollection self, long begin, long end, bool _using = true) { return self.Add(new string[] { "[t0].[SiteId]" }, "SiteId", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static ItemsWhereCollection Creator_Between(this ItemsWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Creator]" }, "Creator", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Items_Creator_Between(this SqlWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Creator]" }, "Creator", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static ItemsWhereCollection Updator_Between(this ItemsWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Updator]" }, "Updator", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Items_Updator_Between(this SqlWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Updator]" }, "Updator", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static ItemsWhereCollection CreatedTime_Between(this ItemsWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[CreatedTime]" }, "CreatedTime", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Items_CreatedTime_Between(this SqlWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[CreatedTime]" }, "CreatedTime", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static ItemsWhereCollection UpdatedTime_Between(this ItemsWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[UpdatedTime]" }, "UpdatedTime", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Items_UpdatedTime_Between(this SqlWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[UpdatedTime]" }, "UpdatedTime", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static ItemsWhereCollection Sub(this ItemsWhereCollection self, SqlStatement sub, object value = null, string _operator = "=", bool _using = true) { return self.Add(null, null, value, _operator, sub: sub, _using: _using); }
        public static ItemsWhereCollection Or(this ItemsWhereCollection self, SqlWhereCollection or, bool _using = true) { return self.Add(null, null, or: or, _using: _using); }
        public static ItemsGroupByCollection ReferenceId(this ItemsGroupByCollection self) { return self.Add("[t0].[ReferenceId]"); }
        public static SqlGroupByCollection Items_ReferenceId(this SqlGroupByCollection self) { return self.Add("[t0].[ReferenceId]"); }
        public static ItemsGroupByCollection Ver(this ItemsGroupByCollection self) { return self.Add("[t0].[Ver]"); }
        public static SqlGroupByCollection Items_Ver(this SqlGroupByCollection self) { return self.Add("[t0].[Ver]"); }
        public static ItemsGroupByCollection ReferenceType(this ItemsGroupByCollection self) { return self.Add("[t0].[ReferenceType]"); }
        public static SqlGroupByCollection Items_ReferenceType(this SqlGroupByCollection self) { return self.Add("[t0].[ReferenceType]"); }
        public static ItemsGroupByCollection SiteId(this ItemsGroupByCollection self) { return self.Add("[t0].[SiteId]"); }
        public static SqlGroupByCollection Items_SiteId(this SqlGroupByCollection self) { return self.Add("[t0].[SiteId]"); }
        public static ItemsGroupByCollection Title(this ItemsGroupByCollection self) { return self.Add("[t0].[Title]"); }
        public static SqlGroupByCollection Items_Title(this SqlGroupByCollection self) { return self.Add("[t0].[Title]"); }
        public static ItemsGroupByCollection Subset(this ItemsGroupByCollection self) { return self.Add("[t0].[Subset]"); }
        public static SqlGroupByCollection Items_Subset(this SqlGroupByCollection self) { return self.Add("[t0].[Subset]"); }
        public static ItemsGroupByCollection MaintenanceTarget(this ItemsGroupByCollection self) { return self.Add("[t0].[MaintenanceTarget]"); }
        public static SqlGroupByCollection Items_MaintenanceTarget(this SqlGroupByCollection self) { return self.Add("[t0].[MaintenanceTarget]"); }
        public static ItemsGroupByCollection Comments(this ItemsGroupByCollection self) { return self.Add("[t0].[Comments]"); }
        public static SqlGroupByCollection Items_Comments(this SqlGroupByCollection self) { return self.Add("[t0].[Comments]"); }
        public static ItemsGroupByCollection Creator(this ItemsGroupByCollection self) { return self.Add("[t0].[Creator]"); }
        public static SqlGroupByCollection Items_Creator(this SqlGroupByCollection self) { return self.Add("[t0].[Creator]"); }
        public static ItemsGroupByCollection Updator(this ItemsGroupByCollection self) { return self.Add("[t0].[Updator]"); }
        public static SqlGroupByCollection Items_Updator(this SqlGroupByCollection self) { return self.Add("[t0].[Updator]"); }
        public static ItemsGroupByCollection CreatedTime(this ItemsGroupByCollection self) { return self.Add("[t0].[CreatedTime]"); }
        public static SqlGroupByCollection Items_CreatedTime(this SqlGroupByCollection self) { return self.Add("[t0].[CreatedTime]"); }
        public static ItemsGroupByCollection UpdatedTime(this ItemsGroupByCollection self) { return self.Add("[t0].[UpdatedTime]"); }
        public static SqlGroupByCollection Items_UpdatedTime(this SqlGroupByCollection self) { return self.Add("[t0].[UpdatedTime]"); }
        public static ItemsHavingCollection ItemsCount(this ItemsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "count(*)", name: "ItemsCount", value: value, _operator: _operator); }
        public static ItemsHavingCollection CreatedTimeMax(this ItemsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[CreatedTime])", name: "CreatedTimeMax", value: value, _operator: _operator); }
        public static SqlHavingCollection Items_CreatedTimeMax(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[CreatedTime])", name: "CreatedTimeMax", value: value, _operator: _operator); }
        public static ItemsHavingCollection CreatedTimeMin(this ItemsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[CreatedTime])", name: "CreatedTimeMin", value: value, _operator: _operator); }
        public static SqlHavingCollection Items_CreatedTimeMin(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[CreatedTime])", name: "CreatedTimeMin", value: value, _operator: _operator); }
        public static ItemsHavingCollection UpdatedTimeMax(this ItemsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[UpdatedTime])", name: "UpdatedTimeMax", value: value, _operator: _operator); }
        public static SqlHavingCollection Items_UpdatedTimeMax(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[UpdatedTime])", name: "UpdatedTimeMax", value: value, _operator: _operator); }
        public static ItemsHavingCollection UpdatedTimeMin(this ItemsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[UpdatedTime])", name: "UpdatedTimeMin", value: value, _operator: _operator); }
        public static SqlHavingCollection Items_UpdatedTimeMin(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[UpdatedTime])", name: "UpdatedTimeMin", value: value, _operator: _operator); }
        public static ItemsOrderByCollection ReferenceId(this ItemsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[ReferenceId]"); }
        public static ItemsOrderByCollection Ver(this ItemsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Ver]"); }
        public static ItemsOrderByCollection ReferenceType(this ItemsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[ReferenceType]"); }
        public static ItemsOrderByCollection SiteId(this ItemsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[SiteId]"); }
        public static ItemsOrderByCollection Title(this ItemsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Title]"); }
        public static ItemsOrderByCollection Subset(this ItemsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Subset]"); }
        public static ItemsOrderByCollection MaintenanceTarget(this ItemsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[MaintenanceTarget]"); }
        public static ItemsOrderByCollection Comments(this ItemsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Comments]"); }
        public static ItemsOrderByCollection Creator(this ItemsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Creator]"); }
        public static ItemsOrderByCollection Updator(this ItemsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Updator]"); }
        public static ItemsOrderByCollection CreatedTime(this ItemsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[CreatedTime]"); }
        public static ItemsOrderByCollection UpdatedTime(this ItemsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[UpdatedTime]"); }
        public static SqlOrderByCollection Items_ReferenceId(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[ReferenceId]"); }
        public static SqlOrderByCollection Items_Ver(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Ver]"); }
        public static SqlOrderByCollection Items_ReferenceType(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[ReferenceType]"); }
        public static SqlOrderByCollection Items_SiteId(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[SiteId]"); }
        public static SqlOrderByCollection Items_Title(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Title]"); }
        public static SqlOrderByCollection Items_Subset(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Subset]"); }
        public static SqlOrderByCollection Items_MaintenanceTarget(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[MaintenanceTarget]"); }
        public static SqlOrderByCollection Items_Comments(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Comments]"); }
        public static SqlOrderByCollection Items_Creator(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Creator]"); }
        public static SqlOrderByCollection Items_Updator(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Updator]"); }
        public static SqlOrderByCollection Items_CreatedTime(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[CreatedTime]"); }
        public static SqlOrderByCollection Items_UpdatedTime(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[UpdatedTime]"); }
        public static ItemsOrderByCollection ItemsCount(this ItemsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "count(*)"); }
        public static ItemsOrderByCollection CreatedTimeMax(this ItemsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[CreatedTime])"); }
        public static SqlOrderByCollection Items_CreatedTimeMax(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[CreatedTime])"); }
        public static ItemsOrderByCollection CreatedTimeMin(this ItemsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[CreatedTime])"); }
        public static SqlOrderByCollection Items_CreatedTimeMin(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[CreatedTime])"); }
        public static ItemsOrderByCollection UpdatedTimeMax(this ItemsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[UpdatedTime])"); }
        public static SqlOrderByCollection Items_UpdatedTimeMax(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[UpdatedTime])"); }
        public static ItemsOrderByCollection UpdatedTimeMin(this ItemsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[UpdatedTime])"); }
        public static SqlOrderByCollection Items_UpdatedTimeMin(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[UpdatedTime])"); }
        public static ItemsParamCollection ReferenceId(this ItemsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ReferenceId]", "ReferenceId", value, sub, raw, _using); }
        public static SqlParamCollection Items_ReferenceId(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ReferenceId]", "ReferenceId", value, sub, raw, _using); }
        public static ItemsParamCollection Ver(this ItemsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Ver]", "Ver", value, sub, raw, _using); }
        public static SqlParamCollection Items_Ver(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Ver]", "Ver", value, sub, raw, _using); }
        public static ItemsParamCollection ReferenceType(this ItemsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ReferenceType]", "ReferenceType", value, sub, raw, _using); }
        public static SqlParamCollection Items_ReferenceType(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ReferenceType]", "ReferenceType", value, sub, raw, _using); }
        public static ItemsParamCollection SiteId(this ItemsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[SiteId]", "SiteId", value, sub, raw, _using); }
        public static SqlParamCollection Items_SiteId(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[SiteId]", "SiteId", value, sub, raw, _using); }
        public static ItemsParamCollection Title(this ItemsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Title]", "Title", value, sub, raw, _using); }
        public static SqlParamCollection Items_Title(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Title]", "Title", value, sub, raw, _using); }
        public static ItemsParamCollection Subset(this ItemsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Subset]", "Subset", value, sub, raw, _using); }
        public static SqlParamCollection Items_Subset(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Subset]", "Subset", value, sub, raw, _using); }
        public static ItemsParamCollection MaintenanceTarget(this ItemsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[MaintenanceTarget]", "MaintenanceTarget", value, sub, raw, _using); }
        public static SqlParamCollection Items_MaintenanceTarget(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[MaintenanceTarget]", "MaintenanceTarget", value, sub, raw, _using); }
        public static ItemsParamCollection Comments(this ItemsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Comments]", "Comments", value, sub, raw, _using); }
        public static SqlParamCollection Items_Comments(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Comments]", "Comments", value, sub, raw, _using); }
        public static ItemsParamCollection Creator(this ItemsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Creator]", "Creator", value, sub, raw, _using); }
        public static SqlParamCollection Items_Creator(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Creator]", "Creator", value, sub, raw, _using); }
        public static ItemsParamCollection Updator(this ItemsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Updator]", "Updator", value, sub, raw, _using); }
        public static SqlParamCollection Items_Updator(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Updator]", "Updator", value, sub, raw, _using); }
        public static ItemsParamCollection CreatedTime(this ItemsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CreatedTime]", "CreatedTime", value, sub, raw, _using); }
        public static SqlParamCollection Items_CreatedTime(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CreatedTime]", "CreatedTime", value, sub, raw, _using); }
        public static ItemsParamCollection UpdatedTime(this ItemsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[UpdatedTime]", "UpdatedTime", value, sub, raw, _using); }
        public static SqlParamCollection Items_UpdatedTime(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[UpdatedTime]", "UpdatedTime", value, sub, raw, _using); }

        public static SitesColumnCollection SitesColumn()
        {
            return new SitesColumnCollection();
        }

        public class SitesColumnCollection : SqlColumnCollection
        {
            public SitesColumnCollection Add(params string[] columnBrackets)
            {
                base.Add(false, columnBrackets);
                return this;
            }

            public new SitesColumnCollection Add(bool duplicates = false, params string[] columnBrackets)
            {
                base.Add(duplicates, columnBrackets);
                return this;
            }
        }

        public static SitesJoinCollection SitesJoin()
        {
            return new SitesJoinCollection();
        }

        public class SitesJoinCollection : SqlJoinCollection
        {
            public new SitesJoinCollection Add(params string[] columnBrackets)
            {
                columnBrackets.ForEach(columnBracket => base.Add(new SqlJoin(columnBracket)));
                return this;
            }
        }

        public static SitesWhereCollection SitesWhere()
        {
            return new SitesWhereCollection();
        }

        public class SitesWhereCollection : SqlWhereCollection
        {
            public new SitesWhereCollection Add(
                string[] columnBrackets = null,
                string name = "",
                object value = null,
                string _operator = "=",
                string multiColumnOperator = " or ",
                string multiParamOperator = " and ",
                SqlStatement sub = null,
                string raw = "",
                SqlWhereCollection or = null,
                bool _using = true)
            {
                base.Add(new SqlWhere(
                    columnBrackets: columnBrackets,
                    name: name,
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    sub: sub,
                    raw: raw,
                    or: or,
                    _using: _using));
                return this;
            }
        }

        public static SitesGroupByCollection SitesGroupBy()
        {
            return new SitesGroupByCollection();
        }

        public class SitesGroupByCollection : SqlGroupByCollection
        {
            public new SitesGroupByCollection Add(
                params string[] columnBrackets)
            {
                columnBrackets.ForEach(columnBracket =>
                    base.Add(new SqlGroupBy(columnBracket)));
                return this;
            }
        }

        public static SitesHavingCollection SitesHaving()
        {
            return new SitesHavingCollection();
        }

        public class SitesHavingCollection : SqlHavingCollection
        {
            public SitesHavingCollection Add(
                string columnBracket, string name, object value, string _operator)
            {
                base.Add(new SqlHaving(
                    columnBracket: columnBracket,
                    name: name,
                    value: value,
                    _operator: _operator));
                return this;
            }
        }

        public static SitesOrderByCollection SitesOrderBy()
        {
            return new SitesOrderByCollection();
        }

        public class SitesOrderByCollection : SqlOrderByCollection
        {
            public new SitesOrderByCollection Add(
                SqlOrderBy.Types type = SqlOrderBy.Types.asc,
                params string[] columnBrackets)
            {
                columnBrackets.ForEach(columnBracket =>
                    base.Add(new SqlOrderBy(columnBracket, type)));
                return this;
            }
        }

        public static SitesParamCollection SitesParam()
        {
            return new SitesParamCollection();
        }

        public class SitesParamCollection : SqlParamCollection
        {
            public new SitesParamCollection Add(
                string columnBracket = "",
                string name = "",
                object value = null,
                SqlStatement sub = null,
                string raw = null,
                bool _using = true)
            {
                base.Add(new SqlParam(columnBracket, name, value, sub, raw, _using));
                return this;
            }
        }

        public static string Sites_Title_WhereLike(string tableName = "t0") { return "([" + tableName + "].[Title] like '%' + @SearchText#ParamCount#_#CommandCount# + '%')"; }
        public static string Sites_Body_WhereLike(string tableName = "t0") { return "([" + tableName + "].[Body] like '%' + @SearchText#ParamCount#_#CommandCount# + '%')"; }
        public const string SqlWhereExists_Sites = "exists(select * from [Sites] where #SqlWhere#)";
        public const string SqlWhereNotExists_Sites = "not exists(select * from [Sites] where #SqlWhere#)";
        public static SitesColumnCollection TenantId(this SitesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[TenantId]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Sites_TenantId(this SqlColumnCollection self, string tableName = "Sites", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[TenantId]" + _as.ExistsTo(" as [{0}]")); }
        public static SitesColumnCollection SiteId(this SitesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[SiteId]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Sites_SiteId(this SqlColumnCollection self, string tableName = "Sites", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[SiteId]" + _as.ExistsTo(" as [{0}]")); }
        public static SitesColumnCollection UpdatedTime(this SitesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[UpdatedTime]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Sites_UpdatedTime(this SqlColumnCollection self, string tableName = "Sites", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[UpdatedTime]" + _as.ExistsTo(" as [{0}]")); }
        public static SitesColumnCollection Ver(this SitesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Ver]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Sites_Ver(this SqlColumnCollection self, string tableName = "Sites", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Ver]" + _as.ExistsTo(" as [{0}]")); }
        public static SitesColumnCollection Title(this SitesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Title]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Sites_Title(this SqlColumnCollection self, string tableName = "Sites", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Title]" + _as.ExistsTo(" as [{0}]")); }
        public static SitesColumnCollection Body(this SitesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Body]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Sites_Body(this SqlColumnCollection self, string tableName = "Sites", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Body]" + _as.ExistsTo(" as [{0}]")); }
        public static SitesColumnCollection ReferenceType(this SitesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[ReferenceType]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Sites_ReferenceType(this SqlColumnCollection self, string tableName = "Sites", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[ReferenceType]" + _as.ExistsTo(" as [{0}]")); }
        public static SitesColumnCollection ParentId(this SitesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[ParentId]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Sites_ParentId(this SqlColumnCollection self, string tableName = "Sites", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[ParentId]" + _as.ExistsTo(" as [{0}]")); }
        public static SitesColumnCollection InheritPermission(this SitesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[InheritPermission]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Sites_InheritPermission(this SqlColumnCollection self, string tableName = "Sites", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[InheritPermission]" + _as.ExistsTo(" as [{0}]")); }
        public static SitesColumnCollection SiteSettings(this SitesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[SiteSettings]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Sites_SiteSettings(this SqlColumnCollection self, string tableName = "Sites", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[SiteSettings]" + _as.ExistsTo(" as [{0}]")); }
        public static SitesColumnCollection Comments(this SitesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Comments]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Sites_Comments(this SqlColumnCollection self, string tableName = "Sites", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Comments]" + _as.ExistsTo(" as [{0}]")); }
        public static SitesColumnCollection Creator(this SitesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Creator]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Sites_Creator(this SqlColumnCollection self, string tableName = "Sites", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Creator]" + _as.ExistsTo(" as [{0}]")); }
        public static SitesColumnCollection Updator(this SitesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Updator]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Sites_Updator(this SqlColumnCollection self, string tableName = "Sites", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Updator]" + _as.ExistsTo(" as [{0}]")); }
        public static SitesColumnCollection CreatedTime(this SitesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[CreatedTime]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Sites_CreatedTime(this SqlColumnCollection self, string tableName = "Sites", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[CreatedTime]" + _as.ExistsTo(" as [{0}]")); }
        public static SitesColumnCollection TitleBody(this SitesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "[t0].[Title]", "[t0].[Body]"); }
        public static SqlColumnCollection Sites_TitleBody(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "[t0].[Title]", "[t0].[Body]"); }
        public static SitesColumnCollection PermissionType(this SitesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "(select max([PermissionType]) from [Permissions] where [Permissions].[ReferenceType] = 'Sites' and [Permissions].[ReferenceId] = [t0].[InheritPermission] and (([Permissions].[UserId] = @_U and @_U <> 0) or ([Permissions].[DeptId] = @_D and @_D <> 0))) as [PermissionType]"); }
        public static SqlColumnCollection Sites_PermissionType(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "(select max([PermissionType]) from [Permissions] where [Permissions].[ReferenceType] = 'Sites' and [Permissions].[ReferenceId] = [t0].[InheritPermission] and (([Permissions].[UserId] = @_U and @_U <> 0) or ([Permissions].[DeptId] = @_D and @_D <> 0))) as [PermissionType]"); }
        public static SitesColumnCollection SitesCount(this SitesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "count(*) as SitesCount"); }
        public static SitesColumnCollection CreatedTimeMax(this SitesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[CreatedTime]) as [CreatedTimeMax]"); }
        public static SqlColumnCollection Sites_CreatedTimeMax(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[CreatedTime]) as [CreatedTimeMax]"); }
        public static SitesColumnCollection CreatedTimeMin(this SitesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[CreatedTime]) as [CreatedTimeMin]"); }
        public static SqlColumnCollection Sites_CreatedTimeMin(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[CreatedTime]) as [CreatedTimeMin]"); }
        public static SitesWhereCollection TenantId(this SitesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[TenantId]" }, "TenantId", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Sites_TenantId(this SqlWhereCollection self, object value = null, string tableName = "Sites", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[TenantId]" }, "TenantId", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SitesWhereCollection SiteId(this SitesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[SiteId]" }, "SiteId", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Sites_SiteId(this SqlWhereCollection self, object value = null, string tableName = "Sites", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[SiteId]" }, "SiteId", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SitesWhereCollection UpdatedTime(this SitesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[UpdatedTime]" }, "UpdatedTime", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Sites_UpdatedTime(this SqlWhereCollection self, object value = null, string tableName = "Sites", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[UpdatedTime]" }, "UpdatedTime", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SitesWhereCollection Ver(this SitesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Ver]" }, "Ver", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Sites_Ver(this SqlWhereCollection self, object value = null, string tableName = "Sites", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Ver]" }, "Ver", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SitesWhereCollection Title(this SitesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Title]" }, "Title", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Sites_Title(this SqlWhereCollection self, object value = null, string tableName = "Sites", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Title]" }, "Title", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SitesWhereCollection Body(this SitesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Body]" }, "Body", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Sites_Body(this SqlWhereCollection self, object value = null, string tableName = "Sites", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Body]" }, "Body", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SitesWhereCollection ReferenceType(this SitesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[ReferenceType]" }, "ReferenceType", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Sites_ReferenceType(this SqlWhereCollection self, object value = null, string tableName = "Sites", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[ReferenceType]" }, "ReferenceType", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SitesWhereCollection ParentId(this SitesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[ParentId]" }, "ParentId", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Sites_ParentId(this SqlWhereCollection self, object value = null, string tableName = "Sites", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[ParentId]" }, "ParentId", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SitesWhereCollection InheritPermission(this SitesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[InheritPermission]" }, "InheritPermission", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Sites_InheritPermission(this SqlWhereCollection self, object value = null, string tableName = "Sites", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[InheritPermission]" }, "InheritPermission", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SitesWhereCollection SiteSettings(this SitesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[SiteSettings]" }, "SiteSettings", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Sites_SiteSettings(this SqlWhereCollection self, object value = null, string tableName = "Sites", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[SiteSettings]" }, "SiteSettings", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SitesWhereCollection Comments(this SitesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Comments]" }, "Comments", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Sites_Comments(this SqlWhereCollection self, object value = null, string tableName = "Sites", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Comments]" }, "Comments", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SitesWhereCollection Creator(this SitesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Creator]" }, "Creator", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Sites_Creator(this SqlWhereCollection self, object value = null, string tableName = "Sites", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Creator]" }, "Creator", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SitesWhereCollection Updator(this SitesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Updator]" }, "Updator", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Sites_Updator(this SqlWhereCollection self, object value = null, string tableName = "Sites", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Updator]" }, "Updator", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SitesWhereCollection CreatedTime(this SitesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[CreatedTime]" }, "CreatedTime", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Sites_CreatedTime(this SqlWhereCollection self, object value = null, string tableName = "Sites", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[CreatedTime]" }, "CreatedTime", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SitesWhereCollection TitleBody(this SitesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Title]", "[t0].[Body]" }, "TitleBody", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Sites_TitleBody(this SqlWhereCollection self, object value = null, string tableName = "Sites", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Title]", "[t0].[Body]" }, "TitleBody", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SitesWhereCollection PermissionType(this SitesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "(select max([PermissionType]) from [Permissions] where [Permissions].[ReferenceType] = 'Sites' and [Permissions].[ReferenceId] = [t0].[InheritPermission] and (([Permissions].[UserId] = @_U and @_U <> 0) or ([Permissions].[DeptId] = @_D and @_D <> 0)))" }, "PermissionType", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Sites_PermissionType(this SqlWhereCollection self, object value = null, string tableName = "Sites", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "(select max([PermissionType]) from [Permissions] where [Permissions].[ReferenceType] = 'Sites' and [Permissions].[ReferenceId] = [t0].[InheritPermission] and (([Permissions].[UserId] = @_U and @_U <> 0) or ([Permissions].[DeptId] = @_D and @_D <> 0)))" }, "PermissionType", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SitesWhereCollection TenantId_In(this SitesWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[TenantId]" }, "TenantId", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Sites_TenantId_In(this SqlWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[TenantId]" }, "TenantId", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SitesWhereCollection SiteId_In(this SitesWhereCollection self, IEnumerable<long> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[SiteId]" }, "SiteId", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Sites_SiteId_In(this SqlWhereCollection self, IEnumerable<long> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[SiteId]" }, "SiteId", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SitesWhereCollection Ver_In(this SitesWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Ver]" }, "Ver", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Sites_Ver_In(this SqlWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Ver]" }, "Ver", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SitesWhereCollection ParentId_In(this SitesWhereCollection self, IEnumerable<long> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[ParentId]" }, "ParentId", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Sites_ParentId_In(this SqlWhereCollection self, IEnumerable<long> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[ParentId]" }, "ParentId", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SitesWhereCollection InheritPermission_In(this SitesWhereCollection self, IEnumerable<long> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[InheritPermission]" }, "InheritPermission", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Sites_InheritPermission_In(this SqlWhereCollection self, IEnumerable<long> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[InheritPermission]" }, "InheritPermission", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SitesWhereCollection PermissionType_In(this SitesWhereCollection self, IEnumerable<long> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[PermissionType]" }, "PermissionType", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Sites_PermissionType_In(this SqlWhereCollection self, IEnumerable<long> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[PermissionType]" }, "PermissionType", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SitesWhereCollection Creator_In(this SitesWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Creator]" }, "Creator", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Sites_Creator_In(this SqlWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Creator]" }, "Creator", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SitesWhereCollection Updator_In(this SitesWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Updator]" }, "Updator", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Sites_Updator_In(this SqlWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Updator]" }, "Updator", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SitesWhereCollection TenantId_Between(this SitesWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[TenantId]" }, "TenantId", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Sites_TenantId_Between(this SqlWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[TenantId]" }, "TenantId", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SitesWhereCollection SiteId_Between(this SitesWhereCollection self, long begin, long end, bool _using = true) { return self.Add(new string[] { "[t0].[SiteId]" }, "SiteId", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Sites_SiteId_Between(this SqlWhereCollection self, long begin, long end, bool _using = true) { return self.Add(new string[] { "[t0].[SiteId]" }, "SiteId", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SitesWhereCollection Ver_Between(this SitesWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Ver]" }, "Ver", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Sites_Ver_Between(this SqlWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Ver]" }, "Ver", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SitesWhereCollection ParentId_Between(this SitesWhereCollection self, long begin, long end, bool _using = true) { return self.Add(new string[] { "[t0].[ParentId]" }, "ParentId", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Sites_ParentId_Between(this SqlWhereCollection self, long begin, long end, bool _using = true) { return self.Add(new string[] { "[t0].[ParentId]" }, "ParentId", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SitesWhereCollection InheritPermission_Between(this SitesWhereCollection self, long begin, long end, bool _using = true) { return self.Add(new string[] { "[t0].[InheritPermission]" }, "InheritPermission", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Sites_InheritPermission_Between(this SqlWhereCollection self, long begin, long end, bool _using = true) { return self.Add(new string[] { "[t0].[InheritPermission]" }, "InheritPermission", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SitesWhereCollection PermissionType_Between(this SitesWhereCollection self, long begin, long end, bool _using = true) { return self.Add(new string[] { "[t0].[PermissionType]" }, "PermissionType", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Sites_PermissionType_Between(this SqlWhereCollection self, long begin, long end, bool _using = true) { return self.Add(new string[] { "[t0].[PermissionType]" }, "PermissionType", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SitesWhereCollection Creator_Between(this SitesWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Creator]" }, "Creator", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Sites_Creator_Between(this SqlWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Creator]" }, "Creator", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SitesWhereCollection Updator_Between(this SitesWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Updator]" }, "Updator", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Sites_Updator_Between(this SqlWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Updator]" }, "Updator", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SitesWhereCollection UpdatedTime_Between(this SitesWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[UpdatedTime]" }, "UpdatedTime", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Sites_UpdatedTime_Between(this SqlWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[UpdatedTime]" }, "UpdatedTime", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static SitesWhereCollection CreatedTime_Between(this SitesWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[CreatedTime]" }, "CreatedTime", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Sites_CreatedTime_Between(this SqlWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[CreatedTime]" }, "CreatedTime", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static SitesWhereCollection Sub(this SitesWhereCollection self, SqlStatement sub, object value = null, string _operator = "=", bool _using = true) { return self.Add(null, null, value, _operator, sub: sub, _using: _using); }
        public static SitesWhereCollection Or(this SitesWhereCollection self, SqlWhereCollection or, bool _using = true) { return self.Add(null, null, or: or, _using: _using); }
        public static SitesGroupByCollection TenantId(this SitesGroupByCollection self) { return self.Add("[t0].[TenantId]"); }
        public static SqlGroupByCollection Sites_TenantId(this SqlGroupByCollection self) { return self.Add("[t0].[TenantId]"); }
        public static SitesGroupByCollection SiteId(this SitesGroupByCollection self) { return self.Add("[t0].[SiteId]"); }
        public static SqlGroupByCollection Sites_SiteId(this SqlGroupByCollection self) { return self.Add("[t0].[SiteId]"); }
        public static SitesGroupByCollection UpdatedTime(this SitesGroupByCollection self) { return self.Add("[t0].[UpdatedTime]"); }
        public static SqlGroupByCollection Sites_UpdatedTime(this SqlGroupByCollection self) { return self.Add("[t0].[UpdatedTime]"); }
        public static SitesGroupByCollection Ver(this SitesGroupByCollection self) { return self.Add("[t0].[Ver]"); }
        public static SqlGroupByCollection Sites_Ver(this SqlGroupByCollection self) { return self.Add("[t0].[Ver]"); }
        public static SitesGroupByCollection Title(this SitesGroupByCollection self) { return self.Add("[t0].[Title]"); }
        public static SqlGroupByCollection Sites_Title(this SqlGroupByCollection self) { return self.Add("[t0].[Title]"); }
        public static SitesGroupByCollection Body(this SitesGroupByCollection self) { return self.Add("[t0].[Body]"); }
        public static SqlGroupByCollection Sites_Body(this SqlGroupByCollection self) { return self.Add("[t0].[Body]"); }
        public static SitesGroupByCollection TitleBody(this SitesGroupByCollection self) { return self.Add("[t0].[Title]", "[t0].[Body]"); }
        public static SqlGroupByCollection Sites_TitleBody(this SqlGroupByCollection self) { return self.Add("[t0].[Title]", "[t0].[Body]"); }
        public static SitesGroupByCollection ReferenceType(this SitesGroupByCollection self) { return self.Add("[t0].[ReferenceType]"); }
        public static SqlGroupByCollection Sites_ReferenceType(this SqlGroupByCollection self) { return self.Add("[t0].[ReferenceType]"); }
        public static SitesGroupByCollection ParentId(this SitesGroupByCollection self) { return self.Add("[t0].[ParentId]"); }
        public static SqlGroupByCollection Sites_ParentId(this SqlGroupByCollection self) { return self.Add("[t0].[ParentId]"); }
        public static SitesGroupByCollection InheritPermission(this SitesGroupByCollection self) { return self.Add("[t0].[InheritPermission]"); }
        public static SqlGroupByCollection Sites_InheritPermission(this SqlGroupByCollection self) { return self.Add("[t0].[InheritPermission]"); }
        public static SitesGroupByCollection PermissionType(this SitesGroupByCollection self) { return self.Add("(select max([PermissionType]) from [Permissions] where [Permissions].[ReferenceType] = 'Sites' and [Permissions].[ReferenceId] = [t0].[InheritPermission] and (([Permissions].[UserId] = @_U and @_U <> 0) or ([Permissions].[DeptId] = @_D and @_D <> 0)))"); }
        public static SqlGroupByCollection Sites_PermissionType(this SqlGroupByCollection self) { return self.Add("(select max([PermissionType]) from [Permissions] where [Permissions].[ReferenceType] = 'Sites' and [Permissions].[ReferenceId] = [t0].[InheritPermission] and (([Permissions].[UserId] = @_U and @_U <> 0) or ([Permissions].[DeptId] = @_D and @_D <> 0)))"); }
        public static SitesGroupByCollection SiteSettings(this SitesGroupByCollection self) { return self.Add("[t0].[SiteSettings]"); }
        public static SqlGroupByCollection Sites_SiteSettings(this SqlGroupByCollection self) { return self.Add("[t0].[SiteSettings]"); }
        public static SitesGroupByCollection Comments(this SitesGroupByCollection self) { return self.Add("[t0].[Comments]"); }
        public static SqlGroupByCollection Sites_Comments(this SqlGroupByCollection self) { return self.Add("[t0].[Comments]"); }
        public static SitesGroupByCollection Creator(this SitesGroupByCollection self) { return self.Add("[t0].[Creator]"); }
        public static SqlGroupByCollection Sites_Creator(this SqlGroupByCollection self) { return self.Add("[t0].[Creator]"); }
        public static SitesGroupByCollection Updator(this SitesGroupByCollection self) { return self.Add("[t0].[Updator]"); }
        public static SqlGroupByCollection Sites_Updator(this SqlGroupByCollection self) { return self.Add("[t0].[Updator]"); }
        public static SitesGroupByCollection CreatedTime(this SitesGroupByCollection self) { return self.Add("[t0].[CreatedTime]"); }
        public static SqlGroupByCollection Sites_CreatedTime(this SqlGroupByCollection self) { return self.Add("[t0].[CreatedTime]"); }
        public static SitesHavingCollection SitesCount(this SitesHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "count(*)", name: "SitesCount", value: value, _operator: _operator); }
        public static SitesHavingCollection CreatedTimeMax(this SitesHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[CreatedTime])", name: "CreatedTimeMax", value: value, _operator: _operator); }
        public static SqlHavingCollection Sites_CreatedTimeMax(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[CreatedTime])", name: "CreatedTimeMax", value: value, _operator: _operator); }
        public static SitesHavingCollection CreatedTimeMin(this SitesHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[CreatedTime])", name: "CreatedTimeMin", value: value, _operator: _operator); }
        public static SqlHavingCollection Sites_CreatedTimeMin(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[CreatedTime])", name: "CreatedTimeMin", value: value, _operator: _operator); }
        public static SitesOrderByCollection TenantId(this SitesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[TenantId]"); }
        public static SitesOrderByCollection SiteId(this SitesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[SiteId]"); }
        public static SitesOrderByCollection UpdatedTime(this SitesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[UpdatedTime]"); }
        public static SitesOrderByCollection Ver(this SitesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Ver]"); }
        public static SitesOrderByCollection Title(this SitesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Title]"); }
        public static SitesOrderByCollection Body(this SitesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Body]"); }
        public static SitesOrderByCollection TitleBody(this SitesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Title]", "[t0].[Body]"); }
        public static SitesOrderByCollection ReferenceType(this SitesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[ReferenceType]"); }
        public static SitesOrderByCollection ParentId(this SitesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[ParentId]"); }
        public static SitesOrderByCollection InheritPermission(this SitesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[InheritPermission]"); }
        public static SitesOrderByCollection PermissionType(this SitesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "(select max([PermissionType]) from [Permissions] where [Permissions].[ReferenceType] = 'Sites' and [Permissions].[ReferenceId] = [t0].[InheritPermission] and (([Permissions].[UserId] = @_U and @_U <> 0) or ([Permissions].[DeptId] = @_D and @_D <> 0)))"); }
        public static SitesOrderByCollection SiteSettings(this SitesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[SiteSettings]"); }
        public static SitesOrderByCollection Comments(this SitesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Comments]"); }
        public static SitesOrderByCollection Creator(this SitesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Creator]"); }
        public static SitesOrderByCollection Updator(this SitesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Updator]"); }
        public static SitesOrderByCollection CreatedTime(this SitesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[CreatedTime]"); }
        public static SqlOrderByCollection Sites_TenantId(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[TenantId]"); }
        public static SqlOrderByCollection Sites_SiteId(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[SiteId]"); }
        public static SqlOrderByCollection Sites_UpdatedTime(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[UpdatedTime]"); }
        public static SqlOrderByCollection Sites_Ver(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Ver]"); }
        public static SqlOrderByCollection Sites_Title(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Title]"); }
        public static SqlOrderByCollection Sites_Body(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Body]"); }
        public static SqlOrderByCollection Sites_TitleBody(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Title]", "[" + tableName + "].[Body]"); }
        public static SqlOrderByCollection Sites_ReferenceType(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[ReferenceType]"); }
        public static SqlOrderByCollection Sites_ParentId(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[ParentId]"); }
        public static SqlOrderByCollection Sites_InheritPermission(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[InheritPermission]"); }
        public static SqlOrderByCollection Sites_PermissionType(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "(select max([PermissionType]) from [Permissions] where [Permissions].[ReferenceType] = 'Sites' and [Permissions].[ReferenceId] = [" + tableName + "].[InheritPermission] and (([Permissions].[UserId] = @_U and @_U <> 0) or ([Permissions].[DeptId] = @_D and @_D <> 0)))"); }
        public static SqlOrderByCollection Sites_SiteSettings(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[SiteSettings]"); }
        public static SqlOrderByCollection Sites_Comments(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Comments]"); }
        public static SqlOrderByCollection Sites_Creator(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Creator]"); }
        public static SqlOrderByCollection Sites_Updator(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Updator]"); }
        public static SqlOrderByCollection Sites_CreatedTime(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[CreatedTime]"); }
        public static SitesOrderByCollection SitesCount(this SitesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "count(*)"); }
        public static SitesOrderByCollection CreatedTimeMax(this SitesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[CreatedTime])"); }
        public static SqlOrderByCollection Sites_CreatedTimeMax(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[CreatedTime])"); }
        public static SitesOrderByCollection CreatedTimeMin(this SitesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[CreatedTime])"); }
        public static SqlOrderByCollection Sites_CreatedTimeMin(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[CreatedTime])"); }

        public static SitesParamCollection ItemId(this SitesParamCollection self, long itemId)
        {
            if (itemId == 0)
            {
                return self.SiteId(raw: Def.Sql.Identity);
            }
            else
            {
                return self.SiteId(value: itemId);
            }
        }

        public static SitesParamCollection TenantId(this SitesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[TenantId]", "TenantId", value, sub, raw, _using); }
        public static SqlParamCollection Sites_TenantId(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[TenantId]", "TenantId", value, sub, raw, _using); }
        public static SitesParamCollection SiteId(this SitesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[SiteId]", "SiteId", value, sub, raw, _using); }
        public static SqlParamCollection Sites_SiteId(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[SiteId]", "SiteId", value, sub, raw, _using); }
        public static SitesParamCollection UpdatedTime(this SitesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[UpdatedTime]", "UpdatedTime", value, sub, raw, _using); }
        public static SqlParamCollection Sites_UpdatedTime(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[UpdatedTime]", "UpdatedTime", value, sub, raw, _using); }
        public static SitesParamCollection Ver(this SitesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Ver]", "Ver", value, sub, raw, _using); }
        public static SqlParamCollection Sites_Ver(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Ver]", "Ver", value, sub, raw, _using); }
        public static SitesParamCollection Title(this SitesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Title]", "Title", value, sub, raw, _using); }
        public static SqlParamCollection Sites_Title(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Title]", "Title", value, sub, raw, _using); }
        public static SitesParamCollection Body(this SitesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Body]", "Body", value, sub, raw, _using); }
        public static SqlParamCollection Sites_Body(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Body]", "Body", value, sub, raw, _using); }
        public static SitesParamCollection ReferenceType(this SitesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ReferenceType]", "ReferenceType", value, sub, raw, _using); }
        public static SqlParamCollection Sites_ReferenceType(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ReferenceType]", "ReferenceType", value, sub, raw, _using); }
        public static SitesParamCollection ParentId(this SitesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ParentId]", "ParentId", value, sub, raw, _using); }
        public static SqlParamCollection Sites_ParentId(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ParentId]", "ParentId", value, sub, raw, _using); }
        public static SitesParamCollection InheritPermission(this SitesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[InheritPermission]", "InheritPermission", value, sub, raw, _using); }
        public static SqlParamCollection Sites_InheritPermission(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[InheritPermission]", "InheritPermission", value, sub, raw, _using); }
        public static SitesParamCollection SiteSettings(this SitesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[SiteSettings]", "SiteSettings", value, sub, raw, _using); }
        public static SqlParamCollection Sites_SiteSettings(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[SiteSettings]", "SiteSettings", value, sub, raw, _using); }
        public static SitesParamCollection Comments(this SitesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Comments]", "Comments", value, sub, raw, _using); }
        public static SqlParamCollection Sites_Comments(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Comments]", "Comments", value, sub, raw, _using); }
        public static SitesParamCollection Creator(this SitesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Creator]", "Creator", value, sub, raw, _using); }
        public static SqlParamCollection Sites_Creator(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Creator]", "Creator", value, sub, raw, _using); }
        public static SitesParamCollection Updator(this SitesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Updator]", "Updator", value, sub, raw, _using); }
        public static SqlParamCollection Sites_Updator(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Updator]", "Updator", value, sub, raw, _using); }
        public static SitesParamCollection CreatedTime(this SitesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CreatedTime]", "CreatedTime", value, sub, raw, _using); }
        public static SqlParamCollection Sites_CreatedTime(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CreatedTime]", "CreatedTime", value, sub, raw, _using); }

        public static OrdersColumnCollection OrdersColumn()
        {
            return new OrdersColumnCollection();
        }

        public class OrdersColumnCollection : SqlColumnCollection
        {
            public OrdersColumnCollection Add(params string[] columnBrackets)
            {
                base.Add(false, columnBrackets);
                return this;
            }

            public new OrdersColumnCollection Add(bool duplicates = false, params string[] columnBrackets)
            {
                base.Add(duplicates, columnBrackets);
                return this;
            }
        }

        public static OrdersJoinCollection OrdersJoin()
        {
            return new OrdersJoinCollection();
        }

        public class OrdersJoinCollection : SqlJoinCollection
        {
            public new OrdersJoinCollection Add(params string[] columnBrackets)
            {
                columnBrackets.ForEach(columnBracket => base.Add(new SqlJoin(columnBracket)));
                return this;
            }
        }

        public static OrdersWhereCollection OrdersWhere()
        {
            return new OrdersWhereCollection();
        }

        public class OrdersWhereCollection : SqlWhereCollection
        {
            public new OrdersWhereCollection Add(
                string[] columnBrackets = null,
                string name = "",
                object value = null,
                string _operator = "=",
                string multiColumnOperator = " or ",
                string multiParamOperator = " and ",
                SqlStatement sub = null,
                string raw = "",
                SqlWhereCollection or = null,
                bool _using = true)
            {
                base.Add(new SqlWhere(
                    columnBrackets: columnBrackets,
                    name: name,
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    sub: sub,
                    raw: raw,
                    or: or,
                    _using: _using));
                return this;
            }
        }

        public static OrdersGroupByCollection OrdersGroupBy()
        {
            return new OrdersGroupByCollection();
        }

        public class OrdersGroupByCollection : SqlGroupByCollection
        {
            public new OrdersGroupByCollection Add(
                params string[] columnBrackets)
            {
                columnBrackets.ForEach(columnBracket =>
                    base.Add(new SqlGroupBy(columnBracket)));
                return this;
            }
        }

        public static OrdersHavingCollection OrdersHaving()
        {
            return new OrdersHavingCollection();
        }

        public class OrdersHavingCollection : SqlHavingCollection
        {
            public OrdersHavingCollection Add(
                string columnBracket, string name, object value, string _operator)
            {
                base.Add(new SqlHaving(
                    columnBracket: columnBracket,
                    name: name,
                    value: value,
                    _operator: _operator));
                return this;
            }
        }

        public static OrdersOrderByCollection OrdersOrderBy()
        {
            return new OrdersOrderByCollection();
        }

        public class OrdersOrderByCollection : SqlOrderByCollection
        {
            public new OrdersOrderByCollection Add(
                SqlOrderBy.Types type = SqlOrderBy.Types.asc,
                params string[] columnBrackets)
            {
                columnBrackets.ForEach(columnBracket =>
                    base.Add(new SqlOrderBy(columnBracket, type)));
                return this;
            }
        }

        public static OrdersParamCollection OrdersParam()
        {
            return new OrdersParamCollection();
        }

        public class OrdersParamCollection : SqlParamCollection
        {
            public new OrdersParamCollection Add(
                string columnBracket = "",
                string name = "",
                object value = null,
                SqlStatement sub = null,
                string raw = null,
                bool _using = true)
            {
                base.Add(new SqlParam(columnBracket, name, value, sub, raw, _using));
                return this;
            }
        }

        public const string SqlWhereExists_Orders = "exists(select * from [Orders] where #SqlWhere#)";
        public const string SqlWhereNotExists_Orders = "not exists(select * from [Orders] where #SqlWhere#)";
        public static OrdersColumnCollection ReferenceId(this OrdersColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[ReferenceId]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Orders_ReferenceId(this SqlColumnCollection self, string tableName = "Orders", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[ReferenceId]" + _as.ExistsTo(" as [{0}]")); }
        public static OrdersColumnCollection ReferenceType(this OrdersColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[ReferenceType]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Orders_ReferenceType(this SqlColumnCollection self, string tableName = "Orders", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[ReferenceType]" + _as.ExistsTo(" as [{0}]")); }
        public static OrdersColumnCollection OwnerId(this OrdersColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[OwnerId]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Orders_OwnerId(this SqlColumnCollection self, string tableName = "Orders", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[OwnerId]" + _as.ExistsTo(" as [{0}]")); }
        public static OrdersColumnCollection Ver(this OrdersColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Ver]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Orders_Ver(this SqlColumnCollection self, string tableName = "Orders", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Ver]" + _as.ExistsTo(" as [{0}]")); }
        public static OrdersColumnCollection Data(this OrdersColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Data]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Orders_Data(this SqlColumnCollection self, string tableName = "Orders", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Data]" + _as.ExistsTo(" as [{0}]")); }
        public static OrdersColumnCollection Comments(this OrdersColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Comments]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Orders_Comments(this SqlColumnCollection self, string tableName = "Orders", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Comments]" + _as.ExistsTo(" as [{0}]")); }
        public static OrdersColumnCollection Creator(this OrdersColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Creator]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Orders_Creator(this SqlColumnCollection self, string tableName = "Orders", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Creator]" + _as.ExistsTo(" as [{0}]")); }
        public static OrdersColumnCollection Updator(this OrdersColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Updator]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Orders_Updator(this SqlColumnCollection self, string tableName = "Orders", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Updator]" + _as.ExistsTo(" as [{0}]")); }
        public static OrdersColumnCollection CreatedTime(this OrdersColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[CreatedTime]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Orders_CreatedTime(this SqlColumnCollection self, string tableName = "Orders", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[CreatedTime]" + _as.ExistsTo(" as [{0}]")); }
        public static OrdersColumnCollection UpdatedTime(this OrdersColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[UpdatedTime]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Orders_UpdatedTime(this SqlColumnCollection self, string tableName = "Orders", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[UpdatedTime]" + _as.ExistsTo(" as [{0}]")); }
        public static OrdersColumnCollection OrdersCount(this OrdersColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "count(*) as OrdersCount"); }
        public static OrdersColumnCollection CreatedTimeMax(this OrdersColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[CreatedTime]) as [CreatedTimeMax]"); }
        public static SqlColumnCollection Orders_CreatedTimeMax(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[CreatedTime]) as [CreatedTimeMax]"); }
        public static OrdersColumnCollection CreatedTimeMin(this OrdersColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[CreatedTime]) as [CreatedTimeMin]"); }
        public static SqlColumnCollection Orders_CreatedTimeMin(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[CreatedTime]) as [CreatedTimeMin]"); }
        public static OrdersColumnCollection UpdatedTimeMax(this OrdersColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[UpdatedTime]) as [UpdatedTimeMax]"); }
        public static SqlColumnCollection Orders_UpdatedTimeMax(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[UpdatedTime]) as [UpdatedTimeMax]"); }
        public static OrdersColumnCollection UpdatedTimeMin(this OrdersColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[UpdatedTime]) as [UpdatedTimeMin]"); }
        public static SqlColumnCollection Orders_UpdatedTimeMin(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[UpdatedTime]) as [UpdatedTimeMin]"); }
        public static OrdersWhereCollection ReferenceId(this OrdersWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[ReferenceId]" }, "ReferenceId", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Orders_ReferenceId(this SqlWhereCollection self, object value = null, string tableName = "Orders", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[ReferenceId]" }, "ReferenceId", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static OrdersWhereCollection ReferenceType(this OrdersWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[ReferenceType]" }, "ReferenceType", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Orders_ReferenceType(this SqlWhereCollection self, object value = null, string tableName = "Orders", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[ReferenceType]" }, "ReferenceType", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static OrdersWhereCollection OwnerId(this OrdersWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[OwnerId]" }, "OwnerId", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Orders_OwnerId(this SqlWhereCollection self, object value = null, string tableName = "Orders", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[OwnerId]" }, "OwnerId", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static OrdersWhereCollection Ver(this OrdersWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Ver]" }, "Ver", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Orders_Ver(this SqlWhereCollection self, object value = null, string tableName = "Orders", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Ver]" }, "Ver", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static OrdersWhereCollection Data(this OrdersWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Data]" }, "Data", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Orders_Data(this SqlWhereCollection self, object value = null, string tableName = "Orders", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Data]" }, "Data", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static OrdersWhereCollection Comments(this OrdersWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Comments]" }, "Comments", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Orders_Comments(this SqlWhereCollection self, object value = null, string tableName = "Orders", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Comments]" }, "Comments", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static OrdersWhereCollection Creator(this OrdersWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Creator]" }, "Creator", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Orders_Creator(this SqlWhereCollection self, object value = null, string tableName = "Orders", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Creator]" }, "Creator", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static OrdersWhereCollection Updator(this OrdersWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Updator]" }, "Updator", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Orders_Updator(this SqlWhereCollection self, object value = null, string tableName = "Orders", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Updator]" }, "Updator", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static OrdersWhereCollection CreatedTime(this OrdersWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[CreatedTime]" }, "CreatedTime", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Orders_CreatedTime(this SqlWhereCollection self, object value = null, string tableName = "Orders", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[CreatedTime]" }, "CreatedTime", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static OrdersWhereCollection UpdatedTime(this OrdersWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[UpdatedTime]" }, "UpdatedTime", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Orders_UpdatedTime(this SqlWhereCollection self, object value = null, string tableName = "Orders", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[UpdatedTime]" }, "UpdatedTime", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static OrdersWhereCollection ReferenceId_In(this OrdersWhereCollection self, IEnumerable<long> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[ReferenceId]" }, "ReferenceId", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Orders_ReferenceId_In(this SqlWhereCollection self, IEnumerable<long> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[ReferenceId]" }, "ReferenceId", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static OrdersWhereCollection OwnerId_In(this OrdersWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[OwnerId]" }, "OwnerId", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Orders_OwnerId_In(this SqlWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[OwnerId]" }, "OwnerId", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static OrdersWhereCollection Ver_In(this OrdersWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Ver]" }, "Ver", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Orders_Ver_In(this SqlWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Ver]" }, "Ver", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static OrdersWhereCollection Creator_In(this OrdersWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Creator]" }, "Creator", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Orders_Creator_In(this SqlWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Creator]" }, "Creator", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static OrdersWhereCollection Updator_In(this OrdersWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Updator]" }, "Updator", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Orders_Updator_In(this SqlWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Updator]" }, "Updator", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static OrdersWhereCollection ReferenceId_Between(this OrdersWhereCollection self, long begin, long end, bool _using = true) { return self.Add(new string[] { "[t0].[ReferenceId]" }, "ReferenceId", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Orders_ReferenceId_Between(this SqlWhereCollection self, long begin, long end, bool _using = true) { return self.Add(new string[] { "[t0].[ReferenceId]" }, "ReferenceId", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static OrdersWhereCollection OwnerId_Between(this OrdersWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[OwnerId]" }, "OwnerId", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Orders_OwnerId_Between(this SqlWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[OwnerId]" }, "OwnerId", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static OrdersWhereCollection Ver_Between(this OrdersWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Ver]" }, "Ver", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Orders_Ver_Between(this SqlWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Ver]" }, "Ver", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static OrdersWhereCollection Creator_Between(this OrdersWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Creator]" }, "Creator", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Orders_Creator_Between(this SqlWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Creator]" }, "Creator", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static OrdersWhereCollection Updator_Between(this OrdersWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Updator]" }, "Updator", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Orders_Updator_Between(this SqlWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Updator]" }, "Updator", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static OrdersWhereCollection CreatedTime_Between(this OrdersWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[CreatedTime]" }, "CreatedTime", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Orders_CreatedTime_Between(this SqlWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[CreatedTime]" }, "CreatedTime", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static OrdersWhereCollection UpdatedTime_Between(this OrdersWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[UpdatedTime]" }, "UpdatedTime", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Orders_UpdatedTime_Between(this SqlWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[UpdatedTime]" }, "UpdatedTime", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static OrdersWhereCollection Sub(this OrdersWhereCollection self, SqlStatement sub, object value = null, string _operator = "=", bool _using = true) { return self.Add(null, null, value, _operator, sub: sub, _using: _using); }
        public static OrdersWhereCollection Or(this OrdersWhereCollection self, SqlWhereCollection or, bool _using = true) { return self.Add(null, null, or: or, _using: _using); }
        public static OrdersGroupByCollection ReferenceId(this OrdersGroupByCollection self) { return self.Add("[t0].[ReferenceId]"); }
        public static SqlGroupByCollection Orders_ReferenceId(this SqlGroupByCollection self) { return self.Add("[t0].[ReferenceId]"); }
        public static OrdersGroupByCollection ReferenceType(this OrdersGroupByCollection self) { return self.Add("[t0].[ReferenceType]"); }
        public static SqlGroupByCollection Orders_ReferenceType(this SqlGroupByCollection self) { return self.Add("[t0].[ReferenceType]"); }
        public static OrdersGroupByCollection OwnerId(this OrdersGroupByCollection self) { return self.Add("[t0].[OwnerId]"); }
        public static SqlGroupByCollection Orders_OwnerId(this SqlGroupByCollection self) { return self.Add("[t0].[OwnerId]"); }
        public static OrdersGroupByCollection Ver(this OrdersGroupByCollection self) { return self.Add("[t0].[Ver]"); }
        public static SqlGroupByCollection Orders_Ver(this SqlGroupByCollection self) { return self.Add("[t0].[Ver]"); }
        public static OrdersGroupByCollection Data(this OrdersGroupByCollection self) { return self.Add("[t0].[Data]"); }
        public static SqlGroupByCollection Orders_Data(this SqlGroupByCollection self) { return self.Add("[t0].[Data]"); }
        public static OrdersGroupByCollection Comments(this OrdersGroupByCollection self) { return self.Add("[t0].[Comments]"); }
        public static SqlGroupByCollection Orders_Comments(this SqlGroupByCollection self) { return self.Add("[t0].[Comments]"); }
        public static OrdersGroupByCollection Creator(this OrdersGroupByCollection self) { return self.Add("[t0].[Creator]"); }
        public static SqlGroupByCollection Orders_Creator(this SqlGroupByCollection self) { return self.Add("[t0].[Creator]"); }
        public static OrdersGroupByCollection Updator(this OrdersGroupByCollection self) { return self.Add("[t0].[Updator]"); }
        public static SqlGroupByCollection Orders_Updator(this SqlGroupByCollection self) { return self.Add("[t0].[Updator]"); }
        public static OrdersGroupByCollection CreatedTime(this OrdersGroupByCollection self) { return self.Add("[t0].[CreatedTime]"); }
        public static SqlGroupByCollection Orders_CreatedTime(this SqlGroupByCollection self) { return self.Add("[t0].[CreatedTime]"); }
        public static OrdersGroupByCollection UpdatedTime(this OrdersGroupByCollection self) { return self.Add("[t0].[UpdatedTime]"); }
        public static SqlGroupByCollection Orders_UpdatedTime(this SqlGroupByCollection self) { return self.Add("[t0].[UpdatedTime]"); }
        public static OrdersHavingCollection OrdersCount(this OrdersHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "count(*)", name: "OrdersCount", value: value, _operator: _operator); }
        public static OrdersHavingCollection CreatedTimeMax(this OrdersHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[CreatedTime])", name: "CreatedTimeMax", value: value, _operator: _operator); }
        public static SqlHavingCollection Orders_CreatedTimeMax(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[CreatedTime])", name: "CreatedTimeMax", value: value, _operator: _operator); }
        public static OrdersHavingCollection CreatedTimeMin(this OrdersHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[CreatedTime])", name: "CreatedTimeMin", value: value, _operator: _operator); }
        public static SqlHavingCollection Orders_CreatedTimeMin(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[CreatedTime])", name: "CreatedTimeMin", value: value, _operator: _operator); }
        public static OrdersHavingCollection UpdatedTimeMax(this OrdersHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[UpdatedTime])", name: "UpdatedTimeMax", value: value, _operator: _operator); }
        public static SqlHavingCollection Orders_UpdatedTimeMax(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[UpdatedTime])", name: "UpdatedTimeMax", value: value, _operator: _operator); }
        public static OrdersHavingCollection UpdatedTimeMin(this OrdersHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[UpdatedTime])", name: "UpdatedTimeMin", value: value, _operator: _operator); }
        public static SqlHavingCollection Orders_UpdatedTimeMin(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[UpdatedTime])", name: "UpdatedTimeMin", value: value, _operator: _operator); }
        public static OrdersOrderByCollection ReferenceId(this OrdersOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[ReferenceId]"); }
        public static OrdersOrderByCollection ReferenceType(this OrdersOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[ReferenceType]"); }
        public static OrdersOrderByCollection OwnerId(this OrdersOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[OwnerId]"); }
        public static OrdersOrderByCollection Ver(this OrdersOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Ver]"); }
        public static OrdersOrderByCollection Data(this OrdersOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Data]"); }
        public static OrdersOrderByCollection Comments(this OrdersOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Comments]"); }
        public static OrdersOrderByCollection Creator(this OrdersOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Creator]"); }
        public static OrdersOrderByCollection Updator(this OrdersOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Updator]"); }
        public static OrdersOrderByCollection CreatedTime(this OrdersOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[CreatedTime]"); }
        public static OrdersOrderByCollection UpdatedTime(this OrdersOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[UpdatedTime]"); }
        public static SqlOrderByCollection Orders_ReferenceId(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[ReferenceId]"); }
        public static SqlOrderByCollection Orders_ReferenceType(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[ReferenceType]"); }
        public static SqlOrderByCollection Orders_OwnerId(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[OwnerId]"); }
        public static SqlOrderByCollection Orders_Ver(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Ver]"); }
        public static SqlOrderByCollection Orders_Data(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Data]"); }
        public static SqlOrderByCollection Orders_Comments(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Comments]"); }
        public static SqlOrderByCollection Orders_Creator(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Creator]"); }
        public static SqlOrderByCollection Orders_Updator(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Updator]"); }
        public static SqlOrderByCollection Orders_CreatedTime(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[CreatedTime]"); }
        public static SqlOrderByCollection Orders_UpdatedTime(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[UpdatedTime]"); }
        public static OrdersOrderByCollection OrdersCount(this OrdersOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "count(*)"); }
        public static OrdersOrderByCollection CreatedTimeMax(this OrdersOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[CreatedTime])"); }
        public static SqlOrderByCollection Orders_CreatedTimeMax(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[CreatedTime])"); }
        public static OrdersOrderByCollection CreatedTimeMin(this OrdersOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[CreatedTime])"); }
        public static SqlOrderByCollection Orders_CreatedTimeMin(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[CreatedTime])"); }
        public static OrdersOrderByCollection UpdatedTimeMax(this OrdersOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[UpdatedTime])"); }
        public static SqlOrderByCollection Orders_UpdatedTimeMax(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[UpdatedTime])"); }
        public static OrdersOrderByCollection UpdatedTimeMin(this OrdersOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[UpdatedTime])"); }
        public static SqlOrderByCollection Orders_UpdatedTimeMin(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[UpdatedTime])"); }
        public static OrdersParamCollection ReferenceId(this OrdersParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ReferenceId]", "ReferenceId", value, sub, raw, _using); }
        public static SqlParamCollection Orders_ReferenceId(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ReferenceId]", "ReferenceId", value, sub, raw, _using); }
        public static OrdersParamCollection ReferenceType(this OrdersParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ReferenceType]", "ReferenceType", value, sub, raw, _using); }
        public static SqlParamCollection Orders_ReferenceType(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ReferenceType]", "ReferenceType", value, sub, raw, _using); }
        public static OrdersParamCollection OwnerId(this OrdersParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[OwnerId]", "OwnerId", value, sub, raw, _using); }
        public static SqlParamCollection Orders_OwnerId(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[OwnerId]", "OwnerId", value, sub, raw, _using); }
        public static OrdersParamCollection Ver(this OrdersParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Ver]", "Ver", value, sub, raw, _using); }
        public static SqlParamCollection Orders_Ver(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Ver]", "Ver", value, sub, raw, _using); }
        public static OrdersParamCollection Data(this OrdersParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Data]", "Data", value, sub, raw, _using); }
        public static SqlParamCollection Orders_Data(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Data]", "Data", value, sub, raw, _using); }
        public static OrdersParamCollection Comments(this OrdersParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Comments]", "Comments", value, sub, raw, _using); }
        public static SqlParamCollection Orders_Comments(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Comments]", "Comments", value, sub, raw, _using); }
        public static OrdersParamCollection Creator(this OrdersParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Creator]", "Creator", value, sub, raw, _using); }
        public static SqlParamCollection Orders_Creator(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Creator]", "Creator", value, sub, raw, _using); }
        public static OrdersParamCollection Updator(this OrdersParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Updator]", "Updator", value, sub, raw, _using); }
        public static SqlParamCollection Orders_Updator(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Updator]", "Updator", value, sub, raw, _using); }
        public static OrdersParamCollection CreatedTime(this OrdersParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CreatedTime]", "CreatedTime", value, sub, raw, _using); }
        public static SqlParamCollection Orders_CreatedTime(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CreatedTime]", "CreatedTime", value, sub, raw, _using); }
        public static OrdersParamCollection UpdatedTime(this OrdersParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[UpdatedTime]", "UpdatedTime", value, sub, raw, _using); }
        public static SqlParamCollection Orders_UpdatedTime(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[UpdatedTime]", "UpdatedTime", value, sub, raw, _using); }

        public static ExportSettingsColumnCollection ExportSettingsColumn()
        {
            return new ExportSettingsColumnCollection();
        }

        public class ExportSettingsColumnCollection : SqlColumnCollection
        {
            public ExportSettingsColumnCollection Add(params string[] columnBrackets)
            {
                base.Add(false, columnBrackets);
                return this;
            }

            public new ExportSettingsColumnCollection Add(bool duplicates = false, params string[] columnBrackets)
            {
                base.Add(duplicates, columnBrackets);
                return this;
            }
        }

        public static ExportSettingsJoinCollection ExportSettingsJoin()
        {
            return new ExportSettingsJoinCollection();
        }

        public class ExportSettingsJoinCollection : SqlJoinCollection
        {
            public new ExportSettingsJoinCollection Add(params string[] columnBrackets)
            {
                columnBrackets.ForEach(columnBracket => base.Add(new SqlJoin(columnBracket)));
                return this;
            }
        }

        public static ExportSettingsWhereCollection ExportSettingsWhere()
        {
            return new ExportSettingsWhereCollection();
        }

        public class ExportSettingsWhereCollection : SqlWhereCollection
        {
            public new ExportSettingsWhereCollection Add(
                string[] columnBrackets = null,
                string name = "",
                object value = null,
                string _operator = "=",
                string multiColumnOperator = " or ",
                string multiParamOperator = " and ",
                SqlStatement sub = null,
                string raw = "",
                SqlWhereCollection or = null,
                bool _using = true)
            {
                base.Add(new SqlWhere(
                    columnBrackets: columnBrackets,
                    name: name,
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    sub: sub,
                    raw: raw,
                    or: or,
                    _using: _using));
                return this;
            }
        }

        public static ExportSettingsGroupByCollection ExportSettingsGroupBy()
        {
            return new ExportSettingsGroupByCollection();
        }

        public class ExportSettingsGroupByCollection : SqlGroupByCollection
        {
            public new ExportSettingsGroupByCollection Add(
                params string[] columnBrackets)
            {
                columnBrackets.ForEach(columnBracket =>
                    base.Add(new SqlGroupBy(columnBracket)));
                return this;
            }
        }

        public static ExportSettingsHavingCollection ExportSettingsHaving()
        {
            return new ExportSettingsHavingCollection();
        }

        public class ExportSettingsHavingCollection : SqlHavingCollection
        {
            public ExportSettingsHavingCollection Add(
                string columnBracket, string name, object value, string _operator)
            {
                base.Add(new SqlHaving(
                    columnBracket: columnBracket,
                    name: name,
                    value: value,
                    _operator: _operator));
                return this;
            }
        }

        public static ExportSettingsOrderByCollection ExportSettingsOrderBy()
        {
            return new ExportSettingsOrderByCollection();
        }

        public class ExportSettingsOrderByCollection : SqlOrderByCollection
        {
            public new ExportSettingsOrderByCollection Add(
                SqlOrderBy.Types type = SqlOrderBy.Types.asc,
                params string[] columnBrackets)
            {
                columnBrackets.ForEach(columnBracket =>
                    base.Add(new SqlOrderBy(columnBracket, type)));
                return this;
            }
        }

        public static ExportSettingsParamCollection ExportSettingsParam()
        {
            return new ExportSettingsParamCollection();
        }

        public class ExportSettingsParamCollection : SqlParamCollection
        {
            public new ExportSettingsParamCollection Add(
                string columnBracket = "",
                string name = "",
                object value = null,
                SqlStatement sub = null,
                string raw = null,
                bool _using = true)
            {
                base.Add(new SqlParam(columnBracket, name, value, sub, raw, _using));
                return this;
            }
        }

        public const string SqlWhereExists_ExportSettings = "exists(select * from [ExportSettings] where #SqlWhere#)";
        public const string SqlWhereNotExists_ExportSettings = "not exists(select * from [ExportSettings] where #SqlWhere#)";
        public static ExportSettingsColumnCollection ReferenceType(this ExportSettingsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[ReferenceType]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection ExportSettings_ReferenceType(this SqlColumnCollection self, string tableName = "ExportSettings", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[ReferenceType]" + _as.ExistsTo(" as [{0}]")); }
        public static ExportSettingsColumnCollection ReferenceId(this ExportSettingsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[ReferenceId]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection ExportSettings_ReferenceId(this SqlColumnCollection self, string tableName = "ExportSettings", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[ReferenceId]" + _as.ExistsTo(" as [{0}]")); }
        public static ExportSettingsColumnCollection Title(this ExportSettingsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Title]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection ExportSettings_Title(this SqlColumnCollection self, string tableName = "ExportSettings", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Title]" + _as.ExistsTo(" as [{0}]")); }
        public static ExportSettingsColumnCollection ExportSettingId(this ExportSettingsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[ExportSettingId]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection ExportSettings_ExportSettingId(this SqlColumnCollection self, string tableName = "ExportSettings", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[ExportSettingId]" + _as.ExistsTo(" as [{0}]")); }
        public static ExportSettingsColumnCollection Ver(this ExportSettingsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Ver]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection ExportSettings_Ver(this SqlColumnCollection self, string tableName = "ExportSettings", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Ver]" + _as.ExistsTo(" as [{0}]")); }
        public static ExportSettingsColumnCollection AddHeader(this ExportSettingsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[AddHeader]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection ExportSettings_AddHeader(this SqlColumnCollection self, string tableName = "ExportSettings", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[AddHeader]" + _as.ExistsTo(" as [{0}]")); }
        public static ExportSettingsColumnCollection ExportColumns(this ExportSettingsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[ExportColumns]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection ExportSettings_ExportColumns(this SqlColumnCollection self, string tableName = "ExportSettings", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[ExportColumns]" + _as.ExistsTo(" as [{0}]")); }
        public static ExportSettingsColumnCollection Comments(this ExportSettingsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Comments]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection ExportSettings_Comments(this SqlColumnCollection self, string tableName = "ExportSettings", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Comments]" + _as.ExistsTo(" as [{0}]")); }
        public static ExportSettingsColumnCollection Creator(this ExportSettingsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Creator]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection ExportSettings_Creator(this SqlColumnCollection self, string tableName = "ExportSettings", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Creator]" + _as.ExistsTo(" as [{0}]")); }
        public static ExportSettingsColumnCollection Updator(this ExportSettingsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Updator]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection ExportSettings_Updator(this SqlColumnCollection self, string tableName = "ExportSettings", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Updator]" + _as.ExistsTo(" as [{0}]")); }
        public static ExportSettingsColumnCollection CreatedTime(this ExportSettingsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[CreatedTime]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection ExportSettings_CreatedTime(this SqlColumnCollection self, string tableName = "ExportSettings", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[CreatedTime]" + _as.ExistsTo(" as [{0}]")); }
        public static ExportSettingsColumnCollection UpdatedTime(this ExportSettingsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[UpdatedTime]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection ExportSettings_UpdatedTime(this SqlColumnCollection self, string tableName = "ExportSettings", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[UpdatedTime]" + _as.ExistsTo(" as [{0}]")); }
        public static ExportSettingsColumnCollection ExportSettingsCount(this ExportSettingsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "count(*) as ExportSettingsCount"); }
        public static ExportSettingsColumnCollection CreatedTimeMax(this ExportSettingsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[CreatedTime]) as [CreatedTimeMax]"); }
        public static SqlColumnCollection ExportSettings_CreatedTimeMax(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[CreatedTime]) as [CreatedTimeMax]"); }
        public static ExportSettingsColumnCollection CreatedTimeMin(this ExportSettingsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[CreatedTime]) as [CreatedTimeMin]"); }
        public static SqlColumnCollection ExportSettings_CreatedTimeMin(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[CreatedTime]) as [CreatedTimeMin]"); }
        public static ExportSettingsColumnCollection UpdatedTimeMax(this ExportSettingsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[UpdatedTime]) as [UpdatedTimeMax]"); }
        public static SqlColumnCollection ExportSettings_UpdatedTimeMax(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[UpdatedTime]) as [UpdatedTimeMax]"); }
        public static ExportSettingsColumnCollection UpdatedTimeMin(this ExportSettingsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[UpdatedTime]) as [UpdatedTimeMin]"); }
        public static SqlColumnCollection ExportSettings_UpdatedTimeMin(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[UpdatedTime]) as [UpdatedTimeMin]"); }
        public static ExportSettingsWhereCollection ReferenceType(this ExportSettingsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[ReferenceType]" }, "ReferenceType", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection ExportSettings_ReferenceType(this SqlWhereCollection self, object value = null, string tableName = "ExportSettings", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[ReferenceType]" }, "ReferenceType", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ExportSettingsWhereCollection ReferenceId(this ExportSettingsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[ReferenceId]" }, "ReferenceId", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection ExportSettings_ReferenceId(this SqlWhereCollection self, object value = null, string tableName = "ExportSettings", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[ReferenceId]" }, "ReferenceId", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ExportSettingsWhereCollection Title(this ExportSettingsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Title]" }, "Title", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection ExportSettings_Title(this SqlWhereCollection self, object value = null, string tableName = "ExportSettings", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Title]" }, "Title", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ExportSettingsWhereCollection ExportSettingId(this ExportSettingsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[ExportSettingId]" }, "ExportSettingId", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection ExportSettings_ExportSettingId(this SqlWhereCollection self, object value = null, string tableName = "ExportSettings", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[ExportSettingId]" }, "ExportSettingId", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ExportSettingsWhereCollection Ver(this ExportSettingsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Ver]" }, "Ver", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection ExportSettings_Ver(this SqlWhereCollection self, object value = null, string tableName = "ExportSettings", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Ver]" }, "Ver", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ExportSettingsWhereCollection AddHeader(this ExportSettingsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[AddHeader]" }, "AddHeader", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection ExportSettings_AddHeader(this SqlWhereCollection self, object value = null, string tableName = "ExportSettings", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[AddHeader]" }, "AddHeader", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ExportSettingsWhereCollection ExportColumns(this ExportSettingsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[ExportColumns]" }, "ExportColumns", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection ExportSettings_ExportColumns(this SqlWhereCollection self, object value = null, string tableName = "ExportSettings", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[ExportColumns]" }, "ExportColumns", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ExportSettingsWhereCollection Comments(this ExportSettingsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Comments]" }, "Comments", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection ExportSettings_Comments(this SqlWhereCollection self, object value = null, string tableName = "ExportSettings", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Comments]" }, "Comments", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ExportSettingsWhereCollection Creator(this ExportSettingsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Creator]" }, "Creator", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection ExportSettings_Creator(this SqlWhereCollection self, object value = null, string tableName = "ExportSettings", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Creator]" }, "Creator", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ExportSettingsWhereCollection Updator(this ExportSettingsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Updator]" }, "Updator", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection ExportSettings_Updator(this SqlWhereCollection self, object value = null, string tableName = "ExportSettings", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Updator]" }, "Updator", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ExportSettingsWhereCollection CreatedTime(this ExportSettingsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[CreatedTime]" }, "CreatedTime", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection ExportSettings_CreatedTime(this SqlWhereCollection self, object value = null, string tableName = "ExportSettings", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[CreatedTime]" }, "CreatedTime", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ExportSettingsWhereCollection UpdatedTime(this ExportSettingsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[UpdatedTime]" }, "UpdatedTime", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection ExportSettings_UpdatedTime(this SqlWhereCollection self, object value = null, string tableName = "ExportSettings", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[UpdatedTime]" }, "UpdatedTime", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ExportSettingsWhereCollection ReferenceId_In(this ExportSettingsWhereCollection self, IEnumerable<long> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[ReferenceId]" }, "ReferenceId", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection ExportSettings_ReferenceId_In(this SqlWhereCollection self, IEnumerable<long> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[ReferenceId]" }, "ReferenceId", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static ExportSettingsWhereCollection ExportSettingId_In(this ExportSettingsWhereCollection self, IEnumerable<long> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[ExportSettingId]" }, "ExportSettingId", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection ExportSettings_ExportSettingId_In(this SqlWhereCollection self, IEnumerable<long> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[ExportSettingId]" }, "ExportSettingId", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static ExportSettingsWhereCollection Ver_In(this ExportSettingsWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Ver]" }, "Ver", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection ExportSettings_Ver_In(this SqlWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Ver]" }, "Ver", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static ExportSettingsWhereCollection Creator_In(this ExportSettingsWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Creator]" }, "Creator", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection ExportSettings_Creator_In(this SqlWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Creator]" }, "Creator", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static ExportSettingsWhereCollection Updator_In(this ExportSettingsWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Updator]" }, "Updator", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection ExportSettings_Updator_In(this SqlWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Updator]" }, "Updator", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static ExportSettingsWhereCollection ReferenceId_Between(this ExportSettingsWhereCollection self, long begin, long end, bool _using = true) { return self.Add(new string[] { "[t0].[ReferenceId]" }, "ReferenceId", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection ExportSettings_ReferenceId_Between(this SqlWhereCollection self, long begin, long end, bool _using = true) { return self.Add(new string[] { "[t0].[ReferenceId]" }, "ReferenceId", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static ExportSettingsWhereCollection ExportSettingId_Between(this ExportSettingsWhereCollection self, long begin, long end, bool _using = true) { return self.Add(new string[] { "[t0].[ExportSettingId]" }, "ExportSettingId", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection ExportSettings_ExportSettingId_Between(this SqlWhereCollection self, long begin, long end, bool _using = true) { return self.Add(new string[] { "[t0].[ExportSettingId]" }, "ExportSettingId", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static ExportSettingsWhereCollection Ver_Between(this ExportSettingsWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Ver]" }, "Ver", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection ExportSettings_Ver_Between(this SqlWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Ver]" }, "Ver", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static ExportSettingsWhereCollection Creator_Between(this ExportSettingsWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Creator]" }, "Creator", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection ExportSettings_Creator_Between(this SqlWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Creator]" }, "Creator", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static ExportSettingsWhereCollection Updator_Between(this ExportSettingsWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Updator]" }, "Updator", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection ExportSettings_Updator_Between(this SqlWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Updator]" }, "Updator", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static ExportSettingsWhereCollection CreatedTime_Between(this ExportSettingsWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[CreatedTime]" }, "CreatedTime", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection ExportSettings_CreatedTime_Between(this SqlWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[CreatedTime]" }, "CreatedTime", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static ExportSettingsWhereCollection UpdatedTime_Between(this ExportSettingsWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[UpdatedTime]" }, "UpdatedTime", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection ExportSettings_UpdatedTime_Between(this SqlWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[UpdatedTime]" }, "UpdatedTime", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static ExportSettingsWhereCollection Sub(this ExportSettingsWhereCollection self, SqlStatement sub, object value = null, string _operator = "=", bool _using = true) { return self.Add(null, null, value, _operator, sub: sub, _using: _using); }
        public static ExportSettingsWhereCollection Or(this ExportSettingsWhereCollection self, SqlWhereCollection or, bool _using = true) { return self.Add(null, null, or: or, _using: _using); }
        public static ExportSettingsGroupByCollection ReferenceType(this ExportSettingsGroupByCollection self) { return self.Add("[t0].[ReferenceType]"); }
        public static SqlGroupByCollection ExportSettings_ReferenceType(this SqlGroupByCollection self) { return self.Add("[t0].[ReferenceType]"); }
        public static ExportSettingsGroupByCollection ReferenceId(this ExportSettingsGroupByCollection self) { return self.Add("[t0].[ReferenceId]"); }
        public static SqlGroupByCollection ExportSettings_ReferenceId(this SqlGroupByCollection self) { return self.Add("[t0].[ReferenceId]"); }
        public static ExportSettingsGroupByCollection Title(this ExportSettingsGroupByCollection self) { return self.Add("[t0].[Title]"); }
        public static SqlGroupByCollection ExportSettings_Title(this SqlGroupByCollection self) { return self.Add("[t0].[Title]"); }
        public static ExportSettingsGroupByCollection ExportSettingId(this ExportSettingsGroupByCollection self) { return self.Add("[t0].[ExportSettingId]"); }
        public static SqlGroupByCollection ExportSettings_ExportSettingId(this SqlGroupByCollection self) { return self.Add("[t0].[ExportSettingId]"); }
        public static ExportSettingsGroupByCollection Ver(this ExportSettingsGroupByCollection self) { return self.Add("[t0].[Ver]"); }
        public static SqlGroupByCollection ExportSettings_Ver(this SqlGroupByCollection self) { return self.Add("[t0].[Ver]"); }
        public static ExportSettingsGroupByCollection AddHeader(this ExportSettingsGroupByCollection self) { return self.Add("[t0].[AddHeader]"); }
        public static SqlGroupByCollection ExportSettings_AddHeader(this SqlGroupByCollection self) { return self.Add("[t0].[AddHeader]"); }
        public static ExportSettingsGroupByCollection ExportColumns(this ExportSettingsGroupByCollection self) { return self.Add("[t0].[ExportColumns]"); }
        public static SqlGroupByCollection ExportSettings_ExportColumns(this SqlGroupByCollection self) { return self.Add("[t0].[ExportColumns]"); }
        public static ExportSettingsGroupByCollection Comments(this ExportSettingsGroupByCollection self) { return self.Add("[t0].[Comments]"); }
        public static SqlGroupByCollection ExportSettings_Comments(this SqlGroupByCollection self) { return self.Add("[t0].[Comments]"); }
        public static ExportSettingsGroupByCollection Creator(this ExportSettingsGroupByCollection self) { return self.Add("[t0].[Creator]"); }
        public static SqlGroupByCollection ExportSettings_Creator(this SqlGroupByCollection self) { return self.Add("[t0].[Creator]"); }
        public static ExportSettingsGroupByCollection Updator(this ExportSettingsGroupByCollection self) { return self.Add("[t0].[Updator]"); }
        public static SqlGroupByCollection ExportSettings_Updator(this SqlGroupByCollection self) { return self.Add("[t0].[Updator]"); }
        public static ExportSettingsGroupByCollection CreatedTime(this ExportSettingsGroupByCollection self) { return self.Add("[t0].[CreatedTime]"); }
        public static SqlGroupByCollection ExportSettings_CreatedTime(this SqlGroupByCollection self) { return self.Add("[t0].[CreatedTime]"); }
        public static ExportSettingsGroupByCollection UpdatedTime(this ExportSettingsGroupByCollection self) { return self.Add("[t0].[UpdatedTime]"); }
        public static SqlGroupByCollection ExportSettings_UpdatedTime(this SqlGroupByCollection self) { return self.Add("[t0].[UpdatedTime]"); }
        public static ExportSettingsHavingCollection ExportSettingsCount(this ExportSettingsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "count(*)", name: "ExportSettingsCount", value: value, _operator: _operator); }
        public static ExportSettingsHavingCollection CreatedTimeMax(this ExportSettingsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[CreatedTime])", name: "CreatedTimeMax", value: value, _operator: _operator); }
        public static SqlHavingCollection ExportSettings_CreatedTimeMax(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[CreatedTime])", name: "CreatedTimeMax", value: value, _operator: _operator); }
        public static ExportSettingsHavingCollection CreatedTimeMin(this ExportSettingsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[CreatedTime])", name: "CreatedTimeMin", value: value, _operator: _operator); }
        public static SqlHavingCollection ExportSettings_CreatedTimeMin(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[CreatedTime])", name: "CreatedTimeMin", value: value, _operator: _operator); }
        public static ExportSettingsHavingCollection UpdatedTimeMax(this ExportSettingsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[UpdatedTime])", name: "UpdatedTimeMax", value: value, _operator: _operator); }
        public static SqlHavingCollection ExportSettings_UpdatedTimeMax(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[UpdatedTime])", name: "UpdatedTimeMax", value: value, _operator: _operator); }
        public static ExportSettingsHavingCollection UpdatedTimeMin(this ExportSettingsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[UpdatedTime])", name: "UpdatedTimeMin", value: value, _operator: _operator); }
        public static SqlHavingCollection ExportSettings_UpdatedTimeMin(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[UpdatedTime])", name: "UpdatedTimeMin", value: value, _operator: _operator); }
        public static ExportSettingsOrderByCollection ReferenceType(this ExportSettingsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[ReferenceType]"); }
        public static ExportSettingsOrderByCollection ReferenceId(this ExportSettingsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[ReferenceId]"); }
        public static ExportSettingsOrderByCollection Title(this ExportSettingsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Title]"); }
        public static ExportSettingsOrderByCollection ExportSettingId(this ExportSettingsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[ExportSettingId]"); }
        public static ExportSettingsOrderByCollection Ver(this ExportSettingsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Ver]"); }
        public static ExportSettingsOrderByCollection AddHeader(this ExportSettingsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[AddHeader]"); }
        public static ExportSettingsOrderByCollection ExportColumns(this ExportSettingsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[ExportColumns]"); }
        public static ExportSettingsOrderByCollection Comments(this ExportSettingsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Comments]"); }
        public static ExportSettingsOrderByCollection Creator(this ExportSettingsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Creator]"); }
        public static ExportSettingsOrderByCollection Updator(this ExportSettingsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Updator]"); }
        public static ExportSettingsOrderByCollection CreatedTime(this ExportSettingsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[CreatedTime]"); }
        public static ExportSettingsOrderByCollection UpdatedTime(this ExportSettingsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[UpdatedTime]"); }
        public static SqlOrderByCollection ExportSettings_ReferenceType(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[ReferenceType]"); }
        public static SqlOrderByCollection ExportSettings_ReferenceId(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[ReferenceId]"); }
        public static SqlOrderByCollection ExportSettings_Title(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Title]"); }
        public static SqlOrderByCollection ExportSettings_ExportSettingId(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[ExportSettingId]"); }
        public static SqlOrderByCollection ExportSettings_Ver(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Ver]"); }
        public static SqlOrderByCollection ExportSettings_AddHeader(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[AddHeader]"); }
        public static SqlOrderByCollection ExportSettings_ExportColumns(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[ExportColumns]"); }
        public static SqlOrderByCollection ExportSettings_Comments(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Comments]"); }
        public static SqlOrderByCollection ExportSettings_Creator(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Creator]"); }
        public static SqlOrderByCollection ExportSettings_Updator(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Updator]"); }
        public static SqlOrderByCollection ExportSettings_CreatedTime(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[CreatedTime]"); }
        public static SqlOrderByCollection ExportSettings_UpdatedTime(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[UpdatedTime]"); }
        public static ExportSettingsOrderByCollection ExportSettingsCount(this ExportSettingsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "count(*)"); }
        public static ExportSettingsOrderByCollection CreatedTimeMax(this ExportSettingsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[CreatedTime])"); }
        public static SqlOrderByCollection ExportSettings_CreatedTimeMax(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[CreatedTime])"); }
        public static ExportSettingsOrderByCollection CreatedTimeMin(this ExportSettingsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[CreatedTime])"); }
        public static SqlOrderByCollection ExportSettings_CreatedTimeMin(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[CreatedTime])"); }
        public static ExportSettingsOrderByCollection UpdatedTimeMax(this ExportSettingsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[UpdatedTime])"); }
        public static SqlOrderByCollection ExportSettings_UpdatedTimeMax(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[UpdatedTime])"); }
        public static ExportSettingsOrderByCollection UpdatedTimeMin(this ExportSettingsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[UpdatedTime])"); }
        public static SqlOrderByCollection ExportSettings_UpdatedTimeMin(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[UpdatedTime])"); }
        public static ExportSettingsParamCollection ReferenceType(this ExportSettingsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ReferenceType]", "ReferenceType", value, sub, raw, _using); }
        public static SqlParamCollection ExportSettings_ReferenceType(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ReferenceType]", "ReferenceType", value, sub, raw, _using); }
        public static ExportSettingsParamCollection ReferenceId(this ExportSettingsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ReferenceId]", "ReferenceId", value, sub, raw, _using); }
        public static SqlParamCollection ExportSettings_ReferenceId(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ReferenceId]", "ReferenceId", value, sub, raw, _using); }
        public static ExportSettingsParamCollection Title(this ExportSettingsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Title]", "Title", value, sub, raw, _using); }
        public static SqlParamCollection ExportSettings_Title(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Title]", "Title", value, sub, raw, _using); }
        public static ExportSettingsParamCollection ExportSettingId(this ExportSettingsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ExportSettingId]", "ExportSettingId", value, sub, raw, _using); }
        public static SqlParamCollection ExportSettings_ExportSettingId(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ExportSettingId]", "ExportSettingId", value, sub, raw, _using); }
        public static ExportSettingsParamCollection Ver(this ExportSettingsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Ver]", "Ver", value, sub, raw, _using); }
        public static SqlParamCollection ExportSettings_Ver(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Ver]", "Ver", value, sub, raw, _using); }
        public static ExportSettingsParamCollection AddHeader(this ExportSettingsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[AddHeader]", "AddHeader", value, sub, raw, _using); }
        public static SqlParamCollection ExportSettings_AddHeader(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[AddHeader]", "AddHeader", value, sub, raw, _using); }
        public static ExportSettingsParamCollection ExportColumns(this ExportSettingsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ExportColumns]", "ExportColumns", value, sub, raw, _using); }
        public static SqlParamCollection ExportSettings_ExportColumns(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ExportColumns]", "ExportColumns", value, sub, raw, _using); }
        public static ExportSettingsParamCollection Comments(this ExportSettingsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Comments]", "Comments", value, sub, raw, _using); }
        public static SqlParamCollection ExportSettings_Comments(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Comments]", "Comments", value, sub, raw, _using); }
        public static ExportSettingsParamCollection Creator(this ExportSettingsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Creator]", "Creator", value, sub, raw, _using); }
        public static SqlParamCollection ExportSettings_Creator(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Creator]", "Creator", value, sub, raw, _using); }
        public static ExportSettingsParamCollection Updator(this ExportSettingsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Updator]", "Updator", value, sub, raw, _using); }
        public static SqlParamCollection ExportSettings_Updator(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Updator]", "Updator", value, sub, raw, _using); }
        public static ExportSettingsParamCollection CreatedTime(this ExportSettingsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CreatedTime]", "CreatedTime", value, sub, raw, _using); }
        public static SqlParamCollection ExportSettings_CreatedTime(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CreatedTime]", "CreatedTime", value, sub, raw, _using); }
        public static ExportSettingsParamCollection UpdatedTime(this ExportSettingsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[UpdatedTime]", "UpdatedTime", value, sub, raw, _using); }
        public static SqlParamCollection ExportSettings_UpdatedTime(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[UpdatedTime]", "UpdatedTime", value, sub, raw, _using); }

        public static LinksColumnCollection LinksColumn()
        {
            return new LinksColumnCollection();
        }

        public class LinksColumnCollection : SqlColumnCollection
        {
            public LinksColumnCollection Add(params string[] columnBrackets)
            {
                base.Add(false, columnBrackets);
                return this;
            }

            public new LinksColumnCollection Add(bool duplicates = false, params string[] columnBrackets)
            {
                base.Add(duplicates, columnBrackets);
                return this;
            }
        }

        public static LinksJoinCollection LinksJoin()
        {
            return new LinksJoinCollection();
        }

        public class LinksJoinCollection : SqlJoinCollection
        {
            public new LinksJoinCollection Add(params string[] columnBrackets)
            {
                columnBrackets.ForEach(columnBracket => base.Add(new SqlJoin(columnBracket)));
                return this;
            }
        }

        public static LinksWhereCollection LinksWhere()
        {
            return new LinksWhereCollection();
        }

        public class LinksWhereCollection : SqlWhereCollection
        {
            public new LinksWhereCollection Add(
                string[] columnBrackets = null,
                string name = "",
                object value = null,
                string _operator = "=",
                string multiColumnOperator = " or ",
                string multiParamOperator = " and ",
                SqlStatement sub = null,
                string raw = "",
                SqlWhereCollection or = null,
                bool _using = true)
            {
                base.Add(new SqlWhere(
                    columnBrackets: columnBrackets,
                    name: name,
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    sub: sub,
                    raw: raw,
                    or: or,
                    _using: _using));
                return this;
            }
        }

        public static LinksGroupByCollection LinksGroupBy()
        {
            return new LinksGroupByCollection();
        }

        public class LinksGroupByCollection : SqlGroupByCollection
        {
            public new LinksGroupByCollection Add(
                params string[] columnBrackets)
            {
                columnBrackets.ForEach(columnBracket =>
                    base.Add(new SqlGroupBy(columnBracket)));
                return this;
            }
        }

        public static LinksHavingCollection LinksHaving()
        {
            return new LinksHavingCollection();
        }

        public class LinksHavingCollection : SqlHavingCollection
        {
            public LinksHavingCollection Add(
                string columnBracket, string name, object value, string _operator)
            {
                base.Add(new SqlHaving(
                    columnBracket: columnBracket,
                    name: name,
                    value: value,
                    _operator: _operator));
                return this;
            }
        }

        public static LinksOrderByCollection LinksOrderBy()
        {
            return new LinksOrderByCollection();
        }

        public class LinksOrderByCollection : SqlOrderByCollection
        {
            public new LinksOrderByCollection Add(
                SqlOrderBy.Types type = SqlOrderBy.Types.asc,
                params string[] columnBrackets)
            {
                columnBrackets.ForEach(columnBracket =>
                    base.Add(new SqlOrderBy(columnBracket, type)));
                return this;
            }
        }

        public static LinksParamCollection LinksParam()
        {
            return new LinksParamCollection();
        }

        public class LinksParamCollection : SqlParamCollection
        {
            public new LinksParamCollection Add(
                string columnBracket = "",
                string name = "",
                object value = null,
                SqlStatement sub = null,
                string raw = null,
                bool _using = true)
            {
                base.Add(new SqlParam(columnBracket, name, value, sub, raw, _using));
                return this;
            }
        }

        public const string SqlWhereExists_Links = "exists(select * from [Links] where #SqlWhere#)";
        public const string SqlWhereNotExists_Links = "not exists(select * from [Links] where #SqlWhere#)";
        public static LinksColumnCollection DestinationId(this LinksColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[DestinationId]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Links_DestinationId(this SqlColumnCollection self, string tableName = "Links", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[DestinationId]" + _as.ExistsTo(" as [{0}]")); }
        public static LinksColumnCollection SourceId(this LinksColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[SourceId]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Links_SourceId(this SqlColumnCollection self, string tableName = "Links", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[SourceId]" + _as.ExistsTo(" as [{0}]")); }
        public static LinksColumnCollection Ver(this LinksColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Ver]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Links_Ver(this SqlColumnCollection self, string tableName = "Links", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Ver]" + _as.ExistsTo(" as [{0}]")); }
        public static LinksColumnCollection ReferenceType(this LinksColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t1].[ReferenceType]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Links_ReferenceType(this SqlColumnCollection self, string tableName = "Links", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[ReferenceType]" + _as.ExistsTo(" as [{0}]")); }
        public static LinksColumnCollection SiteId(this LinksColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t1].[SiteId]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Links_SiteId(this SqlColumnCollection self, string tableName = "Links", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[SiteId]" + _as.ExistsTo(" as [{0}]")); }
        public static LinksColumnCollection Title(this LinksColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t1].[Title]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Links_Title(this SqlColumnCollection self, string tableName = "Links", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Title]" + _as.ExistsTo(" as [{0}]")); }
        public static LinksColumnCollection Subset(this LinksColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t1].[Subset]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Links_Subset(this SqlColumnCollection self, string tableName = "Links", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Subset]" + _as.ExistsTo(" as [{0}]")); }
        public static LinksColumnCollection Comments(this LinksColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Comments]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Links_Comments(this SqlColumnCollection self, string tableName = "Links", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Comments]" + _as.ExistsTo(" as [{0}]")); }
        public static LinksColumnCollection Creator(this LinksColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Creator]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Links_Creator(this SqlColumnCollection self, string tableName = "Links", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Creator]" + _as.ExistsTo(" as [{0}]")); }
        public static LinksColumnCollection Updator(this LinksColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Updator]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Links_Updator(this SqlColumnCollection self, string tableName = "Links", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Updator]" + _as.ExistsTo(" as [{0}]")); }
        public static LinksColumnCollection CreatedTime(this LinksColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[CreatedTime]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Links_CreatedTime(this SqlColumnCollection self, string tableName = "Links", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[CreatedTime]" + _as.ExistsTo(" as [{0}]")); }
        public static LinksColumnCollection UpdatedTime(this LinksColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[UpdatedTime]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Links_UpdatedTime(this SqlColumnCollection self, string tableName = "Links", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[UpdatedTime]" + _as.ExistsTo(" as [{0}]")); }
        public static LinksColumnCollection SiteTitle(this LinksColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "[t2].[Title] as [SiteTitle]"); }
        public static SqlColumnCollection Links_SiteTitle(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "[t2].[Title] as [SiteTitle]"); }
        public static LinksColumnCollection LinksCount(this LinksColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "count(*) as LinksCount"); }
        public static LinksColumnCollection CreatedTimeMax(this LinksColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[CreatedTime]) as [CreatedTimeMax]"); }
        public static SqlColumnCollection Links_CreatedTimeMax(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[CreatedTime]) as [CreatedTimeMax]"); }
        public static LinksColumnCollection CreatedTimeMin(this LinksColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[CreatedTime]) as [CreatedTimeMin]"); }
        public static SqlColumnCollection Links_CreatedTimeMin(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[CreatedTime]) as [CreatedTimeMin]"); }
        public static LinksColumnCollection UpdatedTimeMax(this LinksColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[UpdatedTime]) as [UpdatedTimeMax]"); }
        public static SqlColumnCollection Links_UpdatedTimeMax(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[UpdatedTime]) as [UpdatedTimeMax]"); }
        public static LinksColumnCollection UpdatedTimeMin(this LinksColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[UpdatedTime]) as [UpdatedTimeMin]"); }
        public static SqlColumnCollection Links_UpdatedTimeMin(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[UpdatedTime]) as [UpdatedTimeMin]"); }
        public static LinksWhereCollection DestinationId(this LinksWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[DestinationId]" }, "DestinationId", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Links_DestinationId(this SqlWhereCollection self, object value = null, string tableName = "Links", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[DestinationId]" }, "DestinationId", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static LinksWhereCollection SourceId(this LinksWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[SourceId]" }, "SourceId", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Links_SourceId(this SqlWhereCollection self, object value = null, string tableName = "Links", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[SourceId]" }, "SourceId", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static LinksWhereCollection Ver(this LinksWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Ver]" }, "Ver", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Links_Ver(this SqlWhereCollection self, object value = null, string tableName = "Links", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Ver]" }, "Ver", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static LinksWhereCollection ReferenceType(this LinksWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t1].[ReferenceType]" }, "ReferenceType", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Links_ReferenceType(this SqlWhereCollection self, object value = null, string tableName = "Links", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[ReferenceType]" }, "ReferenceType", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static LinksWhereCollection SiteId(this LinksWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t1].[SiteId]" }, "SiteId", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Links_SiteId(this SqlWhereCollection self, object value = null, string tableName = "Links", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[SiteId]" }, "SiteId", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static LinksWhereCollection Title(this LinksWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t1].[Title]" }, "Title", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Links_Title(this SqlWhereCollection self, object value = null, string tableName = "Links", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Title]" }, "Title", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static LinksWhereCollection Subset(this LinksWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t1].[Subset]" }, "Subset", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Links_Subset(this SqlWhereCollection self, object value = null, string tableName = "Links", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Subset]" }, "Subset", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static LinksWhereCollection Comments(this LinksWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Comments]" }, "Comments", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Links_Comments(this SqlWhereCollection self, object value = null, string tableName = "Links", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Comments]" }, "Comments", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static LinksWhereCollection Creator(this LinksWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Creator]" }, "Creator", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Links_Creator(this SqlWhereCollection self, object value = null, string tableName = "Links", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Creator]" }, "Creator", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static LinksWhereCollection Updator(this LinksWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Updator]" }, "Updator", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Links_Updator(this SqlWhereCollection self, object value = null, string tableName = "Links", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Updator]" }, "Updator", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static LinksWhereCollection CreatedTime(this LinksWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[CreatedTime]" }, "CreatedTime", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Links_CreatedTime(this SqlWhereCollection self, object value = null, string tableName = "Links", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[CreatedTime]" }, "CreatedTime", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static LinksWhereCollection UpdatedTime(this LinksWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[UpdatedTime]" }, "UpdatedTime", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Links_UpdatedTime(this SqlWhereCollection self, object value = null, string tableName = "Links", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[UpdatedTime]" }, "UpdatedTime", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static LinksWhereCollection SiteTitle(this LinksWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t2].[Title]" }, "SiteTitle", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Links_SiteTitle(this SqlWhereCollection self, object value = null, string tableName = "Links", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t2].[Title]" }, "SiteTitle", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static LinksWhereCollection DestinationId_In(this LinksWhereCollection self, IEnumerable<long> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[DestinationId]" }, "DestinationId", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Links_DestinationId_In(this SqlWhereCollection self, IEnumerable<long> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[DestinationId]" }, "DestinationId", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static LinksWhereCollection SourceId_In(this LinksWhereCollection self, IEnumerable<long> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[SourceId]" }, "SourceId", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Links_SourceId_In(this SqlWhereCollection self, IEnumerable<long> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[SourceId]" }, "SourceId", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static LinksWhereCollection Ver_In(this LinksWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Ver]" }, "Ver", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Links_Ver_In(this SqlWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Ver]" }, "Ver", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static LinksWhereCollection SiteId_In(this LinksWhereCollection self, IEnumerable<long> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t1].[SiteId]" }, "SiteId", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Links_SiteId_In(this SqlWhereCollection self, IEnumerable<long> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t1].[SiteId]" }, "SiteId", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static LinksWhereCollection Creator_In(this LinksWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Creator]" }, "Creator", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Links_Creator_In(this SqlWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Creator]" }, "Creator", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static LinksWhereCollection Updator_In(this LinksWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Updator]" }, "Updator", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Links_Updator_In(this SqlWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Updator]" }, "Updator", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static LinksWhereCollection DestinationId_Between(this LinksWhereCollection self, long begin, long end, bool _using = true) { return self.Add(new string[] { "[t0].[DestinationId]" }, "DestinationId", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Links_DestinationId_Between(this SqlWhereCollection self, long begin, long end, bool _using = true) { return self.Add(new string[] { "[t0].[DestinationId]" }, "DestinationId", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static LinksWhereCollection SourceId_Between(this LinksWhereCollection self, long begin, long end, bool _using = true) { return self.Add(new string[] { "[t0].[SourceId]" }, "SourceId", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Links_SourceId_Between(this SqlWhereCollection self, long begin, long end, bool _using = true) { return self.Add(new string[] { "[t0].[SourceId]" }, "SourceId", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static LinksWhereCollection Ver_Between(this LinksWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Ver]" }, "Ver", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Links_Ver_Between(this SqlWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Ver]" }, "Ver", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static LinksWhereCollection SiteId_Between(this LinksWhereCollection self, long begin, long end, bool _using = true) { return self.Add(new string[] { "[t1].[SiteId]" }, "SiteId", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Links_SiteId_Between(this SqlWhereCollection self, long begin, long end, bool _using = true) { return self.Add(new string[] { "[t1].[SiteId]" }, "SiteId", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static LinksWhereCollection Creator_Between(this LinksWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Creator]" }, "Creator", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Links_Creator_Between(this SqlWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Creator]" }, "Creator", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static LinksWhereCollection Updator_Between(this LinksWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Updator]" }, "Updator", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Links_Updator_Between(this SqlWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Updator]" }, "Updator", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static LinksWhereCollection CreatedTime_Between(this LinksWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[CreatedTime]" }, "CreatedTime", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Links_CreatedTime_Between(this SqlWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[CreatedTime]" }, "CreatedTime", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static LinksWhereCollection UpdatedTime_Between(this LinksWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[UpdatedTime]" }, "UpdatedTime", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Links_UpdatedTime_Between(this SqlWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[UpdatedTime]" }, "UpdatedTime", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static LinksWhereCollection Sub(this LinksWhereCollection self, SqlStatement sub, object value = null, string _operator = "=", bool _using = true) { return self.Add(null, null, value, _operator, sub: sub, _using: _using); }
        public static LinksWhereCollection Or(this LinksWhereCollection self, SqlWhereCollection or, bool _using = true) { return self.Add(null, null, or: or, _using: _using); }
        public static LinksGroupByCollection DestinationId(this LinksGroupByCollection self) { return self.Add("[t0].[DestinationId]"); }
        public static SqlGroupByCollection Links_DestinationId(this SqlGroupByCollection self) { return self.Add("[t0].[DestinationId]"); }
        public static LinksGroupByCollection SourceId(this LinksGroupByCollection self) { return self.Add("[t0].[SourceId]"); }
        public static SqlGroupByCollection Links_SourceId(this SqlGroupByCollection self) { return self.Add("[t0].[SourceId]"); }
        public static LinksGroupByCollection Ver(this LinksGroupByCollection self) { return self.Add("[t0].[Ver]"); }
        public static SqlGroupByCollection Links_Ver(this SqlGroupByCollection self) { return self.Add("[t0].[Ver]"); }
        public static LinksGroupByCollection ReferenceType(this LinksGroupByCollection self) { return self.Add("[t1].[ReferenceType]"); }
        public static SqlGroupByCollection Links_ReferenceType(this SqlGroupByCollection self) { return self.Add("[t1].[ReferenceType]"); }
        public static LinksGroupByCollection SiteId(this LinksGroupByCollection self) { return self.Add("[t1].[SiteId]"); }
        public static SqlGroupByCollection Links_SiteId(this SqlGroupByCollection self) { return self.Add("[t1].[SiteId]"); }
        public static LinksGroupByCollection Title(this LinksGroupByCollection self) { return self.Add("[t1].[Title]"); }
        public static SqlGroupByCollection Links_Title(this SqlGroupByCollection self) { return self.Add("[t1].[Title]"); }
        public static LinksGroupByCollection Subset(this LinksGroupByCollection self) { return self.Add("[t1].[Subset]"); }
        public static SqlGroupByCollection Links_Subset(this SqlGroupByCollection self) { return self.Add("[t1].[Subset]"); }
        public static LinksGroupByCollection SiteTitle(this LinksGroupByCollection self) { return self.Add("[t2].[Title]"); }
        public static SqlGroupByCollection Links_SiteTitle(this SqlGroupByCollection self) { return self.Add("[t2].[Title]"); }
        public static LinksGroupByCollection Comments(this LinksGroupByCollection self) { return self.Add("[t0].[Comments]"); }
        public static SqlGroupByCollection Links_Comments(this SqlGroupByCollection self) { return self.Add("[t0].[Comments]"); }
        public static LinksGroupByCollection Creator(this LinksGroupByCollection self) { return self.Add("[t0].[Creator]"); }
        public static SqlGroupByCollection Links_Creator(this SqlGroupByCollection self) { return self.Add("[t0].[Creator]"); }
        public static LinksGroupByCollection Updator(this LinksGroupByCollection self) { return self.Add("[t0].[Updator]"); }
        public static SqlGroupByCollection Links_Updator(this SqlGroupByCollection self) { return self.Add("[t0].[Updator]"); }
        public static LinksGroupByCollection CreatedTime(this LinksGroupByCollection self) { return self.Add("[t0].[CreatedTime]"); }
        public static SqlGroupByCollection Links_CreatedTime(this SqlGroupByCollection self) { return self.Add("[t0].[CreatedTime]"); }
        public static LinksGroupByCollection UpdatedTime(this LinksGroupByCollection self) { return self.Add("[t0].[UpdatedTime]"); }
        public static SqlGroupByCollection Links_UpdatedTime(this SqlGroupByCollection self) { return self.Add("[t0].[UpdatedTime]"); }
        public static LinksHavingCollection LinksCount(this LinksHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "count(*)", name: "LinksCount", value: value, _operator: _operator); }
        public static LinksHavingCollection CreatedTimeMax(this LinksHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[CreatedTime])", name: "CreatedTimeMax", value: value, _operator: _operator); }
        public static SqlHavingCollection Links_CreatedTimeMax(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[CreatedTime])", name: "CreatedTimeMax", value: value, _operator: _operator); }
        public static LinksHavingCollection CreatedTimeMin(this LinksHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[CreatedTime])", name: "CreatedTimeMin", value: value, _operator: _operator); }
        public static SqlHavingCollection Links_CreatedTimeMin(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[CreatedTime])", name: "CreatedTimeMin", value: value, _operator: _operator); }
        public static LinksHavingCollection UpdatedTimeMax(this LinksHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[UpdatedTime])", name: "UpdatedTimeMax", value: value, _operator: _operator); }
        public static SqlHavingCollection Links_UpdatedTimeMax(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[UpdatedTime])", name: "UpdatedTimeMax", value: value, _operator: _operator); }
        public static LinksHavingCollection UpdatedTimeMin(this LinksHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[UpdatedTime])", name: "UpdatedTimeMin", value: value, _operator: _operator); }
        public static SqlHavingCollection Links_UpdatedTimeMin(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[UpdatedTime])", name: "UpdatedTimeMin", value: value, _operator: _operator); }
        public static LinksOrderByCollection DestinationId(this LinksOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[DestinationId]"); }
        public static LinksOrderByCollection SourceId(this LinksOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[SourceId]"); }
        public static LinksOrderByCollection Ver(this LinksOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Ver]"); }
        public static LinksOrderByCollection ReferenceType(this LinksOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t1].[ReferenceType]"); }
        public static LinksOrderByCollection SiteId(this LinksOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t1].[SiteId]"); }
        public static LinksOrderByCollection Title(this LinksOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t1].[Title]"); }
        public static LinksOrderByCollection Subset(this LinksOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t1].[Subset]"); }
        public static LinksOrderByCollection SiteTitle(this LinksOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t2].[Title]"); }
        public static LinksOrderByCollection Comments(this LinksOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Comments]"); }
        public static LinksOrderByCollection Creator(this LinksOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Creator]"); }
        public static LinksOrderByCollection Updator(this LinksOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Updator]"); }
        public static LinksOrderByCollection CreatedTime(this LinksOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[CreatedTime]"); }
        public static LinksOrderByCollection UpdatedTime(this LinksOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[UpdatedTime]"); }
        public static SqlOrderByCollection Links_DestinationId(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[DestinationId]"); }
        public static SqlOrderByCollection Links_SourceId(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[SourceId]"); }
        public static SqlOrderByCollection Links_Ver(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Ver]"); }
        public static SqlOrderByCollection Links_ReferenceType(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[t1].[ReferenceType]"); }
        public static SqlOrderByCollection Links_SiteId(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[t1].[SiteId]"); }
        public static SqlOrderByCollection Links_Title(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[t1].[Title]"); }
        public static SqlOrderByCollection Links_Subset(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[t1].[Subset]"); }
        public static SqlOrderByCollection Links_SiteTitle(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[t2].[Title]"); }
        public static SqlOrderByCollection Links_Comments(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Comments]"); }
        public static SqlOrderByCollection Links_Creator(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Creator]"); }
        public static SqlOrderByCollection Links_Updator(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Updator]"); }
        public static SqlOrderByCollection Links_CreatedTime(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[CreatedTime]"); }
        public static SqlOrderByCollection Links_UpdatedTime(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[UpdatedTime]"); }
        public static LinksOrderByCollection LinksCount(this LinksOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "count(*)"); }
        public static LinksOrderByCollection CreatedTimeMax(this LinksOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[CreatedTime])"); }
        public static SqlOrderByCollection Links_CreatedTimeMax(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[CreatedTime])"); }
        public static LinksOrderByCollection CreatedTimeMin(this LinksOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[CreatedTime])"); }
        public static SqlOrderByCollection Links_CreatedTimeMin(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[CreatedTime])"); }
        public static LinksOrderByCollection UpdatedTimeMax(this LinksOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[UpdatedTime])"); }
        public static SqlOrderByCollection Links_UpdatedTimeMax(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[UpdatedTime])"); }
        public static LinksOrderByCollection UpdatedTimeMin(this LinksOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[UpdatedTime])"); }
        public static SqlOrderByCollection Links_UpdatedTimeMin(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[UpdatedTime])"); }
        public static LinksParamCollection DestinationId(this LinksParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DestinationId]", "DestinationId", value, sub, raw, _using); }
        public static SqlParamCollection Links_DestinationId(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DestinationId]", "DestinationId", value, sub, raw, _using); }
        public static LinksParamCollection SourceId(this LinksParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[SourceId]", "SourceId", value, sub, raw, _using); }
        public static SqlParamCollection Links_SourceId(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[SourceId]", "SourceId", value, sub, raw, _using); }
        public static LinksParamCollection Ver(this LinksParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Ver]", "Ver", value, sub, raw, _using); }
        public static SqlParamCollection Links_Ver(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Ver]", "Ver", value, sub, raw, _using); }
        public static LinksParamCollection Comments(this LinksParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Comments]", "Comments", value, sub, raw, _using); }
        public static SqlParamCollection Links_Comments(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Comments]", "Comments", value, sub, raw, _using); }
        public static LinksParamCollection Creator(this LinksParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Creator]", "Creator", value, sub, raw, _using); }
        public static SqlParamCollection Links_Creator(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Creator]", "Creator", value, sub, raw, _using); }
        public static LinksParamCollection Updator(this LinksParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Updator]", "Updator", value, sub, raw, _using); }
        public static SqlParamCollection Links_Updator(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Updator]", "Updator", value, sub, raw, _using); }
        public static LinksParamCollection CreatedTime(this LinksParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CreatedTime]", "CreatedTime", value, sub, raw, _using); }
        public static SqlParamCollection Links_CreatedTime(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CreatedTime]", "CreatedTime", value, sub, raw, _using); }
        public static LinksParamCollection UpdatedTime(this LinksParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[UpdatedTime]", "UpdatedTime", value, sub, raw, _using); }
        public static SqlParamCollection Links_UpdatedTime(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[UpdatedTime]", "UpdatedTime", value, sub, raw, _using); }

        public static BinariesColumnCollection BinariesColumn()
        {
            return new BinariesColumnCollection();
        }

        public class BinariesColumnCollection : SqlColumnCollection
        {
            public BinariesColumnCollection Add(params string[] columnBrackets)
            {
                base.Add(false, columnBrackets);
                return this;
            }

            public new BinariesColumnCollection Add(bool duplicates = false, params string[] columnBrackets)
            {
                base.Add(duplicates, columnBrackets);
                return this;
            }
        }

        public static BinariesJoinCollection BinariesJoin()
        {
            return new BinariesJoinCollection();
        }

        public class BinariesJoinCollection : SqlJoinCollection
        {
            public new BinariesJoinCollection Add(params string[] columnBrackets)
            {
                columnBrackets.ForEach(columnBracket => base.Add(new SqlJoin(columnBracket)));
                return this;
            }
        }

        public static BinariesWhereCollection BinariesWhere()
        {
            return new BinariesWhereCollection();
        }

        public class BinariesWhereCollection : SqlWhereCollection
        {
            public new BinariesWhereCollection Add(
                string[] columnBrackets = null,
                string name = "",
                object value = null,
                string _operator = "=",
                string multiColumnOperator = " or ",
                string multiParamOperator = " and ",
                SqlStatement sub = null,
                string raw = "",
                SqlWhereCollection or = null,
                bool _using = true)
            {
                base.Add(new SqlWhere(
                    columnBrackets: columnBrackets,
                    name: name,
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    sub: sub,
                    raw: raw,
                    or: or,
                    _using: _using));
                return this;
            }
        }

        public static BinariesGroupByCollection BinariesGroupBy()
        {
            return new BinariesGroupByCollection();
        }

        public class BinariesGroupByCollection : SqlGroupByCollection
        {
            public new BinariesGroupByCollection Add(
                params string[] columnBrackets)
            {
                columnBrackets.ForEach(columnBracket =>
                    base.Add(new SqlGroupBy(columnBracket)));
                return this;
            }
        }

        public static BinariesHavingCollection BinariesHaving()
        {
            return new BinariesHavingCollection();
        }

        public class BinariesHavingCollection : SqlHavingCollection
        {
            public BinariesHavingCollection Add(
                string columnBracket, string name, object value, string _operator)
            {
                base.Add(new SqlHaving(
                    columnBracket: columnBracket,
                    name: name,
                    value: value,
                    _operator: _operator));
                return this;
            }
        }

        public static BinariesOrderByCollection BinariesOrderBy()
        {
            return new BinariesOrderByCollection();
        }

        public class BinariesOrderByCollection : SqlOrderByCollection
        {
            public new BinariesOrderByCollection Add(
                SqlOrderBy.Types type = SqlOrderBy.Types.asc,
                params string[] columnBrackets)
            {
                columnBrackets.ForEach(columnBracket =>
                    base.Add(new SqlOrderBy(columnBracket, type)));
                return this;
            }
        }

        public static BinariesParamCollection BinariesParam()
        {
            return new BinariesParamCollection();
        }

        public class BinariesParamCollection : SqlParamCollection
        {
            public new BinariesParamCollection Add(
                string columnBracket = "",
                string name = "",
                object value = null,
                SqlStatement sub = null,
                string raw = null,
                bool _using = true)
            {
                base.Add(new SqlParam(columnBracket, name, value, sub, raw, _using));
                return this;
            }
        }

        public static string Binaries_Body_WhereLike(string tableName = "t0") { return "([" + tableName + "].[Body] like '%' + @SearchText#ParamCount#_#CommandCount# + '%')"; }
        public const string SqlWhereExists_Binaries = "exists(select * from [Binaries] where #SqlWhere#)";
        public const string SqlWhereNotExists_Binaries = "not exists(select * from [Binaries] where #SqlWhere#)";
        public static BinariesColumnCollection ReferenceId(this BinariesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[ReferenceId]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Binaries_ReferenceId(this SqlColumnCollection self, string tableName = "Binaries", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[ReferenceId]" + _as.ExistsTo(" as [{0}]")); }
        public static BinariesColumnCollection BinaryId(this BinariesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[BinaryId]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Binaries_BinaryId(this SqlColumnCollection self, string tableName = "Binaries", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[BinaryId]" + _as.ExistsTo(" as [{0}]")); }
        public static BinariesColumnCollection Ver(this BinariesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Ver]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Binaries_Ver(this SqlColumnCollection self, string tableName = "Binaries", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Ver]" + _as.ExistsTo(" as [{0}]")); }
        public static BinariesColumnCollection BinaryType(this BinariesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[BinaryType]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Binaries_BinaryType(this SqlColumnCollection self, string tableName = "Binaries", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[BinaryType]" + _as.ExistsTo(" as [{0}]")); }
        public static BinariesColumnCollection Title(this BinariesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Title]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Binaries_Title(this SqlColumnCollection self, string tableName = "Binaries", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Title]" + _as.ExistsTo(" as [{0}]")); }
        public static BinariesColumnCollection Body(this BinariesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Body]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Binaries_Body(this SqlColumnCollection self, string tableName = "Binaries", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Body]" + _as.ExistsTo(" as [{0}]")); }
        public static BinariesColumnCollection Bin(this BinariesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Bin]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Binaries_Bin(this SqlColumnCollection self, string tableName = "Binaries", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Bin]" + _as.ExistsTo(" as [{0}]")); }
        public static BinariesColumnCollection Thumbnail(this BinariesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Thumbnail]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Binaries_Thumbnail(this SqlColumnCollection self, string tableName = "Binaries", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Thumbnail]" + _as.ExistsTo(" as [{0}]")); }
        public static BinariesColumnCollection Icon(this BinariesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Icon]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Binaries_Icon(this SqlColumnCollection self, string tableName = "Binaries", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Icon]" + _as.ExistsTo(" as [{0}]")); }
        public static BinariesColumnCollection FileName(this BinariesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[FileName]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Binaries_FileName(this SqlColumnCollection self, string tableName = "Binaries", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[FileName]" + _as.ExistsTo(" as [{0}]")); }
        public static BinariesColumnCollection Extension(this BinariesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Extension]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Binaries_Extension(this SqlColumnCollection self, string tableName = "Binaries", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Extension]" + _as.ExistsTo(" as [{0}]")); }
        public static BinariesColumnCollection Size(this BinariesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Size]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Binaries_Size(this SqlColumnCollection self, string tableName = "Binaries", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Size]" + _as.ExistsTo(" as [{0}]")); }
        public static BinariesColumnCollection BinarySettings(this BinariesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[BinarySettings]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Binaries_BinarySettings(this SqlColumnCollection self, string tableName = "Binaries", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[BinarySettings]" + _as.ExistsTo(" as [{0}]")); }
        public static BinariesColumnCollection Comments(this BinariesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Comments]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Binaries_Comments(this SqlColumnCollection self, string tableName = "Binaries", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Comments]" + _as.ExistsTo(" as [{0}]")); }
        public static BinariesColumnCollection Creator(this BinariesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Creator]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Binaries_Creator(this SqlColumnCollection self, string tableName = "Binaries", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Creator]" + _as.ExistsTo(" as [{0}]")); }
        public static BinariesColumnCollection Updator(this BinariesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Updator]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Binaries_Updator(this SqlColumnCollection self, string tableName = "Binaries", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Updator]" + _as.ExistsTo(" as [{0}]")); }
        public static BinariesColumnCollection CreatedTime(this BinariesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[CreatedTime]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Binaries_CreatedTime(this SqlColumnCollection self, string tableName = "Binaries", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[CreatedTime]" + _as.ExistsTo(" as [{0}]")); }
        public static BinariesColumnCollection UpdatedTime(this BinariesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[UpdatedTime]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Binaries_UpdatedTime(this SqlColumnCollection self, string tableName = "Binaries", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[UpdatedTime]" + _as.ExistsTo(" as [{0}]")); }
        public static BinariesColumnCollection BinariesCount(this BinariesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "count(*) as BinariesCount"); }
        public static BinariesColumnCollection CreatedTimeMax(this BinariesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[CreatedTime]) as [CreatedTimeMax]"); }
        public static SqlColumnCollection Binaries_CreatedTimeMax(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[CreatedTime]) as [CreatedTimeMax]"); }
        public static BinariesColumnCollection CreatedTimeMin(this BinariesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[CreatedTime]) as [CreatedTimeMin]"); }
        public static SqlColumnCollection Binaries_CreatedTimeMin(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[CreatedTime]) as [CreatedTimeMin]"); }
        public static BinariesColumnCollection UpdatedTimeMax(this BinariesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[UpdatedTime]) as [UpdatedTimeMax]"); }
        public static SqlColumnCollection Binaries_UpdatedTimeMax(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[UpdatedTime]) as [UpdatedTimeMax]"); }
        public static BinariesColumnCollection UpdatedTimeMin(this BinariesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[UpdatedTime]) as [UpdatedTimeMin]"); }
        public static SqlColumnCollection Binaries_UpdatedTimeMin(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[UpdatedTime]) as [UpdatedTimeMin]"); }
        public static BinariesWhereCollection ReferenceId(this BinariesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[ReferenceId]" }, "ReferenceId", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Binaries_ReferenceId(this SqlWhereCollection self, object value = null, string tableName = "Binaries", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[ReferenceId]" }, "ReferenceId", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static BinariesWhereCollection BinaryId(this BinariesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[BinaryId]" }, "BinaryId", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Binaries_BinaryId(this SqlWhereCollection self, object value = null, string tableName = "Binaries", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[BinaryId]" }, "BinaryId", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static BinariesWhereCollection Ver(this BinariesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Ver]" }, "Ver", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Binaries_Ver(this SqlWhereCollection self, object value = null, string tableName = "Binaries", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Ver]" }, "Ver", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static BinariesWhereCollection BinaryType(this BinariesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[BinaryType]" }, "BinaryType", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Binaries_BinaryType(this SqlWhereCollection self, object value = null, string tableName = "Binaries", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[BinaryType]" }, "BinaryType", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static BinariesWhereCollection Title(this BinariesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Title]" }, "Title", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Binaries_Title(this SqlWhereCollection self, object value = null, string tableName = "Binaries", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Title]" }, "Title", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static BinariesWhereCollection Body(this BinariesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Body]" }, "Body", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Binaries_Body(this SqlWhereCollection self, object value = null, string tableName = "Binaries", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Body]" }, "Body", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static BinariesWhereCollection Bin(this BinariesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Bin]" }, "Bin", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Binaries_Bin(this SqlWhereCollection self, object value = null, string tableName = "Binaries", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Bin]" }, "Bin", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static BinariesWhereCollection Thumbnail(this BinariesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Thumbnail]" }, "Thumbnail", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Binaries_Thumbnail(this SqlWhereCollection self, object value = null, string tableName = "Binaries", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Thumbnail]" }, "Thumbnail", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static BinariesWhereCollection Icon(this BinariesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Icon]" }, "Icon", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Binaries_Icon(this SqlWhereCollection self, object value = null, string tableName = "Binaries", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Icon]" }, "Icon", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static BinariesWhereCollection FileName(this BinariesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[FileName]" }, "FileName", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Binaries_FileName(this SqlWhereCollection self, object value = null, string tableName = "Binaries", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[FileName]" }, "FileName", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static BinariesWhereCollection Extension(this BinariesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Extension]" }, "Extension", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Binaries_Extension(this SqlWhereCollection self, object value = null, string tableName = "Binaries", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Extension]" }, "Extension", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static BinariesWhereCollection Size(this BinariesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Size]" }, "Size", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Binaries_Size(this SqlWhereCollection self, object value = null, string tableName = "Binaries", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Size]" }, "Size", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static BinariesWhereCollection BinarySettings(this BinariesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[BinarySettings]" }, "BinarySettings", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Binaries_BinarySettings(this SqlWhereCollection self, object value = null, string tableName = "Binaries", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[BinarySettings]" }, "BinarySettings", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static BinariesWhereCollection Comments(this BinariesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Comments]" }, "Comments", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Binaries_Comments(this SqlWhereCollection self, object value = null, string tableName = "Binaries", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Comments]" }, "Comments", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static BinariesWhereCollection Creator(this BinariesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Creator]" }, "Creator", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Binaries_Creator(this SqlWhereCollection self, object value = null, string tableName = "Binaries", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Creator]" }, "Creator", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static BinariesWhereCollection Updator(this BinariesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Updator]" }, "Updator", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Binaries_Updator(this SqlWhereCollection self, object value = null, string tableName = "Binaries", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Updator]" }, "Updator", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static BinariesWhereCollection CreatedTime(this BinariesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[CreatedTime]" }, "CreatedTime", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Binaries_CreatedTime(this SqlWhereCollection self, object value = null, string tableName = "Binaries", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[CreatedTime]" }, "CreatedTime", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static BinariesWhereCollection UpdatedTime(this BinariesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[UpdatedTime]" }, "UpdatedTime", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Binaries_UpdatedTime(this SqlWhereCollection self, object value = null, string tableName = "Binaries", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[UpdatedTime]" }, "UpdatedTime", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static BinariesWhereCollection ReferenceId_In(this BinariesWhereCollection self, IEnumerable<long> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[ReferenceId]" }, "ReferenceId", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Binaries_ReferenceId_In(this SqlWhereCollection self, IEnumerable<long> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[ReferenceId]" }, "ReferenceId", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static BinariesWhereCollection BinaryId_In(this BinariesWhereCollection self, IEnumerable<long> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[BinaryId]" }, "BinaryId", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Binaries_BinaryId_In(this SqlWhereCollection self, IEnumerable<long> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[BinaryId]" }, "BinaryId", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static BinariesWhereCollection Ver_In(this BinariesWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Ver]" }, "Ver", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Binaries_Ver_In(this SqlWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Ver]" }, "Ver", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static BinariesWhereCollection Size_In(this BinariesWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Size]" }, "Size", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Binaries_Size_In(this SqlWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Size]" }, "Size", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static BinariesWhereCollection Creator_In(this BinariesWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Creator]" }, "Creator", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Binaries_Creator_In(this SqlWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Creator]" }, "Creator", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static BinariesWhereCollection Updator_In(this BinariesWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Updator]" }, "Updator", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Binaries_Updator_In(this SqlWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Updator]" }, "Updator", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static BinariesWhereCollection ReferenceId_Between(this BinariesWhereCollection self, long begin, long end, bool _using = true) { return self.Add(new string[] { "[t0].[ReferenceId]" }, "ReferenceId", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Binaries_ReferenceId_Between(this SqlWhereCollection self, long begin, long end, bool _using = true) { return self.Add(new string[] { "[t0].[ReferenceId]" }, "ReferenceId", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static BinariesWhereCollection BinaryId_Between(this BinariesWhereCollection self, long begin, long end, bool _using = true) { return self.Add(new string[] { "[t0].[BinaryId]" }, "BinaryId", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Binaries_BinaryId_Between(this SqlWhereCollection self, long begin, long end, bool _using = true) { return self.Add(new string[] { "[t0].[BinaryId]" }, "BinaryId", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static BinariesWhereCollection Ver_Between(this BinariesWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Ver]" }, "Ver", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Binaries_Ver_Between(this SqlWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Ver]" }, "Ver", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static BinariesWhereCollection Size_Between(this BinariesWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Size]" }, "Size", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Binaries_Size_Between(this SqlWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Size]" }, "Size", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static BinariesWhereCollection Creator_Between(this BinariesWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Creator]" }, "Creator", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Binaries_Creator_Between(this SqlWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Creator]" }, "Creator", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static BinariesWhereCollection Updator_Between(this BinariesWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Updator]" }, "Updator", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Binaries_Updator_Between(this SqlWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Updator]" }, "Updator", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static BinariesWhereCollection CreatedTime_Between(this BinariesWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[CreatedTime]" }, "CreatedTime", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Binaries_CreatedTime_Between(this SqlWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[CreatedTime]" }, "CreatedTime", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static BinariesWhereCollection UpdatedTime_Between(this BinariesWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[UpdatedTime]" }, "UpdatedTime", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Binaries_UpdatedTime_Between(this SqlWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[UpdatedTime]" }, "UpdatedTime", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static BinariesWhereCollection Sub(this BinariesWhereCollection self, SqlStatement sub, object value = null, string _operator = "=", bool _using = true) { return self.Add(null, null, value, _operator, sub: sub, _using: _using); }
        public static BinariesWhereCollection Or(this BinariesWhereCollection self, SqlWhereCollection or, bool _using = true) { return self.Add(null, null, or: or, _using: _using); }
        public static BinariesGroupByCollection ReferenceId(this BinariesGroupByCollection self) { return self.Add("[t0].[ReferenceId]"); }
        public static SqlGroupByCollection Binaries_ReferenceId(this SqlGroupByCollection self) { return self.Add("[t0].[ReferenceId]"); }
        public static BinariesGroupByCollection BinaryId(this BinariesGroupByCollection self) { return self.Add("[t0].[BinaryId]"); }
        public static SqlGroupByCollection Binaries_BinaryId(this SqlGroupByCollection self) { return self.Add("[t0].[BinaryId]"); }
        public static BinariesGroupByCollection Ver(this BinariesGroupByCollection self) { return self.Add("[t0].[Ver]"); }
        public static SqlGroupByCollection Binaries_Ver(this SqlGroupByCollection self) { return self.Add("[t0].[Ver]"); }
        public static BinariesGroupByCollection BinaryType(this BinariesGroupByCollection self) { return self.Add("[t0].[BinaryType]"); }
        public static SqlGroupByCollection Binaries_BinaryType(this SqlGroupByCollection self) { return self.Add("[t0].[BinaryType]"); }
        public static BinariesGroupByCollection Title(this BinariesGroupByCollection self) { return self.Add("[t0].[Title]"); }
        public static SqlGroupByCollection Binaries_Title(this SqlGroupByCollection self) { return self.Add("[t0].[Title]"); }
        public static BinariesGroupByCollection Body(this BinariesGroupByCollection self) { return self.Add("[t0].[Body]"); }
        public static SqlGroupByCollection Binaries_Body(this SqlGroupByCollection self) { return self.Add("[t0].[Body]"); }
        public static BinariesGroupByCollection Bin(this BinariesGroupByCollection self) { return self.Add("[t0].[Bin]"); }
        public static SqlGroupByCollection Binaries_Bin(this SqlGroupByCollection self) { return self.Add("[t0].[Bin]"); }
        public static BinariesGroupByCollection Thumbnail(this BinariesGroupByCollection self) { return self.Add("[t0].[Thumbnail]"); }
        public static SqlGroupByCollection Binaries_Thumbnail(this SqlGroupByCollection self) { return self.Add("[t0].[Thumbnail]"); }
        public static BinariesGroupByCollection Icon(this BinariesGroupByCollection self) { return self.Add("[t0].[Icon]"); }
        public static SqlGroupByCollection Binaries_Icon(this SqlGroupByCollection self) { return self.Add("[t0].[Icon]"); }
        public static BinariesGroupByCollection FileName(this BinariesGroupByCollection self) { return self.Add("[t0].[FileName]"); }
        public static SqlGroupByCollection Binaries_FileName(this SqlGroupByCollection self) { return self.Add("[t0].[FileName]"); }
        public static BinariesGroupByCollection Extension(this BinariesGroupByCollection self) { return self.Add("[t0].[Extension]"); }
        public static SqlGroupByCollection Binaries_Extension(this SqlGroupByCollection self) { return self.Add("[t0].[Extension]"); }
        public static BinariesGroupByCollection Size(this BinariesGroupByCollection self) { return self.Add("[t0].[Size]"); }
        public static SqlGroupByCollection Binaries_Size(this SqlGroupByCollection self) { return self.Add("[t0].[Size]"); }
        public static BinariesGroupByCollection BinarySettings(this BinariesGroupByCollection self) { return self.Add("[t0].[BinarySettings]"); }
        public static SqlGroupByCollection Binaries_BinarySettings(this SqlGroupByCollection self) { return self.Add("[t0].[BinarySettings]"); }
        public static BinariesGroupByCollection Comments(this BinariesGroupByCollection self) { return self.Add("[t0].[Comments]"); }
        public static SqlGroupByCollection Binaries_Comments(this SqlGroupByCollection self) { return self.Add("[t0].[Comments]"); }
        public static BinariesGroupByCollection Creator(this BinariesGroupByCollection self) { return self.Add("[t0].[Creator]"); }
        public static SqlGroupByCollection Binaries_Creator(this SqlGroupByCollection self) { return self.Add("[t0].[Creator]"); }
        public static BinariesGroupByCollection Updator(this BinariesGroupByCollection self) { return self.Add("[t0].[Updator]"); }
        public static SqlGroupByCollection Binaries_Updator(this SqlGroupByCollection self) { return self.Add("[t0].[Updator]"); }
        public static BinariesGroupByCollection CreatedTime(this BinariesGroupByCollection self) { return self.Add("[t0].[CreatedTime]"); }
        public static SqlGroupByCollection Binaries_CreatedTime(this SqlGroupByCollection self) { return self.Add("[t0].[CreatedTime]"); }
        public static BinariesGroupByCollection UpdatedTime(this BinariesGroupByCollection self) { return self.Add("[t0].[UpdatedTime]"); }
        public static SqlGroupByCollection Binaries_UpdatedTime(this SqlGroupByCollection self) { return self.Add("[t0].[UpdatedTime]"); }
        public static BinariesHavingCollection BinariesCount(this BinariesHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "count(*)", name: "BinariesCount", value: value, _operator: _operator); }
        public static BinariesHavingCollection CreatedTimeMax(this BinariesHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[CreatedTime])", name: "CreatedTimeMax", value: value, _operator: _operator); }
        public static SqlHavingCollection Binaries_CreatedTimeMax(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[CreatedTime])", name: "CreatedTimeMax", value: value, _operator: _operator); }
        public static BinariesHavingCollection CreatedTimeMin(this BinariesHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[CreatedTime])", name: "CreatedTimeMin", value: value, _operator: _operator); }
        public static SqlHavingCollection Binaries_CreatedTimeMin(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[CreatedTime])", name: "CreatedTimeMin", value: value, _operator: _operator); }
        public static BinariesHavingCollection UpdatedTimeMax(this BinariesHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[UpdatedTime])", name: "UpdatedTimeMax", value: value, _operator: _operator); }
        public static SqlHavingCollection Binaries_UpdatedTimeMax(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[UpdatedTime])", name: "UpdatedTimeMax", value: value, _operator: _operator); }
        public static BinariesHavingCollection UpdatedTimeMin(this BinariesHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[UpdatedTime])", name: "UpdatedTimeMin", value: value, _operator: _operator); }
        public static SqlHavingCollection Binaries_UpdatedTimeMin(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[UpdatedTime])", name: "UpdatedTimeMin", value: value, _operator: _operator); }
        public static BinariesOrderByCollection ReferenceId(this BinariesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[ReferenceId]"); }
        public static BinariesOrderByCollection BinaryId(this BinariesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[BinaryId]"); }
        public static BinariesOrderByCollection Ver(this BinariesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Ver]"); }
        public static BinariesOrderByCollection BinaryType(this BinariesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[BinaryType]"); }
        public static BinariesOrderByCollection Title(this BinariesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Title]"); }
        public static BinariesOrderByCollection Body(this BinariesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Body]"); }
        public static BinariesOrderByCollection Bin(this BinariesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Bin]"); }
        public static BinariesOrderByCollection Thumbnail(this BinariesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Thumbnail]"); }
        public static BinariesOrderByCollection Icon(this BinariesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Icon]"); }
        public static BinariesOrderByCollection FileName(this BinariesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[FileName]"); }
        public static BinariesOrderByCollection Extension(this BinariesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Extension]"); }
        public static BinariesOrderByCollection Size(this BinariesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Size]"); }
        public static BinariesOrderByCollection BinarySettings(this BinariesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[BinarySettings]"); }
        public static BinariesOrderByCollection Comments(this BinariesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Comments]"); }
        public static BinariesOrderByCollection Creator(this BinariesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Creator]"); }
        public static BinariesOrderByCollection Updator(this BinariesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Updator]"); }
        public static BinariesOrderByCollection CreatedTime(this BinariesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[CreatedTime]"); }
        public static BinariesOrderByCollection UpdatedTime(this BinariesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[UpdatedTime]"); }
        public static SqlOrderByCollection Binaries_ReferenceId(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[ReferenceId]"); }
        public static SqlOrderByCollection Binaries_BinaryId(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[BinaryId]"); }
        public static SqlOrderByCollection Binaries_Ver(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Ver]"); }
        public static SqlOrderByCollection Binaries_BinaryType(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[BinaryType]"); }
        public static SqlOrderByCollection Binaries_Title(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Title]"); }
        public static SqlOrderByCollection Binaries_Body(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Body]"); }
        public static SqlOrderByCollection Binaries_Bin(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Bin]"); }
        public static SqlOrderByCollection Binaries_Thumbnail(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Thumbnail]"); }
        public static SqlOrderByCollection Binaries_Icon(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Icon]"); }
        public static SqlOrderByCollection Binaries_FileName(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[FileName]"); }
        public static SqlOrderByCollection Binaries_Extension(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Extension]"); }
        public static SqlOrderByCollection Binaries_Size(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Size]"); }
        public static SqlOrderByCollection Binaries_BinarySettings(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[BinarySettings]"); }
        public static SqlOrderByCollection Binaries_Comments(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Comments]"); }
        public static SqlOrderByCollection Binaries_Creator(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Creator]"); }
        public static SqlOrderByCollection Binaries_Updator(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Updator]"); }
        public static SqlOrderByCollection Binaries_CreatedTime(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[CreatedTime]"); }
        public static SqlOrderByCollection Binaries_UpdatedTime(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[UpdatedTime]"); }
        public static BinariesOrderByCollection BinariesCount(this BinariesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "count(*)"); }
        public static BinariesOrderByCollection CreatedTimeMax(this BinariesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[CreatedTime])"); }
        public static SqlOrderByCollection Binaries_CreatedTimeMax(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[CreatedTime])"); }
        public static BinariesOrderByCollection CreatedTimeMin(this BinariesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[CreatedTime])"); }
        public static SqlOrderByCollection Binaries_CreatedTimeMin(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[CreatedTime])"); }
        public static BinariesOrderByCollection UpdatedTimeMax(this BinariesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[UpdatedTime])"); }
        public static SqlOrderByCollection Binaries_UpdatedTimeMax(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[UpdatedTime])"); }
        public static BinariesOrderByCollection UpdatedTimeMin(this BinariesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[UpdatedTime])"); }
        public static SqlOrderByCollection Binaries_UpdatedTimeMin(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[UpdatedTime])"); }
        public static BinariesParamCollection ReferenceId(this BinariesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ReferenceId]", "ReferenceId", value, sub, raw, _using); }
        public static SqlParamCollection Binaries_ReferenceId(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ReferenceId]", "ReferenceId", value, sub, raw, _using); }
        public static BinariesParamCollection BinaryId(this BinariesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[BinaryId]", "BinaryId", value, sub, raw, _using); }
        public static SqlParamCollection Binaries_BinaryId(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[BinaryId]", "BinaryId", value, sub, raw, _using); }
        public static BinariesParamCollection Ver(this BinariesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Ver]", "Ver", value, sub, raw, _using); }
        public static SqlParamCollection Binaries_Ver(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Ver]", "Ver", value, sub, raw, _using); }
        public static BinariesParamCollection BinaryType(this BinariesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[BinaryType]", "BinaryType", value, sub, raw, _using); }
        public static SqlParamCollection Binaries_BinaryType(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[BinaryType]", "BinaryType", value, sub, raw, _using); }
        public static BinariesParamCollection Title(this BinariesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Title]", "Title", value, sub, raw, _using); }
        public static SqlParamCollection Binaries_Title(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Title]", "Title", value, sub, raw, _using); }
        public static BinariesParamCollection Body(this BinariesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Body]", "Body", value, sub, raw, _using); }
        public static SqlParamCollection Binaries_Body(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Body]", "Body", value, sub, raw, _using); }
        public static BinariesParamCollection Bin(this BinariesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Bin]", "Bin", value, sub, raw, _using); }
        public static SqlParamCollection Binaries_Bin(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Bin]", "Bin", value, sub, raw, _using); }
        public static BinariesParamCollection Thumbnail(this BinariesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Thumbnail]", "Thumbnail", value, sub, raw, _using); }
        public static SqlParamCollection Binaries_Thumbnail(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Thumbnail]", "Thumbnail", value, sub, raw, _using); }
        public static BinariesParamCollection Icon(this BinariesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Icon]", "Icon", value, sub, raw, _using); }
        public static SqlParamCollection Binaries_Icon(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Icon]", "Icon", value, sub, raw, _using); }
        public static BinariesParamCollection FileName(this BinariesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[FileName]", "FileName", value, sub, raw, _using); }
        public static SqlParamCollection Binaries_FileName(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[FileName]", "FileName", value, sub, raw, _using); }
        public static BinariesParamCollection Extension(this BinariesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Extension]", "Extension", value, sub, raw, _using); }
        public static SqlParamCollection Binaries_Extension(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Extension]", "Extension", value, sub, raw, _using); }
        public static BinariesParamCollection Size(this BinariesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Size]", "Size", value, sub, raw, _using); }
        public static SqlParamCollection Binaries_Size(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Size]", "Size", value, sub, raw, _using); }
        public static BinariesParamCollection BinarySettings(this BinariesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[BinarySettings]", "BinarySettings", value, sub, raw, _using); }
        public static SqlParamCollection Binaries_BinarySettings(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[BinarySettings]", "BinarySettings", value, sub, raw, _using); }
        public static BinariesParamCollection Comments(this BinariesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Comments]", "Comments", value, sub, raw, _using); }
        public static SqlParamCollection Binaries_Comments(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Comments]", "Comments", value, sub, raw, _using); }
        public static BinariesParamCollection Creator(this BinariesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Creator]", "Creator", value, sub, raw, _using); }
        public static SqlParamCollection Binaries_Creator(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Creator]", "Creator", value, sub, raw, _using); }
        public static BinariesParamCollection Updator(this BinariesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Updator]", "Updator", value, sub, raw, _using); }
        public static SqlParamCollection Binaries_Updator(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Updator]", "Updator", value, sub, raw, _using); }
        public static BinariesParamCollection CreatedTime(this BinariesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CreatedTime]", "CreatedTime", value, sub, raw, _using); }
        public static SqlParamCollection Binaries_CreatedTime(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CreatedTime]", "CreatedTime", value, sub, raw, _using); }
        public static BinariesParamCollection UpdatedTime(this BinariesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[UpdatedTime]", "UpdatedTime", value, sub, raw, _using); }
        public static SqlParamCollection Binaries_UpdatedTime(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[UpdatedTime]", "UpdatedTime", value, sub, raw, _using); }

        public static IssuesColumnCollection IssuesColumn()
        {
            return new IssuesColumnCollection();
        }

        public class IssuesColumnCollection : SqlColumnCollection
        {
            public IssuesColumnCollection Add(params string[] columnBrackets)
            {
                base.Add(false, columnBrackets);
                return this;
            }

            public new IssuesColumnCollection Add(bool duplicates = false, params string[] columnBrackets)
            {
                base.Add(duplicates, columnBrackets);
                return this;
            }
        }

        public static IssuesJoinCollection IssuesJoin()
        {
            return new IssuesJoinCollection();
        }

        public class IssuesJoinCollection : SqlJoinCollection
        {
            public new IssuesJoinCollection Add(params string[] columnBrackets)
            {
                columnBrackets.ForEach(columnBracket => base.Add(new SqlJoin(columnBracket)));
                return this;
            }
        }

        public static IssuesWhereCollection IssuesWhere()
        {
            return new IssuesWhereCollection();
        }

        public class IssuesWhereCollection : SqlWhereCollection
        {
            public new IssuesWhereCollection Add(
                string[] columnBrackets = null,
                string name = "",
                object value = null,
                string _operator = "=",
                string multiColumnOperator = " or ",
                string multiParamOperator = " and ",
                SqlStatement sub = null,
                string raw = "",
                SqlWhereCollection or = null,
                bool _using = true)
            {
                base.Add(new SqlWhere(
                    columnBrackets: columnBrackets,
                    name: name,
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    sub: sub,
                    raw: raw,
                    or: or,
                    _using: _using));
                return this;
            }
        }

        public static IssuesGroupByCollection IssuesGroupBy()
        {
            return new IssuesGroupByCollection();
        }

        public class IssuesGroupByCollection : SqlGroupByCollection
        {
            public new IssuesGroupByCollection Add(
                params string[] columnBrackets)
            {
                columnBrackets.ForEach(columnBracket =>
                    base.Add(new SqlGroupBy(columnBracket)));
                return this;
            }
        }

        public static IssuesHavingCollection IssuesHaving()
        {
            return new IssuesHavingCollection();
        }

        public class IssuesHavingCollection : SqlHavingCollection
        {
            public IssuesHavingCollection Add(
                string columnBracket, string name, object value, string _operator)
            {
                base.Add(new SqlHaving(
                    columnBracket: columnBracket,
                    name: name,
                    value: value,
                    _operator: _operator));
                return this;
            }
        }

        public static IssuesOrderByCollection IssuesOrderBy()
        {
            return new IssuesOrderByCollection();
        }

        public class IssuesOrderByCollection : SqlOrderByCollection
        {
            public new IssuesOrderByCollection Add(
                SqlOrderBy.Types type = SqlOrderBy.Types.asc,
                params string[] columnBrackets)
            {
                columnBrackets.ForEach(columnBracket =>
                    base.Add(new SqlOrderBy(columnBracket, type)));
                return this;
            }
        }

        public static IssuesParamCollection IssuesParam()
        {
            return new IssuesParamCollection();
        }

        public class IssuesParamCollection : SqlParamCollection
        {
            public new IssuesParamCollection Add(
                string columnBracket = "",
                string name = "",
                object value = null,
                SqlStatement sub = null,
                string raw = null,
                bool _using = true)
            {
                base.Add(new SqlParam(columnBracket, name, value, sub, raw, _using));
                return this;
            }
        }

        public static string Issues_Title_WhereLike(string tableName = "t0") { return "([" + tableName + "].[Title] like '%' + @SearchText#ParamCount#_#CommandCount# + '%')"; }
        public static string Issues_Body_WhereLike(string tableName = "t0") { return "([" + tableName + "].[Body] like '%' + @SearchText#ParamCount#_#CommandCount# + '%')"; }
        public static string Issues_DescriptionA_WhereLike(string tableName = "t0") { return "([" + tableName + "].[DescriptionA] like '%' + @SearchText#ParamCount#_#CommandCount# + '%')"; }
        public static string Issues_DescriptionB_WhereLike(string tableName = "t0") { return "([" + tableName + "].[DescriptionB] like '%' + @SearchText#ParamCount#_#CommandCount# + '%')"; }
        public static string Issues_DescriptionC_WhereLike(string tableName = "t0") { return "([" + tableName + "].[DescriptionC] like '%' + @SearchText#ParamCount#_#CommandCount# + '%')"; }
        public static string Issues_DescriptionD_WhereLike(string tableName = "t0") { return "([" + tableName + "].[DescriptionD] like '%' + @SearchText#ParamCount#_#CommandCount# + '%')"; }
        public static string Issues_DescriptionE_WhereLike(string tableName = "t0") { return "([" + tableName + "].[DescriptionE] like '%' + @SearchText#ParamCount#_#CommandCount# + '%')"; }
        public static string Issues_DescriptionF_WhereLike(string tableName = "t0") { return "([" + tableName + "].[DescriptionF] like '%' + @SearchText#ParamCount#_#CommandCount# + '%')"; }
        public static string Issues_DescriptionG_WhereLike(string tableName = "t0") { return "([" + tableName + "].[DescriptionG] like '%' + @SearchText#ParamCount#_#CommandCount# + '%')"; }
        public static string Issues_DescriptionH_WhereLike(string tableName = "t0") { return "([" + tableName + "].[DescriptionH] like '%' + @SearchText#ParamCount#_#CommandCount# + '%')"; }
        public static string Issues_DescriptionI_WhereLike(string tableName = "t0") { return "([" + tableName + "].[DescriptionI] like '%' + @SearchText#ParamCount#_#CommandCount# + '%')"; }
        public static string Issues_DescriptionJ_WhereLike(string tableName = "t0") { return "([" + tableName + "].[DescriptionJ] like '%' + @SearchText#ParamCount#_#CommandCount# + '%')"; }
        public static string Issues_DescriptionK_WhereLike(string tableName = "t0") { return "([" + tableName + "].[DescriptionK] like '%' + @SearchText#ParamCount#_#CommandCount# + '%')"; }
        public static string Issues_DescriptionL_WhereLike(string tableName = "t0") { return "([" + tableName + "].[DescriptionL] like '%' + @SearchText#ParamCount#_#CommandCount# + '%')"; }
        public static string Issues_DescriptionM_WhereLike(string tableName = "t0") { return "([" + tableName + "].[DescriptionM] like '%' + @SearchText#ParamCount#_#CommandCount# + '%')"; }
        public static string Issues_DescriptionN_WhereLike(string tableName = "t0") { return "([" + tableName + "].[DescriptionN] like '%' + @SearchText#ParamCount#_#CommandCount# + '%')"; }
        public static string Issues_DescriptionO_WhereLike(string tableName = "t0") { return "([" + tableName + "].[DescriptionO] like '%' + @SearchText#ParamCount#_#CommandCount# + '%')"; }
        public static string Issues_DescriptionP_WhereLike(string tableName = "t0") { return "([" + tableName + "].[DescriptionP] like '%' + @SearchText#ParamCount#_#CommandCount# + '%')"; }
        public const string SqlWhereExists_Issues = "exists(select * from [Issues] where #SqlWhere#)";
        public const string SqlWhereNotExists_Issues = "not exists(select * from [Issues] where #SqlWhere#)";
        public static IssuesColumnCollection SiteId(this IssuesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[SiteId]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Issues_SiteId(this SqlColumnCollection self, string tableName = "Issues", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[SiteId]" + _as.ExistsTo(" as [{0}]")); }
        public static IssuesColumnCollection UpdatedTime(this IssuesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[UpdatedTime]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Issues_UpdatedTime(this SqlColumnCollection self, string tableName = "Issues", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[UpdatedTime]" + _as.ExistsTo(" as [{0}]")); }
        public static IssuesColumnCollection IssueId(this IssuesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[IssueId]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Issues_IssueId(this SqlColumnCollection self, string tableName = "Issues", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[IssueId]" + _as.ExistsTo(" as [{0}]")); }
        public static IssuesColumnCollection Ver(this IssuesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Ver]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Issues_Ver(this SqlColumnCollection self, string tableName = "Issues", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Ver]" + _as.ExistsTo(" as [{0}]")); }
        public static IssuesColumnCollection Title(this IssuesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Title]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Issues_Title(this SqlColumnCollection self, string tableName = "Issues", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Title]" + _as.ExistsTo(" as [{0}]")); }
        public static IssuesColumnCollection Body(this IssuesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Body]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Issues_Body(this SqlColumnCollection self, string tableName = "Issues", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Body]" + _as.ExistsTo(" as [{0}]")); }
        public static IssuesColumnCollection StartTime(this IssuesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[StartTime]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Issues_StartTime(this SqlColumnCollection self, string tableName = "Issues", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[StartTime]" + _as.ExistsTo(" as [{0}]")); }
        public static IssuesColumnCollection Status(this IssuesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Status]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Issues_Status(this SqlColumnCollection self, string tableName = "Issues", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Status]" + _as.ExistsTo(" as [{0}]")); }
        public static IssuesColumnCollection Manager(this IssuesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Manager]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Issues_Manager(this SqlColumnCollection self, string tableName = "Issues", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Manager]" + _as.ExistsTo(" as [{0}]")); }
        public static IssuesColumnCollection Owner(this IssuesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Owner]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Issues_Owner(this SqlColumnCollection self, string tableName = "Issues", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Owner]" + _as.ExistsTo(" as [{0}]")); }
        public static IssuesColumnCollection ClassA(this IssuesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[ClassA]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Issues_ClassA(this SqlColumnCollection self, string tableName = "Issues", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[ClassA]" + _as.ExistsTo(" as [{0}]")); }
        public static IssuesColumnCollection ClassB(this IssuesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[ClassB]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Issues_ClassB(this SqlColumnCollection self, string tableName = "Issues", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[ClassB]" + _as.ExistsTo(" as [{0}]")); }
        public static IssuesColumnCollection ClassC(this IssuesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[ClassC]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Issues_ClassC(this SqlColumnCollection self, string tableName = "Issues", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[ClassC]" + _as.ExistsTo(" as [{0}]")); }
        public static IssuesColumnCollection ClassD(this IssuesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[ClassD]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Issues_ClassD(this SqlColumnCollection self, string tableName = "Issues", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[ClassD]" + _as.ExistsTo(" as [{0}]")); }
        public static IssuesColumnCollection ClassE(this IssuesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[ClassE]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Issues_ClassE(this SqlColumnCollection self, string tableName = "Issues", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[ClassE]" + _as.ExistsTo(" as [{0}]")); }
        public static IssuesColumnCollection ClassF(this IssuesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[ClassF]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Issues_ClassF(this SqlColumnCollection self, string tableName = "Issues", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[ClassF]" + _as.ExistsTo(" as [{0}]")); }
        public static IssuesColumnCollection ClassG(this IssuesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[ClassG]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Issues_ClassG(this SqlColumnCollection self, string tableName = "Issues", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[ClassG]" + _as.ExistsTo(" as [{0}]")); }
        public static IssuesColumnCollection ClassH(this IssuesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[ClassH]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Issues_ClassH(this SqlColumnCollection self, string tableName = "Issues", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[ClassH]" + _as.ExistsTo(" as [{0}]")); }
        public static IssuesColumnCollection ClassI(this IssuesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[ClassI]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Issues_ClassI(this SqlColumnCollection self, string tableName = "Issues", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[ClassI]" + _as.ExistsTo(" as [{0}]")); }
        public static IssuesColumnCollection ClassJ(this IssuesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[ClassJ]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Issues_ClassJ(this SqlColumnCollection self, string tableName = "Issues", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[ClassJ]" + _as.ExistsTo(" as [{0}]")); }
        public static IssuesColumnCollection ClassK(this IssuesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[ClassK]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Issues_ClassK(this SqlColumnCollection self, string tableName = "Issues", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[ClassK]" + _as.ExistsTo(" as [{0}]")); }
        public static IssuesColumnCollection ClassL(this IssuesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[ClassL]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Issues_ClassL(this SqlColumnCollection self, string tableName = "Issues", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[ClassL]" + _as.ExistsTo(" as [{0}]")); }
        public static IssuesColumnCollection ClassM(this IssuesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[ClassM]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Issues_ClassM(this SqlColumnCollection self, string tableName = "Issues", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[ClassM]" + _as.ExistsTo(" as [{0}]")); }
        public static IssuesColumnCollection ClassN(this IssuesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[ClassN]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Issues_ClassN(this SqlColumnCollection self, string tableName = "Issues", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[ClassN]" + _as.ExistsTo(" as [{0}]")); }
        public static IssuesColumnCollection ClassO(this IssuesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[ClassO]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Issues_ClassO(this SqlColumnCollection self, string tableName = "Issues", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[ClassO]" + _as.ExistsTo(" as [{0}]")); }
        public static IssuesColumnCollection ClassP(this IssuesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[ClassP]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Issues_ClassP(this SqlColumnCollection self, string tableName = "Issues", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[ClassP]" + _as.ExistsTo(" as [{0}]")); }
        public static IssuesColumnCollection NumA(this IssuesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[NumA]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Issues_NumA(this SqlColumnCollection self, string tableName = "Issues", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[NumA]" + _as.ExistsTo(" as [{0}]")); }
        public static IssuesColumnCollection NumB(this IssuesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[NumB]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Issues_NumB(this SqlColumnCollection self, string tableName = "Issues", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[NumB]" + _as.ExistsTo(" as [{0}]")); }
        public static IssuesColumnCollection NumC(this IssuesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[NumC]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Issues_NumC(this SqlColumnCollection self, string tableName = "Issues", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[NumC]" + _as.ExistsTo(" as [{0}]")); }
        public static IssuesColumnCollection NumD(this IssuesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[NumD]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Issues_NumD(this SqlColumnCollection self, string tableName = "Issues", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[NumD]" + _as.ExistsTo(" as [{0}]")); }
        public static IssuesColumnCollection NumE(this IssuesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[NumE]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Issues_NumE(this SqlColumnCollection self, string tableName = "Issues", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[NumE]" + _as.ExistsTo(" as [{0}]")); }
        public static IssuesColumnCollection NumF(this IssuesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[NumF]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Issues_NumF(this SqlColumnCollection self, string tableName = "Issues", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[NumF]" + _as.ExistsTo(" as [{0}]")); }
        public static IssuesColumnCollection NumG(this IssuesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[NumG]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Issues_NumG(this SqlColumnCollection self, string tableName = "Issues", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[NumG]" + _as.ExistsTo(" as [{0}]")); }
        public static IssuesColumnCollection NumH(this IssuesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[NumH]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Issues_NumH(this SqlColumnCollection self, string tableName = "Issues", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[NumH]" + _as.ExistsTo(" as [{0}]")); }
        public static IssuesColumnCollection NumI(this IssuesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[NumI]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Issues_NumI(this SqlColumnCollection self, string tableName = "Issues", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[NumI]" + _as.ExistsTo(" as [{0}]")); }
        public static IssuesColumnCollection NumJ(this IssuesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[NumJ]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Issues_NumJ(this SqlColumnCollection self, string tableName = "Issues", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[NumJ]" + _as.ExistsTo(" as [{0}]")); }
        public static IssuesColumnCollection NumK(this IssuesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[NumK]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Issues_NumK(this SqlColumnCollection self, string tableName = "Issues", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[NumK]" + _as.ExistsTo(" as [{0}]")); }
        public static IssuesColumnCollection NumL(this IssuesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[NumL]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Issues_NumL(this SqlColumnCollection self, string tableName = "Issues", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[NumL]" + _as.ExistsTo(" as [{0}]")); }
        public static IssuesColumnCollection NumM(this IssuesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[NumM]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Issues_NumM(this SqlColumnCollection self, string tableName = "Issues", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[NumM]" + _as.ExistsTo(" as [{0}]")); }
        public static IssuesColumnCollection NumN(this IssuesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[NumN]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Issues_NumN(this SqlColumnCollection self, string tableName = "Issues", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[NumN]" + _as.ExistsTo(" as [{0}]")); }
        public static IssuesColumnCollection NumO(this IssuesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[NumO]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Issues_NumO(this SqlColumnCollection self, string tableName = "Issues", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[NumO]" + _as.ExistsTo(" as [{0}]")); }
        public static IssuesColumnCollection NumP(this IssuesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[NumP]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Issues_NumP(this SqlColumnCollection self, string tableName = "Issues", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[NumP]" + _as.ExistsTo(" as [{0}]")); }
        public static IssuesColumnCollection DateA(this IssuesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[DateA]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Issues_DateA(this SqlColumnCollection self, string tableName = "Issues", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[DateA]" + _as.ExistsTo(" as [{0}]")); }
        public static IssuesColumnCollection DateB(this IssuesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[DateB]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Issues_DateB(this SqlColumnCollection self, string tableName = "Issues", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[DateB]" + _as.ExistsTo(" as [{0}]")); }
        public static IssuesColumnCollection DateC(this IssuesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[DateC]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Issues_DateC(this SqlColumnCollection self, string tableName = "Issues", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[DateC]" + _as.ExistsTo(" as [{0}]")); }
        public static IssuesColumnCollection DateD(this IssuesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[DateD]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Issues_DateD(this SqlColumnCollection self, string tableName = "Issues", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[DateD]" + _as.ExistsTo(" as [{0}]")); }
        public static IssuesColumnCollection DateE(this IssuesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[DateE]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Issues_DateE(this SqlColumnCollection self, string tableName = "Issues", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[DateE]" + _as.ExistsTo(" as [{0}]")); }
        public static IssuesColumnCollection DateF(this IssuesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[DateF]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Issues_DateF(this SqlColumnCollection self, string tableName = "Issues", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[DateF]" + _as.ExistsTo(" as [{0}]")); }
        public static IssuesColumnCollection DateG(this IssuesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[DateG]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Issues_DateG(this SqlColumnCollection self, string tableName = "Issues", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[DateG]" + _as.ExistsTo(" as [{0}]")); }
        public static IssuesColumnCollection DateH(this IssuesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[DateH]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Issues_DateH(this SqlColumnCollection self, string tableName = "Issues", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[DateH]" + _as.ExistsTo(" as [{0}]")); }
        public static IssuesColumnCollection DateI(this IssuesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[DateI]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Issues_DateI(this SqlColumnCollection self, string tableName = "Issues", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[DateI]" + _as.ExistsTo(" as [{0}]")); }
        public static IssuesColumnCollection DateJ(this IssuesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[DateJ]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Issues_DateJ(this SqlColumnCollection self, string tableName = "Issues", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[DateJ]" + _as.ExistsTo(" as [{0}]")); }
        public static IssuesColumnCollection DateK(this IssuesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[DateK]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Issues_DateK(this SqlColumnCollection self, string tableName = "Issues", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[DateK]" + _as.ExistsTo(" as [{0}]")); }
        public static IssuesColumnCollection DateL(this IssuesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[DateL]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Issues_DateL(this SqlColumnCollection self, string tableName = "Issues", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[DateL]" + _as.ExistsTo(" as [{0}]")); }
        public static IssuesColumnCollection DateM(this IssuesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[DateM]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Issues_DateM(this SqlColumnCollection self, string tableName = "Issues", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[DateM]" + _as.ExistsTo(" as [{0}]")); }
        public static IssuesColumnCollection DateN(this IssuesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[DateN]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Issues_DateN(this SqlColumnCollection self, string tableName = "Issues", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[DateN]" + _as.ExistsTo(" as [{0}]")); }
        public static IssuesColumnCollection DateO(this IssuesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[DateO]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Issues_DateO(this SqlColumnCollection self, string tableName = "Issues", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[DateO]" + _as.ExistsTo(" as [{0}]")); }
        public static IssuesColumnCollection DateP(this IssuesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[DateP]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Issues_DateP(this SqlColumnCollection self, string tableName = "Issues", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[DateP]" + _as.ExistsTo(" as [{0}]")); }
        public static IssuesColumnCollection DescriptionA(this IssuesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[DescriptionA]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Issues_DescriptionA(this SqlColumnCollection self, string tableName = "Issues", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[DescriptionA]" + _as.ExistsTo(" as [{0}]")); }
        public static IssuesColumnCollection DescriptionB(this IssuesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[DescriptionB]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Issues_DescriptionB(this SqlColumnCollection self, string tableName = "Issues", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[DescriptionB]" + _as.ExistsTo(" as [{0}]")); }
        public static IssuesColumnCollection DescriptionC(this IssuesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[DescriptionC]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Issues_DescriptionC(this SqlColumnCollection self, string tableName = "Issues", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[DescriptionC]" + _as.ExistsTo(" as [{0}]")); }
        public static IssuesColumnCollection DescriptionD(this IssuesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[DescriptionD]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Issues_DescriptionD(this SqlColumnCollection self, string tableName = "Issues", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[DescriptionD]" + _as.ExistsTo(" as [{0}]")); }
        public static IssuesColumnCollection DescriptionE(this IssuesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[DescriptionE]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Issues_DescriptionE(this SqlColumnCollection self, string tableName = "Issues", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[DescriptionE]" + _as.ExistsTo(" as [{0}]")); }
        public static IssuesColumnCollection DescriptionF(this IssuesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[DescriptionF]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Issues_DescriptionF(this SqlColumnCollection self, string tableName = "Issues", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[DescriptionF]" + _as.ExistsTo(" as [{0}]")); }
        public static IssuesColumnCollection DescriptionG(this IssuesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[DescriptionG]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Issues_DescriptionG(this SqlColumnCollection self, string tableName = "Issues", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[DescriptionG]" + _as.ExistsTo(" as [{0}]")); }
        public static IssuesColumnCollection DescriptionH(this IssuesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[DescriptionH]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Issues_DescriptionH(this SqlColumnCollection self, string tableName = "Issues", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[DescriptionH]" + _as.ExistsTo(" as [{0}]")); }
        public static IssuesColumnCollection DescriptionI(this IssuesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[DescriptionI]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Issues_DescriptionI(this SqlColumnCollection self, string tableName = "Issues", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[DescriptionI]" + _as.ExistsTo(" as [{0}]")); }
        public static IssuesColumnCollection DescriptionJ(this IssuesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[DescriptionJ]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Issues_DescriptionJ(this SqlColumnCollection self, string tableName = "Issues", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[DescriptionJ]" + _as.ExistsTo(" as [{0}]")); }
        public static IssuesColumnCollection DescriptionK(this IssuesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[DescriptionK]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Issues_DescriptionK(this SqlColumnCollection self, string tableName = "Issues", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[DescriptionK]" + _as.ExistsTo(" as [{0}]")); }
        public static IssuesColumnCollection DescriptionL(this IssuesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[DescriptionL]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Issues_DescriptionL(this SqlColumnCollection self, string tableName = "Issues", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[DescriptionL]" + _as.ExistsTo(" as [{0}]")); }
        public static IssuesColumnCollection DescriptionM(this IssuesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[DescriptionM]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Issues_DescriptionM(this SqlColumnCollection self, string tableName = "Issues", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[DescriptionM]" + _as.ExistsTo(" as [{0}]")); }
        public static IssuesColumnCollection DescriptionN(this IssuesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[DescriptionN]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Issues_DescriptionN(this SqlColumnCollection self, string tableName = "Issues", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[DescriptionN]" + _as.ExistsTo(" as [{0}]")); }
        public static IssuesColumnCollection DescriptionO(this IssuesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[DescriptionO]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Issues_DescriptionO(this SqlColumnCollection self, string tableName = "Issues", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[DescriptionO]" + _as.ExistsTo(" as [{0}]")); }
        public static IssuesColumnCollection DescriptionP(this IssuesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[DescriptionP]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Issues_DescriptionP(this SqlColumnCollection self, string tableName = "Issues", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[DescriptionP]" + _as.ExistsTo(" as [{0}]")); }
        public static IssuesColumnCollection CheckA(this IssuesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[CheckA]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Issues_CheckA(this SqlColumnCollection self, string tableName = "Issues", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[CheckA]" + _as.ExistsTo(" as [{0}]")); }
        public static IssuesColumnCollection CheckB(this IssuesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[CheckB]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Issues_CheckB(this SqlColumnCollection self, string tableName = "Issues", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[CheckB]" + _as.ExistsTo(" as [{0}]")); }
        public static IssuesColumnCollection CheckC(this IssuesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[CheckC]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Issues_CheckC(this SqlColumnCollection self, string tableName = "Issues", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[CheckC]" + _as.ExistsTo(" as [{0}]")); }
        public static IssuesColumnCollection CheckD(this IssuesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[CheckD]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Issues_CheckD(this SqlColumnCollection self, string tableName = "Issues", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[CheckD]" + _as.ExistsTo(" as [{0}]")); }
        public static IssuesColumnCollection CheckE(this IssuesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[CheckE]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Issues_CheckE(this SqlColumnCollection self, string tableName = "Issues", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[CheckE]" + _as.ExistsTo(" as [{0}]")); }
        public static IssuesColumnCollection CheckF(this IssuesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[CheckF]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Issues_CheckF(this SqlColumnCollection self, string tableName = "Issues", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[CheckF]" + _as.ExistsTo(" as [{0}]")); }
        public static IssuesColumnCollection CheckG(this IssuesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[CheckG]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Issues_CheckG(this SqlColumnCollection self, string tableName = "Issues", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[CheckG]" + _as.ExistsTo(" as [{0}]")); }
        public static IssuesColumnCollection CheckH(this IssuesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[CheckH]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Issues_CheckH(this SqlColumnCollection self, string tableName = "Issues", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[CheckH]" + _as.ExistsTo(" as [{0}]")); }
        public static IssuesColumnCollection CheckI(this IssuesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[CheckI]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Issues_CheckI(this SqlColumnCollection self, string tableName = "Issues", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[CheckI]" + _as.ExistsTo(" as [{0}]")); }
        public static IssuesColumnCollection CheckJ(this IssuesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[CheckJ]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Issues_CheckJ(this SqlColumnCollection self, string tableName = "Issues", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[CheckJ]" + _as.ExistsTo(" as [{0}]")); }
        public static IssuesColumnCollection CheckK(this IssuesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[CheckK]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Issues_CheckK(this SqlColumnCollection self, string tableName = "Issues", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[CheckK]" + _as.ExistsTo(" as [{0}]")); }
        public static IssuesColumnCollection CheckL(this IssuesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[CheckL]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Issues_CheckL(this SqlColumnCollection self, string tableName = "Issues", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[CheckL]" + _as.ExistsTo(" as [{0}]")); }
        public static IssuesColumnCollection CheckM(this IssuesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[CheckM]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Issues_CheckM(this SqlColumnCollection self, string tableName = "Issues", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[CheckM]" + _as.ExistsTo(" as [{0}]")); }
        public static IssuesColumnCollection CheckN(this IssuesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[CheckN]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Issues_CheckN(this SqlColumnCollection self, string tableName = "Issues", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[CheckN]" + _as.ExistsTo(" as [{0}]")); }
        public static IssuesColumnCollection CheckO(this IssuesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[CheckO]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Issues_CheckO(this SqlColumnCollection self, string tableName = "Issues", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[CheckO]" + _as.ExistsTo(" as [{0}]")); }
        public static IssuesColumnCollection CheckP(this IssuesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[CheckP]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Issues_CheckP(this SqlColumnCollection self, string tableName = "Issues", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[CheckP]" + _as.ExistsTo(" as [{0}]")); }
        public static IssuesColumnCollection Comments(this IssuesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Comments]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Issues_Comments(this SqlColumnCollection self, string tableName = "Issues", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Comments]" + _as.ExistsTo(" as [{0}]")); }
        public static IssuesColumnCollection Creator(this IssuesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Creator]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Issues_Creator(this SqlColumnCollection self, string tableName = "Issues", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Creator]" + _as.ExistsTo(" as [{0}]")); }
        public static IssuesColumnCollection Updator(this IssuesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Updator]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Issues_Updator(this SqlColumnCollection self, string tableName = "Issues", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Updator]" + _as.ExistsTo(" as [{0}]")); }
        public static IssuesColumnCollection CreatedTime(this IssuesColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[CreatedTime]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Issues_CreatedTime(this SqlColumnCollection self, string tableName = "Issues", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[CreatedTime]" + _as.ExistsTo(" as [{0}]")); }
        public static IssuesColumnCollection TitleBody(this IssuesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "[t0].[Title]", "[t0].[Body]"); }
        public static SqlColumnCollection Issues_TitleBody(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "[t0].[Title]", "[t0].[Body]"); }
        public static IssuesColumnCollection CompletionTime(this IssuesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "[t0].[CompletionTime]", "[t0].[Status]", "[t0].[UpdatedTime]"); }
        public static SqlColumnCollection Issues_CompletionTime(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "[t0].[CompletionTime]", "[t0].[Status]", "[t0].[UpdatedTime]"); }
        public static IssuesColumnCollection WorkValue(this IssuesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "[t0].[ProgressRate]", "[t0].[WorkValue]", "[t0].[UpdatedTime]"); }
        public static SqlColumnCollection Issues_WorkValue(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "[t0].[ProgressRate]", "[t0].[WorkValue]", "[t0].[UpdatedTime]"); }
        public static IssuesColumnCollection ProgressRate(this IssuesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "[t0].[CreatedTime]", "[t0].[StartTime]", "[t0].[CompletionTime]", "[t0].[ProgressRate]"); }
        public static SqlColumnCollection Issues_ProgressRate(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "[t0].[CreatedTime]", "[t0].[StartTime]", "[t0].[CompletionTime]", "[t0].[ProgressRate]"); }
        public static IssuesColumnCollection RemainingWorkValue(this IssuesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "[t0].[WorkValue] - ([t0].[WorkValue] * [t0].[ProgressRate] * 0.01) as [RemainingWorkValue]"); }
        public static SqlColumnCollection Issues_RemainingWorkValue(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "[t0].[WorkValue] - ([t0].[WorkValue] * [t0].[ProgressRate] * 0.01) as [RemainingWorkValue]"); }
        public static IssuesColumnCollection IssuesCount(this IssuesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "count(*) as IssuesCount"); }
        public static IssuesColumnCollection WorkValueTotal(this IssuesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "sum([t0].[WorkValue]) as [WorkValueTotal]"); }
        public static SqlColumnCollection Issues_WorkValueTotal(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "sum([t0].[WorkValue]) as [WorkValueTotal]"); }
        public static IssuesColumnCollection WorkValueAverage(this IssuesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "avg([t0].[WorkValue]) as [WorkValueAverage]"); }
        public static SqlColumnCollection Issues_WorkValueAverage(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "avg([t0].[WorkValue]) as [WorkValueAverage]"); }
        public static IssuesColumnCollection RemainingWorkValueTotal(this IssuesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "sum([t0].[WorkValue] - ([t0].[WorkValue] * [t0].[ProgressRate] * 0.01)) as [RemainingWorkValueTotal]"); }
        public static SqlColumnCollection Issues_RemainingWorkValueTotal(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "sum([t0].[WorkValue] - ([t0].[WorkValue] * [t0].[ProgressRate] * 0.01)) as [RemainingWorkValueTotal]"); }
        public static IssuesColumnCollection RemainingWorkValueAverage(this IssuesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "avg([t0].[WorkValue] - ([t0].[WorkValue] * [t0].[ProgressRate] * 0.01)) as [RemainingWorkValueAverage]"); }
        public static SqlColumnCollection Issues_RemainingWorkValueAverage(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "avg([t0].[WorkValue] - ([t0].[WorkValue] * [t0].[ProgressRate] * 0.01)) as [RemainingWorkValueAverage]"); }
        public static IssuesColumnCollection NumATotal(this IssuesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "sum([t0].[NumA]) as [NumATotal]"); }
        public static SqlColumnCollection Issues_NumATotal(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "sum([t0].[NumA]) as [NumATotal]"); }
        public static IssuesColumnCollection NumAAverage(this IssuesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "avg([t0].[NumA]) as [NumAAverage]"); }
        public static SqlColumnCollection Issues_NumAAverage(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "avg([t0].[NumA]) as [NumAAverage]"); }
        public static IssuesColumnCollection NumBTotal(this IssuesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "sum([t0].[NumB]) as [NumBTotal]"); }
        public static SqlColumnCollection Issues_NumBTotal(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "sum([t0].[NumB]) as [NumBTotal]"); }
        public static IssuesColumnCollection NumBAverage(this IssuesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "avg([t0].[NumB]) as [NumBAverage]"); }
        public static SqlColumnCollection Issues_NumBAverage(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "avg([t0].[NumB]) as [NumBAverage]"); }
        public static IssuesColumnCollection NumCTotal(this IssuesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "sum([t0].[NumC]) as [NumCTotal]"); }
        public static SqlColumnCollection Issues_NumCTotal(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "sum([t0].[NumC]) as [NumCTotal]"); }
        public static IssuesColumnCollection NumCAverage(this IssuesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "avg([t0].[NumC]) as [NumCAverage]"); }
        public static SqlColumnCollection Issues_NumCAverage(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "avg([t0].[NumC]) as [NumCAverage]"); }
        public static IssuesColumnCollection NumDTotal(this IssuesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "sum([t0].[NumD]) as [NumDTotal]"); }
        public static SqlColumnCollection Issues_NumDTotal(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "sum([t0].[NumD]) as [NumDTotal]"); }
        public static IssuesColumnCollection NumDAverage(this IssuesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "avg([t0].[NumD]) as [NumDAverage]"); }
        public static SqlColumnCollection Issues_NumDAverage(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "avg([t0].[NumD]) as [NumDAverage]"); }
        public static IssuesColumnCollection NumETotal(this IssuesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "sum([t0].[NumE]) as [NumETotal]"); }
        public static SqlColumnCollection Issues_NumETotal(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "sum([t0].[NumE]) as [NumETotal]"); }
        public static IssuesColumnCollection NumEAverage(this IssuesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "avg([t0].[NumE]) as [NumEAverage]"); }
        public static SqlColumnCollection Issues_NumEAverage(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "avg([t0].[NumE]) as [NumEAverage]"); }
        public static IssuesColumnCollection NumFTotal(this IssuesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "sum([t0].[NumF]) as [NumFTotal]"); }
        public static SqlColumnCollection Issues_NumFTotal(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "sum([t0].[NumF]) as [NumFTotal]"); }
        public static IssuesColumnCollection NumFAverage(this IssuesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "avg([t0].[NumF]) as [NumFAverage]"); }
        public static SqlColumnCollection Issues_NumFAverage(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "avg([t0].[NumF]) as [NumFAverage]"); }
        public static IssuesColumnCollection NumGTotal(this IssuesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "sum([t0].[NumG]) as [NumGTotal]"); }
        public static SqlColumnCollection Issues_NumGTotal(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "sum([t0].[NumG]) as [NumGTotal]"); }
        public static IssuesColumnCollection NumGAverage(this IssuesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "avg([t0].[NumG]) as [NumGAverage]"); }
        public static SqlColumnCollection Issues_NumGAverage(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "avg([t0].[NumG]) as [NumGAverage]"); }
        public static IssuesColumnCollection NumHTotal(this IssuesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "sum([t0].[NumH]) as [NumHTotal]"); }
        public static SqlColumnCollection Issues_NumHTotal(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "sum([t0].[NumH]) as [NumHTotal]"); }
        public static IssuesColumnCollection NumHAverage(this IssuesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "avg([t0].[NumH]) as [NumHAverage]"); }
        public static SqlColumnCollection Issues_NumHAverage(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "avg([t0].[NumH]) as [NumHAverage]"); }
        public static IssuesColumnCollection NumITotal(this IssuesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "sum([t0].[NumI]) as [NumITotal]"); }
        public static SqlColumnCollection Issues_NumITotal(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "sum([t0].[NumI]) as [NumITotal]"); }
        public static IssuesColumnCollection NumIAverage(this IssuesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "avg([t0].[NumI]) as [NumIAverage]"); }
        public static SqlColumnCollection Issues_NumIAverage(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "avg([t0].[NumI]) as [NumIAverage]"); }
        public static IssuesColumnCollection NumJTotal(this IssuesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "sum([t0].[NumJ]) as [NumJTotal]"); }
        public static SqlColumnCollection Issues_NumJTotal(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "sum([t0].[NumJ]) as [NumJTotal]"); }
        public static IssuesColumnCollection NumJAverage(this IssuesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "avg([t0].[NumJ]) as [NumJAverage]"); }
        public static SqlColumnCollection Issues_NumJAverage(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "avg([t0].[NumJ]) as [NumJAverage]"); }
        public static IssuesColumnCollection NumKTotal(this IssuesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "sum([t0].[NumK]) as [NumKTotal]"); }
        public static SqlColumnCollection Issues_NumKTotal(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "sum([t0].[NumK]) as [NumKTotal]"); }
        public static IssuesColumnCollection NumKAverage(this IssuesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "avg([t0].[NumK]) as [NumKAverage]"); }
        public static SqlColumnCollection Issues_NumKAverage(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "avg([t0].[NumK]) as [NumKAverage]"); }
        public static IssuesColumnCollection NumLTotal(this IssuesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "sum([t0].[NumL]) as [NumLTotal]"); }
        public static SqlColumnCollection Issues_NumLTotal(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "sum([t0].[NumL]) as [NumLTotal]"); }
        public static IssuesColumnCollection NumLAverage(this IssuesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "avg([t0].[NumL]) as [NumLAverage]"); }
        public static SqlColumnCollection Issues_NumLAverage(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "avg([t0].[NumL]) as [NumLAverage]"); }
        public static IssuesColumnCollection NumMTotal(this IssuesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "sum([t0].[NumM]) as [NumMTotal]"); }
        public static SqlColumnCollection Issues_NumMTotal(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "sum([t0].[NumM]) as [NumMTotal]"); }
        public static IssuesColumnCollection NumMAverage(this IssuesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "avg([t0].[NumM]) as [NumMAverage]"); }
        public static SqlColumnCollection Issues_NumMAverage(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "avg([t0].[NumM]) as [NumMAverage]"); }
        public static IssuesColumnCollection NumNTotal(this IssuesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "sum([t0].[NumN]) as [NumNTotal]"); }
        public static SqlColumnCollection Issues_NumNTotal(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "sum([t0].[NumN]) as [NumNTotal]"); }
        public static IssuesColumnCollection NumNAverage(this IssuesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "avg([t0].[NumN]) as [NumNAverage]"); }
        public static SqlColumnCollection Issues_NumNAverage(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "avg([t0].[NumN]) as [NumNAverage]"); }
        public static IssuesColumnCollection NumOTotal(this IssuesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "sum([t0].[NumO]) as [NumOTotal]"); }
        public static SqlColumnCollection Issues_NumOTotal(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "sum([t0].[NumO]) as [NumOTotal]"); }
        public static IssuesColumnCollection NumOAverage(this IssuesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "avg([t0].[NumO]) as [NumOAverage]"); }
        public static SqlColumnCollection Issues_NumOAverage(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "avg([t0].[NumO]) as [NumOAverage]"); }
        public static IssuesColumnCollection NumPTotal(this IssuesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "sum([t0].[NumP]) as [NumPTotal]"); }
        public static SqlColumnCollection Issues_NumPTotal(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "sum([t0].[NumP]) as [NumPTotal]"); }
        public static IssuesColumnCollection NumPAverage(this IssuesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "avg([t0].[NumP]) as [NumPAverage]"); }
        public static SqlColumnCollection Issues_NumPAverage(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "avg([t0].[NumP]) as [NumPAverage]"); }
        public static IssuesColumnCollection WorkValueMax(this IssuesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[WorkValue]) as [WorkValueMax]"); }
        public static SqlColumnCollection Issues_WorkValueMax(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[WorkValue]) as [WorkValueMax]"); }
        public static IssuesColumnCollection WorkValueMin(this IssuesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[WorkValue]) as [WorkValueMin]"); }
        public static SqlColumnCollection Issues_WorkValueMin(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[WorkValue]) as [WorkValueMin]"); }
        public static IssuesColumnCollection RemainingWorkValueMax(this IssuesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[WorkValue] - ([t0].[WorkValue] * [t0].[ProgressRate] * 0.01)) as [RemainingWorkValueMax]"); }
        public static SqlColumnCollection Issues_RemainingWorkValueMax(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[WorkValue] - ([t0].[WorkValue] * [t0].[ProgressRate] * 0.01)) as [RemainingWorkValueMax]"); }
        public static IssuesColumnCollection RemainingWorkValueMin(this IssuesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[WorkValue] - ([t0].[WorkValue] * [t0].[ProgressRate] * 0.01)) as [RemainingWorkValueMin]"); }
        public static SqlColumnCollection Issues_RemainingWorkValueMin(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[WorkValue] - ([t0].[WorkValue] * [t0].[ProgressRate] * 0.01)) as [RemainingWorkValueMin]"); }
        public static IssuesColumnCollection NumAMax(this IssuesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[NumA]) as [NumAMax]"); }
        public static SqlColumnCollection Issues_NumAMax(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[NumA]) as [NumAMax]"); }
        public static IssuesColumnCollection NumAMin(this IssuesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[NumA]) as [NumAMin]"); }
        public static SqlColumnCollection Issues_NumAMin(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[NumA]) as [NumAMin]"); }
        public static IssuesColumnCollection NumBMax(this IssuesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[NumB]) as [NumBMax]"); }
        public static SqlColumnCollection Issues_NumBMax(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[NumB]) as [NumBMax]"); }
        public static IssuesColumnCollection NumBMin(this IssuesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[NumB]) as [NumBMin]"); }
        public static SqlColumnCollection Issues_NumBMin(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[NumB]) as [NumBMin]"); }
        public static IssuesColumnCollection NumCMax(this IssuesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[NumC]) as [NumCMax]"); }
        public static SqlColumnCollection Issues_NumCMax(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[NumC]) as [NumCMax]"); }
        public static IssuesColumnCollection NumCMin(this IssuesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[NumC]) as [NumCMin]"); }
        public static SqlColumnCollection Issues_NumCMin(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[NumC]) as [NumCMin]"); }
        public static IssuesColumnCollection NumDMax(this IssuesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[NumD]) as [NumDMax]"); }
        public static SqlColumnCollection Issues_NumDMax(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[NumD]) as [NumDMax]"); }
        public static IssuesColumnCollection NumDMin(this IssuesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[NumD]) as [NumDMin]"); }
        public static SqlColumnCollection Issues_NumDMin(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[NumD]) as [NumDMin]"); }
        public static IssuesColumnCollection NumEMax(this IssuesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[NumE]) as [NumEMax]"); }
        public static SqlColumnCollection Issues_NumEMax(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[NumE]) as [NumEMax]"); }
        public static IssuesColumnCollection NumEMin(this IssuesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[NumE]) as [NumEMin]"); }
        public static SqlColumnCollection Issues_NumEMin(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[NumE]) as [NumEMin]"); }
        public static IssuesColumnCollection NumFMax(this IssuesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[NumF]) as [NumFMax]"); }
        public static SqlColumnCollection Issues_NumFMax(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[NumF]) as [NumFMax]"); }
        public static IssuesColumnCollection NumFMin(this IssuesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[NumF]) as [NumFMin]"); }
        public static SqlColumnCollection Issues_NumFMin(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[NumF]) as [NumFMin]"); }
        public static IssuesColumnCollection NumGMax(this IssuesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[NumG]) as [NumGMax]"); }
        public static SqlColumnCollection Issues_NumGMax(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[NumG]) as [NumGMax]"); }
        public static IssuesColumnCollection NumGMin(this IssuesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[NumG]) as [NumGMin]"); }
        public static SqlColumnCollection Issues_NumGMin(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[NumG]) as [NumGMin]"); }
        public static IssuesColumnCollection NumHMax(this IssuesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[NumH]) as [NumHMax]"); }
        public static SqlColumnCollection Issues_NumHMax(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[NumH]) as [NumHMax]"); }
        public static IssuesColumnCollection NumHMin(this IssuesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[NumH]) as [NumHMin]"); }
        public static SqlColumnCollection Issues_NumHMin(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[NumH]) as [NumHMin]"); }
        public static IssuesColumnCollection NumIMax(this IssuesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[NumI]) as [NumIMax]"); }
        public static SqlColumnCollection Issues_NumIMax(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[NumI]) as [NumIMax]"); }
        public static IssuesColumnCollection NumIMin(this IssuesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[NumI]) as [NumIMin]"); }
        public static SqlColumnCollection Issues_NumIMin(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[NumI]) as [NumIMin]"); }
        public static IssuesColumnCollection NumJMax(this IssuesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[NumJ]) as [NumJMax]"); }
        public static SqlColumnCollection Issues_NumJMax(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[NumJ]) as [NumJMax]"); }
        public static IssuesColumnCollection NumJMin(this IssuesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[NumJ]) as [NumJMin]"); }
        public static SqlColumnCollection Issues_NumJMin(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[NumJ]) as [NumJMin]"); }
        public static IssuesColumnCollection NumKMax(this IssuesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[NumK]) as [NumKMax]"); }
        public static SqlColumnCollection Issues_NumKMax(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[NumK]) as [NumKMax]"); }
        public static IssuesColumnCollection NumKMin(this IssuesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[NumK]) as [NumKMin]"); }
        public static SqlColumnCollection Issues_NumKMin(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[NumK]) as [NumKMin]"); }
        public static IssuesColumnCollection NumLMax(this IssuesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[NumL]) as [NumLMax]"); }
        public static SqlColumnCollection Issues_NumLMax(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[NumL]) as [NumLMax]"); }
        public static IssuesColumnCollection NumLMin(this IssuesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[NumL]) as [NumLMin]"); }
        public static SqlColumnCollection Issues_NumLMin(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[NumL]) as [NumLMin]"); }
        public static IssuesColumnCollection NumMMax(this IssuesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[NumM]) as [NumMMax]"); }
        public static SqlColumnCollection Issues_NumMMax(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[NumM]) as [NumMMax]"); }
        public static IssuesColumnCollection NumMMin(this IssuesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[NumM]) as [NumMMin]"); }
        public static SqlColumnCollection Issues_NumMMin(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[NumM]) as [NumMMin]"); }
        public static IssuesColumnCollection NumNMax(this IssuesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[NumN]) as [NumNMax]"); }
        public static SqlColumnCollection Issues_NumNMax(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[NumN]) as [NumNMax]"); }
        public static IssuesColumnCollection NumNMin(this IssuesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[NumN]) as [NumNMin]"); }
        public static SqlColumnCollection Issues_NumNMin(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[NumN]) as [NumNMin]"); }
        public static IssuesColumnCollection NumOMax(this IssuesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[NumO]) as [NumOMax]"); }
        public static SqlColumnCollection Issues_NumOMax(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[NumO]) as [NumOMax]"); }
        public static IssuesColumnCollection NumOMin(this IssuesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[NumO]) as [NumOMin]"); }
        public static SqlColumnCollection Issues_NumOMin(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[NumO]) as [NumOMin]"); }
        public static IssuesColumnCollection NumPMax(this IssuesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[NumP]) as [NumPMax]"); }
        public static SqlColumnCollection Issues_NumPMax(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[NumP]) as [NumPMax]"); }
        public static IssuesColumnCollection NumPMin(this IssuesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[NumP]) as [NumPMin]"); }
        public static SqlColumnCollection Issues_NumPMin(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[NumP]) as [NumPMin]"); }
        public static IssuesColumnCollection CreatedTimeMax(this IssuesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[CreatedTime]) as [CreatedTimeMax]"); }
        public static SqlColumnCollection Issues_CreatedTimeMax(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[CreatedTime]) as [CreatedTimeMax]"); }
        public static IssuesColumnCollection CreatedTimeMin(this IssuesColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[CreatedTime]) as [CreatedTimeMin]"); }
        public static SqlColumnCollection Issues_CreatedTimeMin(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[CreatedTime]) as [CreatedTimeMin]"); }
        public static IssuesWhereCollection SiteId(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[SiteId]" }, "SiteId", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_SiteId(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[SiteId]" }, "SiteId", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection UpdatedTime(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[UpdatedTime]" }, "UpdatedTime", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_UpdatedTime(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[UpdatedTime]" }, "UpdatedTime", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection IssueId(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[IssueId]" }, "IssueId", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_IssueId(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[IssueId]" }, "IssueId", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection Ver(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Ver]" }, "Ver", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_Ver(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Ver]" }, "Ver", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection Title(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Title]" }, "Title", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_Title(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Title]" }, "Title", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection Body(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Body]" }, "Body", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_Body(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Body]" }, "Body", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection StartTime(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[StartTime]" }, "StartTime", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_StartTime(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[StartTime]" }, "StartTime", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection Status(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Status]" }, "Status", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_Status(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Status]" }, "Status", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection Manager(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Manager]" }, "Manager", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_Manager(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Manager]" }, "Manager", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection Owner(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Owner]" }, "Owner", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_Owner(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Owner]" }, "Owner", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection ClassA(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[ClassA]" }, "ClassA", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_ClassA(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[ClassA]" }, "ClassA", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection ClassB(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[ClassB]" }, "ClassB", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_ClassB(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[ClassB]" }, "ClassB", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection ClassC(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[ClassC]" }, "ClassC", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_ClassC(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[ClassC]" }, "ClassC", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection ClassD(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[ClassD]" }, "ClassD", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_ClassD(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[ClassD]" }, "ClassD", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection ClassE(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[ClassE]" }, "ClassE", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_ClassE(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[ClassE]" }, "ClassE", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection ClassF(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[ClassF]" }, "ClassF", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_ClassF(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[ClassF]" }, "ClassF", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection ClassG(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[ClassG]" }, "ClassG", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_ClassG(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[ClassG]" }, "ClassG", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection ClassH(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[ClassH]" }, "ClassH", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_ClassH(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[ClassH]" }, "ClassH", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection ClassI(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[ClassI]" }, "ClassI", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_ClassI(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[ClassI]" }, "ClassI", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection ClassJ(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[ClassJ]" }, "ClassJ", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_ClassJ(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[ClassJ]" }, "ClassJ", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection ClassK(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[ClassK]" }, "ClassK", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_ClassK(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[ClassK]" }, "ClassK", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection ClassL(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[ClassL]" }, "ClassL", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_ClassL(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[ClassL]" }, "ClassL", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection ClassM(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[ClassM]" }, "ClassM", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_ClassM(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[ClassM]" }, "ClassM", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection ClassN(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[ClassN]" }, "ClassN", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_ClassN(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[ClassN]" }, "ClassN", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection ClassO(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[ClassO]" }, "ClassO", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_ClassO(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[ClassO]" }, "ClassO", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection ClassP(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[ClassP]" }, "ClassP", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_ClassP(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[ClassP]" }, "ClassP", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection NumA(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[NumA]" }, "NumA", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_NumA(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[NumA]" }, "NumA", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection NumB(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[NumB]" }, "NumB", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_NumB(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[NumB]" }, "NumB", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection NumC(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[NumC]" }, "NumC", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_NumC(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[NumC]" }, "NumC", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection NumD(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[NumD]" }, "NumD", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_NumD(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[NumD]" }, "NumD", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection NumE(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[NumE]" }, "NumE", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_NumE(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[NumE]" }, "NumE", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection NumF(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[NumF]" }, "NumF", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_NumF(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[NumF]" }, "NumF", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection NumG(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[NumG]" }, "NumG", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_NumG(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[NumG]" }, "NumG", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection NumH(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[NumH]" }, "NumH", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_NumH(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[NumH]" }, "NumH", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection NumI(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[NumI]" }, "NumI", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_NumI(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[NumI]" }, "NumI", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection NumJ(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[NumJ]" }, "NumJ", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_NumJ(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[NumJ]" }, "NumJ", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection NumK(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[NumK]" }, "NumK", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_NumK(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[NumK]" }, "NumK", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection NumL(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[NumL]" }, "NumL", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_NumL(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[NumL]" }, "NumL", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection NumM(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[NumM]" }, "NumM", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_NumM(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[NumM]" }, "NumM", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection NumN(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[NumN]" }, "NumN", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_NumN(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[NumN]" }, "NumN", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection NumO(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[NumO]" }, "NumO", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_NumO(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[NumO]" }, "NumO", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection NumP(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[NumP]" }, "NumP", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_NumP(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[NumP]" }, "NumP", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection DateA(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[DateA]" }, "DateA", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_DateA(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[DateA]" }, "DateA", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection DateB(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[DateB]" }, "DateB", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_DateB(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[DateB]" }, "DateB", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection DateC(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[DateC]" }, "DateC", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_DateC(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[DateC]" }, "DateC", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection DateD(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[DateD]" }, "DateD", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_DateD(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[DateD]" }, "DateD", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection DateE(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[DateE]" }, "DateE", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_DateE(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[DateE]" }, "DateE", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection DateF(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[DateF]" }, "DateF", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_DateF(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[DateF]" }, "DateF", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection DateG(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[DateG]" }, "DateG", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_DateG(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[DateG]" }, "DateG", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection DateH(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[DateH]" }, "DateH", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_DateH(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[DateH]" }, "DateH", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection DateI(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[DateI]" }, "DateI", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_DateI(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[DateI]" }, "DateI", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection DateJ(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[DateJ]" }, "DateJ", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_DateJ(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[DateJ]" }, "DateJ", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection DateK(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[DateK]" }, "DateK", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_DateK(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[DateK]" }, "DateK", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection DateL(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[DateL]" }, "DateL", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_DateL(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[DateL]" }, "DateL", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection DateM(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[DateM]" }, "DateM", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_DateM(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[DateM]" }, "DateM", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection DateN(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[DateN]" }, "DateN", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_DateN(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[DateN]" }, "DateN", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection DateO(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[DateO]" }, "DateO", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_DateO(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[DateO]" }, "DateO", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection DateP(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[DateP]" }, "DateP", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_DateP(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[DateP]" }, "DateP", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection DescriptionA(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[DescriptionA]" }, "DescriptionA", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_DescriptionA(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[DescriptionA]" }, "DescriptionA", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection DescriptionB(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[DescriptionB]" }, "DescriptionB", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_DescriptionB(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[DescriptionB]" }, "DescriptionB", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection DescriptionC(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[DescriptionC]" }, "DescriptionC", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_DescriptionC(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[DescriptionC]" }, "DescriptionC", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection DescriptionD(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[DescriptionD]" }, "DescriptionD", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_DescriptionD(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[DescriptionD]" }, "DescriptionD", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection DescriptionE(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[DescriptionE]" }, "DescriptionE", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_DescriptionE(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[DescriptionE]" }, "DescriptionE", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection DescriptionF(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[DescriptionF]" }, "DescriptionF", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_DescriptionF(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[DescriptionF]" }, "DescriptionF", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection DescriptionG(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[DescriptionG]" }, "DescriptionG", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_DescriptionG(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[DescriptionG]" }, "DescriptionG", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection DescriptionH(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[DescriptionH]" }, "DescriptionH", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_DescriptionH(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[DescriptionH]" }, "DescriptionH", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection DescriptionI(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[DescriptionI]" }, "DescriptionI", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_DescriptionI(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[DescriptionI]" }, "DescriptionI", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection DescriptionJ(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[DescriptionJ]" }, "DescriptionJ", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_DescriptionJ(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[DescriptionJ]" }, "DescriptionJ", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection DescriptionK(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[DescriptionK]" }, "DescriptionK", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_DescriptionK(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[DescriptionK]" }, "DescriptionK", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection DescriptionL(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[DescriptionL]" }, "DescriptionL", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_DescriptionL(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[DescriptionL]" }, "DescriptionL", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection DescriptionM(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[DescriptionM]" }, "DescriptionM", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_DescriptionM(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[DescriptionM]" }, "DescriptionM", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection DescriptionN(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[DescriptionN]" }, "DescriptionN", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_DescriptionN(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[DescriptionN]" }, "DescriptionN", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection DescriptionO(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[DescriptionO]" }, "DescriptionO", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_DescriptionO(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[DescriptionO]" }, "DescriptionO", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection DescriptionP(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[DescriptionP]" }, "DescriptionP", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_DescriptionP(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[DescriptionP]" }, "DescriptionP", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection CheckA(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[CheckA]" }, "CheckA", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_CheckA(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[CheckA]" }, "CheckA", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection CheckB(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[CheckB]" }, "CheckB", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_CheckB(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[CheckB]" }, "CheckB", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection CheckC(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[CheckC]" }, "CheckC", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_CheckC(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[CheckC]" }, "CheckC", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection CheckD(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[CheckD]" }, "CheckD", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_CheckD(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[CheckD]" }, "CheckD", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection CheckE(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[CheckE]" }, "CheckE", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_CheckE(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[CheckE]" }, "CheckE", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection CheckF(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[CheckF]" }, "CheckF", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_CheckF(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[CheckF]" }, "CheckF", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection CheckG(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[CheckG]" }, "CheckG", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_CheckG(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[CheckG]" }, "CheckG", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection CheckH(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[CheckH]" }, "CheckH", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_CheckH(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[CheckH]" }, "CheckH", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection CheckI(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[CheckI]" }, "CheckI", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_CheckI(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[CheckI]" }, "CheckI", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection CheckJ(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[CheckJ]" }, "CheckJ", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_CheckJ(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[CheckJ]" }, "CheckJ", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection CheckK(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[CheckK]" }, "CheckK", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_CheckK(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[CheckK]" }, "CheckK", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection CheckL(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[CheckL]" }, "CheckL", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_CheckL(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[CheckL]" }, "CheckL", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection CheckM(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[CheckM]" }, "CheckM", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_CheckM(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[CheckM]" }, "CheckM", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection CheckN(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[CheckN]" }, "CheckN", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_CheckN(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[CheckN]" }, "CheckN", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection CheckO(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[CheckO]" }, "CheckO", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_CheckO(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[CheckO]" }, "CheckO", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection CheckP(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[CheckP]" }, "CheckP", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_CheckP(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[CheckP]" }, "CheckP", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection Comments(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Comments]" }, "Comments", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_Comments(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Comments]" }, "Comments", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection Creator(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Creator]" }, "Creator", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_Creator(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Creator]" }, "Creator", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection Updator(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Updator]" }, "Updator", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_Updator(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Updator]" }, "Updator", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection CreatedTime(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[CreatedTime]" }, "CreatedTime", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_CreatedTime(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[CreatedTime]" }, "CreatedTime", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection TitleBody(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Title]", "[t0].[Body]" }, "TitleBody", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_TitleBody(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Title]", "[t0].[Body]" }, "TitleBody", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection CompletionTime(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[CompletionTime]", "[t0].[Status]", "[t0].[UpdatedTime]" }, "CompletionTime", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_CompletionTime(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[CompletionTime]", "[t0].[Status]", "[t0].[UpdatedTime]" }, "CompletionTime", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection WorkValue(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[ProgressRate]", "[t0].[WorkValue]", "[t0].[UpdatedTime]" }, "WorkValue", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_WorkValue(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[ProgressRate]", "[t0].[WorkValue]", "[t0].[UpdatedTime]" }, "WorkValue", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection ProgressRate(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[CreatedTime]", "[t0].[StartTime]", "[t0].[CompletionTime]", "[t0].[ProgressRate]" }, "ProgressRate", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_ProgressRate(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[CreatedTime]", "[t0].[StartTime]", "[t0].[CompletionTime]", "[t0].[ProgressRate]" }, "ProgressRate", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection RemainingWorkValue(this IssuesWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[WorkValue] - ([t0].[WorkValue] * [t0].[ProgressRate] * 0.01)" }, "RemainingWorkValue", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Issues_RemainingWorkValue(this SqlWhereCollection self, object value = null, string tableName = "Issues", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[WorkValue] - ([t0].[WorkValue] * [t0].[ProgressRate] * 0.01)" }, "RemainingWorkValue", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static IssuesWhereCollection SiteId_In(this IssuesWhereCollection self, IEnumerable<long> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[SiteId]" }, "SiteId", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Issues_SiteId_In(this SqlWhereCollection self, IEnumerable<long> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[SiteId]" }, "SiteId", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static IssuesWhereCollection IssueId_In(this IssuesWhereCollection self, IEnumerable<long> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[IssueId]" }, "IssueId", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Issues_IssueId_In(this SqlWhereCollection self, IEnumerable<long> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[IssueId]" }, "IssueId", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static IssuesWhereCollection Ver_In(this IssuesWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Ver]" }, "Ver", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Issues_Ver_In(this SqlWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Ver]" }, "Ver", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static IssuesWhereCollection WorkValue_In(this IssuesWhereCollection self, IEnumerable<decimal> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[WorkValue]" }, "WorkValue", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Issues_WorkValue_In(this SqlWhereCollection self, IEnumerable<decimal> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[WorkValue]" }, "WorkValue", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static IssuesWhereCollection ProgressRate_In(this IssuesWhereCollection self, IEnumerable<decimal> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[ProgressRate]" }, "ProgressRate", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Issues_ProgressRate_In(this SqlWhereCollection self, IEnumerable<decimal> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[ProgressRate]" }, "ProgressRate", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static IssuesWhereCollection RemainingWorkValue_In(this IssuesWhereCollection self, IEnumerable<decimal> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[RemainingWorkValue]" }, "RemainingWorkValue", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Issues_RemainingWorkValue_In(this SqlWhereCollection self, IEnumerable<decimal> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[RemainingWorkValue]" }, "RemainingWorkValue", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static IssuesWhereCollection Status_In(this IssuesWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Status]" }, "Status", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Issues_Status_In(this SqlWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Status]" }, "Status", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static IssuesWhereCollection Manager_In(this IssuesWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Manager]" }, "Manager", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Issues_Manager_In(this SqlWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Manager]" }, "Manager", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static IssuesWhereCollection Owner_In(this IssuesWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Owner]" }, "Owner", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Issues_Owner_In(this SqlWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Owner]" }, "Owner", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static IssuesWhereCollection NumA_In(this IssuesWhereCollection self, IEnumerable<decimal> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[NumA]" }, "NumA", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Issues_NumA_In(this SqlWhereCollection self, IEnumerable<decimal> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[NumA]" }, "NumA", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static IssuesWhereCollection NumB_In(this IssuesWhereCollection self, IEnumerable<decimal> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[NumB]" }, "NumB", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Issues_NumB_In(this SqlWhereCollection self, IEnumerable<decimal> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[NumB]" }, "NumB", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static IssuesWhereCollection NumC_In(this IssuesWhereCollection self, IEnumerable<decimal> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[NumC]" }, "NumC", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Issues_NumC_In(this SqlWhereCollection self, IEnumerable<decimal> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[NumC]" }, "NumC", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static IssuesWhereCollection NumD_In(this IssuesWhereCollection self, IEnumerable<decimal> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[NumD]" }, "NumD", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Issues_NumD_In(this SqlWhereCollection self, IEnumerable<decimal> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[NumD]" }, "NumD", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static IssuesWhereCollection NumE_In(this IssuesWhereCollection self, IEnumerable<decimal> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[NumE]" }, "NumE", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Issues_NumE_In(this SqlWhereCollection self, IEnumerable<decimal> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[NumE]" }, "NumE", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static IssuesWhereCollection NumF_In(this IssuesWhereCollection self, IEnumerable<decimal> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[NumF]" }, "NumF", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Issues_NumF_In(this SqlWhereCollection self, IEnumerable<decimal> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[NumF]" }, "NumF", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static IssuesWhereCollection NumG_In(this IssuesWhereCollection self, IEnumerable<decimal> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[NumG]" }, "NumG", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Issues_NumG_In(this SqlWhereCollection self, IEnumerable<decimal> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[NumG]" }, "NumG", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static IssuesWhereCollection NumH_In(this IssuesWhereCollection self, IEnumerable<decimal> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[NumH]" }, "NumH", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Issues_NumH_In(this SqlWhereCollection self, IEnumerable<decimal> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[NumH]" }, "NumH", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static IssuesWhereCollection NumI_In(this IssuesWhereCollection self, IEnumerable<decimal> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[NumI]" }, "NumI", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Issues_NumI_In(this SqlWhereCollection self, IEnumerable<decimal> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[NumI]" }, "NumI", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static IssuesWhereCollection NumJ_In(this IssuesWhereCollection self, IEnumerable<decimal> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[NumJ]" }, "NumJ", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Issues_NumJ_In(this SqlWhereCollection self, IEnumerable<decimal> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[NumJ]" }, "NumJ", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static IssuesWhereCollection NumK_In(this IssuesWhereCollection self, IEnumerable<decimal> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[NumK]" }, "NumK", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Issues_NumK_In(this SqlWhereCollection self, IEnumerable<decimal> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[NumK]" }, "NumK", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static IssuesWhereCollection NumL_In(this IssuesWhereCollection self, IEnumerable<decimal> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[NumL]" }, "NumL", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Issues_NumL_In(this SqlWhereCollection self, IEnumerable<decimal> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[NumL]" }, "NumL", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static IssuesWhereCollection NumM_In(this IssuesWhereCollection self, IEnumerable<decimal> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[NumM]" }, "NumM", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Issues_NumM_In(this SqlWhereCollection self, IEnumerable<decimal> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[NumM]" }, "NumM", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static IssuesWhereCollection NumN_In(this IssuesWhereCollection self, IEnumerable<decimal> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[NumN]" }, "NumN", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Issues_NumN_In(this SqlWhereCollection self, IEnumerable<decimal> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[NumN]" }, "NumN", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static IssuesWhereCollection NumO_In(this IssuesWhereCollection self, IEnumerable<decimal> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[NumO]" }, "NumO", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Issues_NumO_In(this SqlWhereCollection self, IEnumerable<decimal> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[NumO]" }, "NumO", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static IssuesWhereCollection NumP_In(this IssuesWhereCollection self, IEnumerable<decimal> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[NumP]" }, "NumP", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Issues_NumP_In(this SqlWhereCollection self, IEnumerable<decimal> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[NumP]" }, "NumP", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static IssuesWhereCollection Creator_In(this IssuesWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Creator]" }, "Creator", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Issues_Creator_In(this SqlWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Creator]" }, "Creator", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static IssuesWhereCollection Updator_In(this IssuesWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Updator]" }, "Updator", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Issues_Updator_In(this SqlWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Updator]" }, "Updator", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static IssuesWhereCollection SiteId_Between(this IssuesWhereCollection self, long begin, long end, bool _using = true) { return self.Add(new string[] { "[t0].[SiteId]" }, "SiteId", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Issues_SiteId_Between(this SqlWhereCollection self, long begin, long end, bool _using = true) { return self.Add(new string[] { "[t0].[SiteId]" }, "SiteId", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static IssuesWhereCollection IssueId_Between(this IssuesWhereCollection self, long begin, long end, bool _using = true) { return self.Add(new string[] { "[t0].[IssueId]" }, "IssueId", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Issues_IssueId_Between(this SqlWhereCollection self, long begin, long end, bool _using = true) { return self.Add(new string[] { "[t0].[IssueId]" }, "IssueId", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static IssuesWhereCollection Ver_Between(this IssuesWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Ver]" }, "Ver", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Issues_Ver_Between(this SqlWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Ver]" }, "Ver", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static IssuesWhereCollection WorkValue_Between(this IssuesWhereCollection self, decimal begin, decimal end, bool _using = true) { return self.Add(new string[] { "[t0].[WorkValue]" }, "WorkValue", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Issues_WorkValue_Between(this SqlWhereCollection self, decimal begin, decimal end, bool _using = true) { return self.Add(new string[] { "[t0].[WorkValue]" }, "WorkValue", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static IssuesWhereCollection ProgressRate_Between(this IssuesWhereCollection self, decimal begin, decimal end, bool _using = true) { return self.Add(new string[] { "[t0].[ProgressRate]" }, "ProgressRate", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Issues_ProgressRate_Between(this SqlWhereCollection self, decimal begin, decimal end, bool _using = true) { return self.Add(new string[] { "[t0].[ProgressRate]" }, "ProgressRate", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static IssuesWhereCollection RemainingWorkValue_Between(this IssuesWhereCollection self, decimal begin, decimal end, bool _using = true) { return self.Add(new string[] { "[t0].[RemainingWorkValue]" }, "RemainingWorkValue", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Issues_RemainingWorkValue_Between(this SqlWhereCollection self, decimal begin, decimal end, bool _using = true) { return self.Add(new string[] { "[t0].[RemainingWorkValue]" }, "RemainingWorkValue", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static IssuesWhereCollection Status_Between(this IssuesWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Status]" }, "Status", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Issues_Status_Between(this SqlWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Status]" }, "Status", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static IssuesWhereCollection Manager_Between(this IssuesWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Manager]" }, "Manager", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Issues_Manager_Between(this SqlWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Manager]" }, "Manager", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static IssuesWhereCollection Owner_Between(this IssuesWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Owner]" }, "Owner", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Issues_Owner_Between(this SqlWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Owner]" }, "Owner", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static IssuesWhereCollection NumA_Between(this IssuesWhereCollection self, decimal begin, decimal end, bool _using = true) { return self.Add(new string[] { "[t0].[NumA]" }, "NumA", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Issues_NumA_Between(this SqlWhereCollection self, decimal begin, decimal end, bool _using = true) { return self.Add(new string[] { "[t0].[NumA]" }, "NumA", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static IssuesWhereCollection NumB_Between(this IssuesWhereCollection self, decimal begin, decimal end, bool _using = true) { return self.Add(new string[] { "[t0].[NumB]" }, "NumB", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Issues_NumB_Between(this SqlWhereCollection self, decimal begin, decimal end, bool _using = true) { return self.Add(new string[] { "[t0].[NumB]" }, "NumB", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static IssuesWhereCollection NumC_Between(this IssuesWhereCollection self, decimal begin, decimal end, bool _using = true) { return self.Add(new string[] { "[t0].[NumC]" }, "NumC", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Issues_NumC_Between(this SqlWhereCollection self, decimal begin, decimal end, bool _using = true) { return self.Add(new string[] { "[t0].[NumC]" }, "NumC", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static IssuesWhereCollection NumD_Between(this IssuesWhereCollection self, decimal begin, decimal end, bool _using = true) { return self.Add(new string[] { "[t0].[NumD]" }, "NumD", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Issues_NumD_Between(this SqlWhereCollection self, decimal begin, decimal end, bool _using = true) { return self.Add(new string[] { "[t0].[NumD]" }, "NumD", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static IssuesWhereCollection NumE_Between(this IssuesWhereCollection self, decimal begin, decimal end, bool _using = true) { return self.Add(new string[] { "[t0].[NumE]" }, "NumE", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Issues_NumE_Between(this SqlWhereCollection self, decimal begin, decimal end, bool _using = true) { return self.Add(new string[] { "[t0].[NumE]" }, "NumE", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static IssuesWhereCollection NumF_Between(this IssuesWhereCollection self, decimal begin, decimal end, bool _using = true) { return self.Add(new string[] { "[t0].[NumF]" }, "NumF", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Issues_NumF_Between(this SqlWhereCollection self, decimal begin, decimal end, bool _using = true) { return self.Add(new string[] { "[t0].[NumF]" }, "NumF", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static IssuesWhereCollection NumG_Between(this IssuesWhereCollection self, decimal begin, decimal end, bool _using = true) { return self.Add(new string[] { "[t0].[NumG]" }, "NumG", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Issues_NumG_Between(this SqlWhereCollection self, decimal begin, decimal end, bool _using = true) { return self.Add(new string[] { "[t0].[NumG]" }, "NumG", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static IssuesWhereCollection NumH_Between(this IssuesWhereCollection self, decimal begin, decimal end, bool _using = true) { return self.Add(new string[] { "[t0].[NumH]" }, "NumH", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Issues_NumH_Between(this SqlWhereCollection self, decimal begin, decimal end, bool _using = true) { return self.Add(new string[] { "[t0].[NumH]" }, "NumH", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static IssuesWhereCollection NumI_Between(this IssuesWhereCollection self, decimal begin, decimal end, bool _using = true) { return self.Add(new string[] { "[t0].[NumI]" }, "NumI", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Issues_NumI_Between(this SqlWhereCollection self, decimal begin, decimal end, bool _using = true) { return self.Add(new string[] { "[t0].[NumI]" }, "NumI", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static IssuesWhereCollection NumJ_Between(this IssuesWhereCollection self, decimal begin, decimal end, bool _using = true) { return self.Add(new string[] { "[t0].[NumJ]" }, "NumJ", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Issues_NumJ_Between(this SqlWhereCollection self, decimal begin, decimal end, bool _using = true) { return self.Add(new string[] { "[t0].[NumJ]" }, "NumJ", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static IssuesWhereCollection NumK_Between(this IssuesWhereCollection self, decimal begin, decimal end, bool _using = true) { return self.Add(new string[] { "[t0].[NumK]" }, "NumK", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Issues_NumK_Between(this SqlWhereCollection self, decimal begin, decimal end, bool _using = true) { return self.Add(new string[] { "[t0].[NumK]" }, "NumK", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static IssuesWhereCollection NumL_Between(this IssuesWhereCollection self, decimal begin, decimal end, bool _using = true) { return self.Add(new string[] { "[t0].[NumL]" }, "NumL", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Issues_NumL_Between(this SqlWhereCollection self, decimal begin, decimal end, bool _using = true) { return self.Add(new string[] { "[t0].[NumL]" }, "NumL", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static IssuesWhereCollection NumM_Between(this IssuesWhereCollection self, decimal begin, decimal end, bool _using = true) { return self.Add(new string[] { "[t0].[NumM]" }, "NumM", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Issues_NumM_Between(this SqlWhereCollection self, decimal begin, decimal end, bool _using = true) { return self.Add(new string[] { "[t0].[NumM]" }, "NumM", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static IssuesWhereCollection NumN_Between(this IssuesWhereCollection self, decimal begin, decimal end, bool _using = true) { return self.Add(new string[] { "[t0].[NumN]" }, "NumN", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Issues_NumN_Between(this SqlWhereCollection self, decimal begin, decimal end, bool _using = true) { return self.Add(new string[] { "[t0].[NumN]" }, "NumN", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static IssuesWhereCollection NumO_Between(this IssuesWhereCollection self, decimal begin, decimal end, bool _using = true) { return self.Add(new string[] { "[t0].[NumO]" }, "NumO", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Issues_NumO_Between(this SqlWhereCollection self, decimal begin, decimal end, bool _using = true) { return self.Add(new string[] { "[t0].[NumO]" }, "NumO", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static IssuesWhereCollection NumP_Between(this IssuesWhereCollection self, decimal begin, decimal end, bool _using = true) { return self.Add(new string[] { "[t0].[NumP]" }, "NumP", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Issues_NumP_Between(this SqlWhereCollection self, decimal begin, decimal end, bool _using = true) { return self.Add(new string[] { "[t0].[NumP]" }, "NumP", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static IssuesWhereCollection Creator_Between(this IssuesWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Creator]" }, "Creator", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Issues_Creator_Between(this SqlWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Creator]" }, "Creator", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static IssuesWhereCollection Updator_Between(this IssuesWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Updator]" }, "Updator", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Issues_Updator_Between(this SqlWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Updator]" }, "Updator", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static IssuesWhereCollection UpdatedTime_Between(this IssuesWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[UpdatedTime]" }, "UpdatedTime", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Issues_UpdatedTime_Between(this SqlWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[UpdatedTime]" }, "UpdatedTime", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static IssuesWhereCollection StartTime_Between(this IssuesWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[StartTime]" }, "StartTime", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Issues_StartTime_Between(this SqlWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[StartTime]" }, "StartTime", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static IssuesWhereCollection CompletionTime_Between(this IssuesWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[CompletionTime]" }, "CompletionTime", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Issues_CompletionTime_Between(this SqlWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[CompletionTime]" }, "CompletionTime", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static IssuesWhereCollection DateA_Between(this IssuesWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[DateA]" }, "DateA", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Issues_DateA_Between(this SqlWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[DateA]" }, "DateA", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static IssuesWhereCollection DateB_Between(this IssuesWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[DateB]" }, "DateB", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Issues_DateB_Between(this SqlWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[DateB]" }, "DateB", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static IssuesWhereCollection DateC_Between(this IssuesWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[DateC]" }, "DateC", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Issues_DateC_Between(this SqlWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[DateC]" }, "DateC", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static IssuesWhereCollection DateD_Between(this IssuesWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[DateD]" }, "DateD", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Issues_DateD_Between(this SqlWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[DateD]" }, "DateD", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static IssuesWhereCollection DateE_Between(this IssuesWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[DateE]" }, "DateE", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Issues_DateE_Between(this SqlWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[DateE]" }, "DateE", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static IssuesWhereCollection DateF_Between(this IssuesWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[DateF]" }, "DateF", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Issues_DateF_Between(this SqlWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[DateF]" }, "DateF", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static IssuesWhereCollection DateG_Between(this IssuesWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[DateG]" }, "DateG", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Issues_DateG_Between(this SqlWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[DateG]" }, "DateG", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static IssuesWhereCollection DateH_Between(this IssuesWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[DateH]" }, "DateH", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Issues_DateH_Between(this SqlWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[DateH]" }, "DateH", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static IssuesWhereCollection DateI_Between(this IssuesWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[DateI]" }, "DateI", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Issues_DateI_Between(this SqlWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[DateI]" }, "DateI", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static IssuesWhereCollection DateJ_Between(this IssuesWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[DateJ]" }, "DateJ", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Issues_DateJ_Between(this SqlWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[DateJ]" }, "DateJ", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static IssuesWhereCollection DateK_Between(this IssuesWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[DateK]" }, "DateK", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Issues_DateK_Between(this SqlWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[DateK]" }, "DateK", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static IssuesWhereCollection DateL_Between(this IssuesWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[DateL]" }, "DateL", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Issues_DateL_Between(this SqlWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[DateL]" }, "DateL", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static IssuesWhereCollection DateM_Between(this IssuesWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[DateM]" }, "DateM", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Issues_DateM_Between(this SqlWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[DateM]" }, "DateM", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static IssuesWhereCollection DateN_Between(this IssuesWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[DateN]" }, "DateN", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Issues_DateN_Between(this SqlWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[DateN]" }, "DateN", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static IssuesWhereCollection DateO_Between(this IssuesWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[DateO]" }, "DateO", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Issues_DateO_Between(this SqlWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[DateO]" }, "DateO", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static IssuesWhereCollection DateP_Between(this IssuesWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[DateP]" }, "DateP", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Issues_DateP_Between(this SqlWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[DateP]" }, "DateP", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static IssuesWhereCollection CreatedTime_Between(this IssuesWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[CreatedTime]" }, "CreatedTime", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Issues_CreatedTime_Between(this SqlWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[CreatedTime]" }, "CreatedTime", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static IssuesWhereCollection Sub(this IssuesWhereCollection self, SqlStatement sub, object value = null, string _operator = "=", bool _using = true) { return self.Add(null, null, value, _operator, sub: sub, _using: _using); }
        public static IssuesWhereCollection Or(this IssuesWhereCollection self, SqlWhereCollection or, bool _using = true) { return self.Add(null, null, or: or, _using: _using); }
        public static IssuesGroupByCollection SiteId(this IssuesGroupByCollection self) { return self.Add("[t0].[SiteId]"); }
        public static SqlGroupByCollection Issues_SiteId(this SqlGroupByCollection self) { return self.Add("[t0].[SiteId]"); }
        public static IssuesGroupByCollection UpdatedTime(this IssuesGroupByCollection self) { return self.Add("[t0].[UpdatedTime]"); }
        public static SqlGroupByCollection Issues_UpdatedTime(this SqlGroupByCollection self) { return self.Add("[t0].[UpdatedTime]"); }
        public static IssuesGroupByCollection IssueId(this IssuesGroupByCollection self) { return self.Add("[t0].[IssueId]"); }
        public static SqlGroupByCollection Issues_IssueId(this SqlGroupByCollection self) { return self.Add("[t0].[IssueId]"); }
        public static IssuesGroupByCollection Ver(this IssuesGroupByCollection self) { return self.Add("[t0].[Ver]"); }
        public static SqlGroupByCollection Issues_Ver(this SqlGroupByCollection self) { return self.Add("[t0].[Ver]"); }
        public static IssuesGroupByCollection Title(this IssuesGroupByCollection self) { return self.Add("[t0].[Title]"); }
        public static SqlGroupByCollection Issues_Title(this SqlGroupByCollection self) { return self.Add("[t0].[Title]"); }
        public static IssuesGroupByCollection Body(this IssuesGroupByCollection self) { return self.Add("[t0].[Body]"); }
        public static SqlGroupByCollection Issues_Body(this SqlGroupByCollection self) { return self.Add("[t0].[Body]"); }
        public static IssuesGroupByCollection TitleBody(this IssuesGroupByCollection self) { return self.Add("[t0].[Title]", "[t0].[Body]"); }
        public static SqlGroupByCollection Issues_TitleBody(this SqlGroupByCollection self) { return self.Add("[t0].[Title]", "[t0].[Body]"); }
        public static IssuesGroupByCollection StartTime(this IssuesGroupByCollection self) { return self.Add("[t0].[StartTime]"); }
        public static SqlGroupByCollection Issues_StartTime(this SqlGroupByCollection self) { return self.Add("[t0].[StartTime]"); }
        public static IssuesGroupByCollection CompletionTime(this IssuesGroupByCollection self) { return self.Add("[t0].[CompletionTime]", "[t0].[Status]", "[t0].[UpdatedTime]"); }
        public static SqlGroupByCollection Issues_CompletionTime(this SqlGroupByCollection self) { return self.Add("[t0].[CompletionTime]", "[t0].[Status]", "[t0].[UpdatedTime]"); }
        public static IssuesGroupByCollection WorkValue(this IssuesGroupByCollection self) { return self.Add("[t0].[ProgressRate]", "[t0].[WorkValue]", "[t0].[UpdatedTime]"); }
        public static SqlGroupByCollection Issues_WorkValue(this SqlGroupByCollection self) { return self.Add("[t0].[ProgressRate]", "[t0].[WorkValue]", "[t0].[UpdatedTime]"); }
        public static IssuesGroupByCollection ProgressRate(this IssuesGroupByCollection self) { return self.Add("[t0].[CreatedTime]", "[t0].[StartTime]", "[t0].[CompletionTime]", "[t0].[ProgressRate]"); }
        public static SqlGroupByCollection Issues_ProgressRate(this SqlGroupByCollection self) { return self.Add("[t0].[CreatedTime]", "[t0].[StartTime]", "[t0].[CompletionTime]", "[t0].[ProgressRate]"); }
        public static IssuesGroupByCollection RemainingWorkValue(this IssuesGroupByCollection self) { return self.Add("[t0].[WorkValue] - ([t0].[WorkValue] * [t0].[ProgressRate] * 0.01)"); }
        public static SqlGroupByCollection Issues_RemainingWorkValue(this SqlGroupByCollection self) { return self.Add("[t0].[WorkValue] - ([t0].[WorkValue] * [t0].[ProgressRate] * 0.01)"); }
        public static IssuesGroupByCollection Status(this IssuesGroupByCollection self) { return self.Add("[t0].[Status]"); }
        public static SqlGroupByCollection Issues_Status(this SqlGroupByCollection self) { return self.Add("[t0].[Status]"); }
        public static IssuesGroupByCollection Manager(this IssuesGroupByCollection self) { return self.Add("[t0].[Manager]"); }
        public static SqlGroupByCollection Issues_Manager(this SqlGroupByCollection self) { return self.Add("[t0].[Manager]"); }
        public static IssuesGroupByCollection Owner(this IssuesGroupByCollection self) { return self.Add("[t0].[Owner]"); }
        public static SqlGroupByCollection Issues_Owner(this SqlGroupByCollection self) { return self.Add("[t0].[Owner]"); }
        public static IssuesGroupByCollection ClassA(this IssuesGroupByCollection self) { return self.Add("[t0].[ClassA]"); }
        public static SqlGroupByCollection Issues_ClassA(this SqlGroupByCollection self) { return self.Add("[t0].[ClassA]"); }
        public static IssuesGroupByCollection ClassB(this IssuesGroupByCollection self) { return self.Add("[t0].[ClassB]"); }
        public static SqlGroupByCollection Issues_ClassB(this SqlGroupByCollection self) { return self.Add("[t0].[ClassB]"); }
        public static IssuesGroupByCollection ClassC(this IssuesGroupByCollection self) { return self.Add("[t0].[ClassC]"); }
        public static SqlGroupByCollection Issues_ClassC(this SqlGroupByCollection self) { return self.Add("[t0].[ClassC]"); }
        public static IssuesGroupByCollection ClassD(this IssuesGroupByCollection self) { return self.Add("[t0].[ClassD]"); }
        public static SqlGroupByCollection Issues_ClassD(this SqlGroupByCollection self) { return self.Add("[t0].[ClassD]"); }
        public static IssuesGroupByCollection ClassE(this IssuesGroupByCollection self) { return self.Add("[t0].[ClassE]"); }
        public static SqlGroupByCollection Issues_ClassE(this SqlGroupByCollection self) { return self.Add("[t0].[ClassE]"); }
        public static IssuesGroupByCollection ClassF(this IssuesGroupByCollection self) { return self.Add("[t0].[ClassF]"); }
        public static SqlGroupByCollection Issues_ClassF(this SqlGroupByCollection self) { return self.Add("[t0].[ClassF]"); }
        public static IssuesGroupByCollection ClassG(this IssuesGroupByCollection self) { return self.Add("[t0].[ClassG]"); }
        public static SqlGroupByCollection Issues_ClassG(this SqlGroupByCollection self) { return self.Add("[t0].[ClassG]"); }
        public static IssuesGroupByCollection ClassH(this IssuesGroupByCollection self) { return self.Add("[t0].[ClassH]"); }
        public static SqlGroupByCollection Issues_ClassH(this SqlGroupByCollection self) { return self.Add("[t0].[ClassH]"); }
        public static IssuesGroupByCollection ClassI(this IssuesGroupByCollection self) { return self.Add("[t0].[ClassI]"); }
        public static SqlGroupByCollection Issues_ClassI(this SqlGroupByCollection self) { return self.Add("[t0].[ClassI]"); }
        public static IssuesGroupByCollection ClassJ(this IssuesGroupByCollection self) { return self.Add("[t0].[ClassJ]"); }
        public static SqlGroupByCollection Issues_ClassJ(this SqlGroupByCollection self) { return self.Add("[t0].[ClassJ]"); }
        public static IssuesGroupByCollection ClassK(this IssuesGroupByCollection self) { return self.Add("[t0].[ClassK]"); }
        public static SqlGroupByCollection Issues_ClassK(this SqlGroupByCollection self) { return self.Add("[t0].[ClassK]"); }
        public static IssuesGroupByCollection ClassL(this IssuesGroupByCollection self) { return self.Add("[t0].[ClassL]"); }
        public static SqlGroupByCollection Issues_ClassL(this SqlGroupByCollection self) { return self.Add("[t0].[ClassL]"); }
        public static IssuesGroupByCollection ClassM(this IssuesGroupByCollection self) { return self.Add("[t0].[ClassM]"); }
        public static SqlGroupByCollection Issues_ClassM(this SqlGroupByCollection self) { return self.Add("[t0].[ClassM]"); }
        public static IssuesGroupByCollection ClassN(this IssuesGroupByCollection self) { return self.Add("[t0].[ClassN]"); }
        public static SqlGroupByCollection Issues_ClassN(this SqlGroupByCollection self) { return self.Add("[t0].[ClassN]"); }
        public static IssuesGroupByCollection ClassO(this IssuesGroupByCollection self) { return self.Add("[t0].[ClassO]"); }
        public static SqlGroupByCollection Issues_ClassO(this SqlGroupByCollection self) { return self.Add("[t0].[ClassO]"); }
        public static IssuesGroupByCollection ClassP(this IssuesGroupByCollection self) { return self.Add("[t0].[ClassP]"); }
        public static SqlGroupByCollection Issues_ClassP(this SqlGroupByCollection self) { return self.Add("[t0].[ClassP]"); }
        public static IssuesGroupByCollection NumA(this IssuesGroupByCollection self) { return self.Add("[t0].[NumA]"); }
        public static SqlGroupByCollection Issues_NumA(this SqlGroupByCollection self) { return self.Add("[t0].[NumA]"); }
        public static IssuesGroupByCollection NumB(this IssuesGroupByCollection self) { return self.Add("[t0].[NumB]"); }
        public static SqlGroupByCollection Issues_NumB(this SqlGroupByCollection self) { return self.Add("[t0].[NumB]"); }
        public static IssuesGroupByCollection NumC(this IssuesGroupByCollection self) { return self.Add("[t0].[NumC]"); }
        public static SqlGroupByCollection Issues_NumC(this SqlGroupByCollection self) { return self.Add("[t0].[NumC]"); }
        public static IssuesGroupByCollection NumD(this IssuesGroupByCollection self) { return self.Add("[t0].[NumD]"); }
        public static SqlGroupByCollection Issues_NumD(this SqlGroupByCollection self) { return self.Add("[t0].[NumD]"); }
        public static IssuesGroupByCollection NumE(this IssuesGroupByCollection self) { return self.Add("[t0].[NumE]"); }
        public static SqlGroupByCollection Issues_NumE(this SqlGroupByCollection self) { return self.Add("[t0].[NumE]"); }
        public static IssuesGroupByCollection NumF(this IssuesGroupByCollection self) { return self.Add("[t0].[NumF]"); }
        public static SqlGroupByCollection Issues_NumF(this SqlGroupByCollection self) { return self.Add("[t0].[NumF]"); }
        public static IssuesGroupByCollection NumG(this IssuesGroupByCollection self) { return self.Add("[t0].[NumG]"); }
        public static SqlGroupByCollection Issues_NumG(this SqlGroupByCollection self) { return self.Add("[t0].[NumG]"); }
        public static IssuesGroupByCollection NumH(this IssuesGroupByCollection self) { return self.Add("[t0].[NumH]"); }
        public static SqlGroupByCollection Issues_NumH(this SqlGroupByCollection self) { return self.Add("[t0].[NumH]"); }
        public static IssuesGroupByCollection NumI(this IssuesGroupByCollection self) { return self.Add("[t0].[NumI]"); }
        public static SqlGroupByCollection Issues_NumI(this SqlGroupByCollection self) { return self.Add("[t0].[NumI]"); }
        public static IssuesGroupByCollection NumJ(this IssuesGroupByCollection self) { return self.Add("[t0].[NumJ]"); }
        public static SqlGroupByCollection Issues_NumJ(this SqlGroupByCollection self) { return self.Add("[t0].[NumJ]"); }
        public static IssuesGroupByCollection NumK(this IssuesGroupByCollection self) { return self.Add("[t0].[NumK]"); }
        public static SqlGroupByCollection Issues_NumK(this SqlGroupByCollection self) { return self.Add("[t0].[NumK]"); }
        public static IssuesGroupByCollection NumL(this IssuesGroupByCollection self) { return self.Add("[t0].[NumL]"); }
        public static SqlGroupByCollection Issues_NumL(this SqlGroupByCollection self) { return self.Add("[t0].[NumL]"); }
        public static IssuesGroupByCollection NumM(this IssuesGroupByCollection self) { return self.Add("[t0].[NumM]"); }
        public static SqlGroupByCollection Issues_NumM(this SqlGroupByCollection self) { return self.Add("[t0].[NumM]"); }
        public static IssuesGroupByCollection NumN(this IssuesGroupByCollection self) { return self.Add("[t0].[NumN]"); }
        public static SqlGroupByCollection Issues_NumN(this SqlGroupByCollection self) { return self.Add("[t0].[NumN]"); }
        public static IssuesGroupByCollection NumO(this IssuesGroupByCollection self) { return self.Add("[t0].[NumO]"); }
        public static SqlGroupByCollection Issues_NumO(this SqlGroupByCollection self) { return self.Add("[t0].[NumO]"); }
        public static IssuesGroupByCollection NumP(this IssuesGroupByCollection self) { return self.Add("[t0].[NumP]"); }
        public static SqlGroupByCollection Issues_NumP(this SqlGroupByCollection self) { return self.Add("[t0].[NumP]"); }
        public static IssuesGroupByCollection DateA(this IssuesGroupByCollection self) { return self.Add("[t0].[DateA]"); }
        public static SqlGroupByCollection Issues_DateA(this SqlGroupByCollection self) { return self.Add("[t0].[DateA]"); }
        public static IssuesGroupByCollection DateB(this IssuesGroupByCollection self) { return self.Add("[t0].[DateB]"); }
        public static SqlGroupByCollection Issues_DateB(this SqlGroupByCollection self) { return self.Add("[t0].[DateB]"); }
        public static IssuesGroupByCollection DateC(this IssuesGroupByCollection self) { return self.Add("[t0].[DateC]"); }
        public static SqlGroupByCollection Issues_DateC(this SqlGroupByCollection self) { return self.Add("[t0].[DateC]"); }
        public static IssuesGroupByCollection DateD(this IssuesGroupByCollection self) { return self.Add("[t0].[DateD]"); }
        public static SqlGroupByCollection Issues_DateD(this SqlGroupByCollection self) { return self.Add("[t0].[DateD]"); }
        public static IssuesGroupByCollection DateE(this IssuesGroupByCollection self) { return self.Add("[t0].[DateE]"); }
        public static SqlGroupByCollection Issues_DateE(this SqlGroupByCollection self) { return self.Add("[t0].[DateE]"); }
        public static IssuesGroupByCollection DateF(this IssuesGroupByCollection self) { return self.Add("[t0].[DateF]"); }
        public static SqlGroupByCollection Issues_DateF(this SqlGroupByCollection self) { return self.Add("[t0].[DateF]"); }
        public static IssuesGroupByCollection DateG(this IssuesGroupByCollection self) { return self.Add("[t0].[DateG]"); }
        public static SqlGroupByCollection Issues_DateG(this SqlGroupByCollection self) { return self.Add("[t0].[DateG]"); }
        public static IssuesGroupByCollection DateH(this IssuesGroupByCollection self) { return self.Add("[t0].[DateH]"); }
        public static SqlGroupByCollection Issues_DateH(this SqlGroupByCollection self) { return self.Add("[t0].[DateH]"); }
        public static IssuesGroupByCollection DateI(this IssuesGroupByCollection self) { return self.Add("[t0].[DateI]"); }
        public static SqlGroupByCollection Issues_DateI(this SqlGroupByCollection self) { return self.Add("[t0].[DateI]"); }
        public static IssuesGroupByCollection DateJ(this IssuesGroupByCollection self) { return self.Add("[t0].[DateJ]"); }
        public static SqlGroupByCollection Issues_DateJ(this SqlGroupByCollection self) { return self.Add("[t0].[DateJ]"); }
        public static IssuesGroupByCollection DateK(this IssuesGroupByCollection self) { return self.Add("[t0].[DateK]"); }
        public static SqlGroupByCollection Issues_DateK(this SqlGroupByCollection self) { return self.Add("[t0].[DateK]"); }
        public static IssuesGroupByCollection DateL(this IssuesGroupByCollection self) { return self.Add("[t0].[DateL]"); }
        public static SqlGroupByCollection Issues_DateL(this SqlGroupByCollection self) { return self.Add("[t0].[DateL]"); }
        public static IssuesGroupByCollection DateM(this IssuesGroupByCollection self) { return self.Add("[t0].[DateM]"); }
        public static SqlGroupByCollection Issues_DateM(this SqlGroupByCollection self) { return self.Add("[t0].[DateM]"); }
        public static IssuesGroupByCollection DateN(this IssuesGroupByCollection self) { return self.Add("[t0].[DateN]"); }
        public static SqlGroupByCollection Issues_DateN(this SqlGroupByCollection self) { return self.Add("[t0].[DateN]"); }
        public static IssuesGroupByCollection DateO(this IssuesGroupByCollection self) { return self.Add("[t0].[DateO]"); }
        public static SqlGroupByCollection Issues_DateO(this SqlGroupByCollection self) { return self.Add("[t0].[DateO]"); }
        public static IssuesGroupByCollection DateP(this IssuesGroupByCollection self) { return self.Add("[t0].[DateP]"); }
        public static SqlGroupByCollection Issues_DateP(this SqlGroupByCollection self) { return self.Add("[t0].[DateP]"); }
        public static IssuesGroupByCollection DescriptionA(this IssuesGroupByCollection self) { return self.Add("[t0].[DescriptionA]"); }
        public static SqlGroupByCollection Issues_DescriptionA(this SqlGroupByCollection self) { return self.Add("[t0].[DescriptionA]"); }
        public static IssuesGroupByCollection DescriptionB(this IssuesGroupByCollection self) { return self.Add("[t0].[DescriptionB]"); }
        public static SqlGroupByCollection Issues_DescriptionB(this SqlGroupByCollection self) { return self.Add("[t0].[DescriptionB]"); }
        public static IssuesGroupByCollection DescriptionC(this IssuesGroupByCollection self) { return self.Add("[t0].[DescriptionC]"); }
        public static SqlGroupByCollection Issues_DescriptionC(this SqlGroupByCollection self) { return self.Add("[t0].[DescriptionC]"); }
        public static IssuesGroupByCollection DescriptionD(this IssuesGroupByCollection self) { return self.Add("[t0].[DescriptionD]"); }
        public static SqlGroupByCollection Issues_DescriptionD(this SqlGroupByCollection self) { return self.Add("[t0].[DescriptionD]"); }
        public static IssuesGroupByCollection DescriptionE(this IssuesGroupByCollection self) { return self.Add("[t0].[DescriptionE]"); }
        public static SqlGroupByCollection Issues_DescriptionE(this SqlGroupByCollection self) { return self.Add("[t0].[DescriptionE]"); }
        public static IssuesGroupByCollection DescriptionF(this IssuesGroupByCollection self) { return self.Add("[t0].[DescriptionF]"); }
        public static SqlGroupByCollection Issues_DescriptionF(this SqlGroupByCollection self) { return self.Add("[t0].[DescriptionF]"); }
        public static IssuesGroupByCollection DescriptionG(this IssuesGroupByCollection self) { return self.Add("[t0].[DescriptionG]"); }
        public static SqlGroupByCollection Issues_DescriptionG(this SqlGroupByCollection self) { return self.Add("[t0].[DescriptionG]"); }
        public static IssuesGroupByCollection DescriptionH(this IssuesGroupByCollection self) { return self.Add("[t0].[DescriptionH]"); }
        public static SqlGroupByCollection Issues_DescriptionH(this SqlGroupByCollection self) { return self.Add("[t0].[DescriptionH]"); }
        public static IssuesGroupByCollection DescriptionI(this IssuesGroupByCollection self) { return self.Add("[t0].[DescriptionI]"); }
        public static SqlGroupByCollection Issues_DescriptionI(this SqlGroupByCollection self) { return self.Add("[t0].[DescriptionI]"); }
        public static IssuesGroupByCollection DescriptionJ(this IssuesGroupByCollection self) { return self.Add("[t0].[DescriptionJ]"); }
        public static SqlGroupByCollection Issues_DescriptionJ(this SqlGroupByCollection self) { return self.Add("[t0].[DescriptionJ]"); }
        public static IssuesGroupByCollection DescriptionK(this IssuesGroupByCollection self) { return self.Add("[t0].[DescriptionK]"); }
        public static SqlGroupByCollection Issues_DescriptionK(this SqlGroupByCollection self) { return self.Add("[t0].[DescriptionK]"); }
        public static IssuesGroupByCollection DescriptionL(this IssuesGroupByCollection self) { return self.Add("[t0].[DescriptionL]"); }
        public static SqlGroupByCollection Issues_DescriptionL(this SqlGroupByCollection self) { return self.Add("[t0].[DescriptionL]"); }
        public static IssuesGroupByCollection DescriptionM(this IssuesGroupByCollection self) { return self.Add("[t0].[DescriptionM]"); }
        public static SqlGroupByCollection Issues_DescriptionM(this SqlGroupByCollection self) { return self.Add("[t0].[DescriptionM]"); }
        public static IssuesGroupByCollection DescriptionN(this IssuesGroupByCollection self) { return self.Add("[t0].[DescriptionN]"); }
        public static SqlGroupByCollection Issues_DescriptionN(this SqlGroupByCollection self) { return self.Add("[t0].[DescriptionN]"); }
        public static IssuesGroupByCollection DescriptionO(this IssuesGroupByCollection self) { return self.Add("[t0].[DescriptionO]"); }
        public static SqlGroupByCollection Issues_DescriptionO(this SqlGroupByCollection self) { return self.Add("[t0].[DescriptionO]"); }
        public static IssuesGroupByCollection DescriptionP(this IssuesGroupByCollection self) { return self.Add("[t0].[DescriptionP]"); }
        public static SqlGroupByCollection Issues_DescriptionP(this SqlGroupByCollection self) { return self.Add("[t0].[DescriptionP]"); }
        public static IssuesGroupByCollection CheckA(this IssuesGroupByCollection self) { return self.Add("[t0].[CheckA]"); }
        public static SqlGroupByCollection Issues_CheckA(this SqlGroupByCollection self) { return self.Add("[t0].[CheckA]"); }
        public static IssuesGroupByCollection CheckB(this IssuesGroupByCollection self) { return self.Add("[t0].[CheckB]"); }
        public static SqlGroupByCollection Issues_CheckB(this SqlGroupByCollection self) { return self.Add("[t0].[CheckB]"); }
        public static IssuesGroupByCollection CheckC(this IssuesGroupByCollection self) { return self.Add("[t0].[CheckC]"); }
        public static SqlGroupByCollection Issues_CheckC(this SqlGroupByCollection self) { return self.Add("[t0].[CheckC]"); }
        public static IssuesGroupByCollection CheckD(this IssuesGroupByCollection self) { return self.Add("[t0].[CheckD]"); }
        public static SqlGroupByCollection Issues_CheckD(this SqlGroupByCollection self) { return self.Add("[t0].[CheckD]"); }
        public static IssuesGroupByCollection CheckE(this IssuesGroupByCollection self) { return self.Add("[t0].[CheckE]"); }
        public static SqlGroupByCollection Issues_CheckE(this SqlGroupByCollection self) { return self.Add("[t0].[CheckE]"); }
        public static IssuesGroupByCollection CheckF(this IssuesGroupByCollection self) { return self.Add("[t0].[CheckF]"); }
        public static SqlGroupByCollection Issues_CheckF(this SqlGroupByCollection self) { return self.Add("[t0].[CheckF]"); }
        public static IssuesGroupByCollection CheckG(this IssuesGroupByCollection self) { return self.Add("[t0].[CheckG]"); }
        public static SqlGroupByCollection Issues_CheckG(this SqlGroupByCollection self) { return self.Add("[t0].[CheckG]"); }
        public static IssuesGroupByCollection CheckH(this IssuesGroupByCollection self) { return self.Add("[t0].[CheckH]"); }
        public static SqlGroupByCollection Issues_CheckH(this SqlGroupByCollection self) { return self.Add("[t0].[CheckH]"); }
        public static IssuesGroupByCollection CheckI(this IssuesGroupByCollection self) { return self.Add("[t0].[CheckI]"); }
        public static SqlGroupByCollection Issues_CheckI(this SqlGroupByCollection self) { return self.Add("[t0].[CheckI]"); }
        public static IssuesGroupByCollection CheckJ(this IssuesGroupByCollection self) { return self.Add("[t0].[CheckJ]"); }
        public static SqlGroupByCollection Issues_CheckJ(this SqlGroupByCollection self) { return self.Add("[t0].[CheckJ]"); }
        public static IssuesGroupByCollection CheckK(this IssuesGroupByCollection self) { return self.Add("[t0].[CheckK]"); }
        public static SqlGroupByCollection Issues_CheckK(this SqlGroupByCollection self) { return self.Add("[t0].[CheckK]"); }
        public static IssuesGroupByCollection CheckL(this IssuesGroupByCollection self) { return self.Add("[t0].[CheckL]"); }
        public static SqlGroupByCollection Issues_CheckL(this SqlGroupByCollection self) { return self.Add("[t0].[CheckL]"); }
        public static IssuesGroupByCollection CheckM(this IssuesGroupByCollection self) { return self.Add("[t0].[CheckM]"); }
        public static SqlGroupByCollection Issues_CheckM(this SqlGroupByCollection self) { return self.Add("[t0].[CheckM]"); }
        public static IssuesGroupByCollection CheckN(this IssuesGroupByCollection self) { return self.Add("[t0].[CheckN]"); }
        public static SqlGroupByCollection Issues_CheckN(this SqlGroupByCollection self) { return self.Add("[t0].[CheckN]"); }
        public static IssuesGroupByCollection CheckO(this IssuesGroupByCollection self) { return self.Add("[t0].[CheckO]"); }
        public static SqlGroupByCollection Issues_CheckO(this SqlGroupByCollection self) { return self.Add("[t0].[CheckO]"); }
        public static IssuesGroupByCollection CheckP(this IssuesGroupByCollection self) { return self.Add("[t0].[CheckP]"); }
        public static SqlGroupByCollection Issues_CheckP(this SqlGroupByCollection self) { return self.Add("[t0].[CheckP]"); }
        public static IssuesGroupByCollection Comments(this IssuesGroupByCollection self) { return self.Add("[t0].[Comments]"); }
        public static SqlGroupByCollection Issues_Comments(this SqlGroupByCollection self) { return self.Add("[t0].[Comments]"); }
        public static IssuesGroupByCollection Creator(this IssuesGroupByCollection self) { return self.Add("[t0].[Creator]"); }
        public static SqlGroupByCollection Issues_Creator(this SqlGroupByCollection self) { return self.Add("[t0].[Creator]"); }
        public static IssuesGroupByCollection Updator(this IssuesGroupByCollection self) { return self.Add("[t0].[Updator]"); }
        public static SqlGroupByCollection Issues_Updator(this SqlGroupByCollection self) { return self.Add("[t0].[Updator]"); }
        public static IssuesGroupByCollection CreatedTime(this IssuesGroupByCollection self) { return self.Add("[t0].[CreatedTime]"); }
        public static SqlGroupByCollection Issues_CreatedTime(this SqlGroupByCollection self) { return self.Add("[t0].[CreatedTime]"); }
        public static IssuesHavingCollection IssuesCount(this IssuesHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "count(*)", name: "IssuesCount", value: value, _operator: _operator); }
        public static IssuesHavingCollection WorkValueTotal(this IssuesHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "sum([t0].[WorkValue])", name: "WorkValueTotal", value: value, _operator: _operator); }
        public static SqlHavingCollection Issues_WorkValueTotal(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "sum([t0].[WorkValue])", name: "WorkValueTotal", value: value, _operator: _operator); }
        public static IssuesHavingCollection WorkValueAverage(this IssuesHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "avg([t0].[WorkValue])", name: "WorkValueAverage", value: value, _operator: _operator); }
        public static SqlHavingCollection Issues_WorkValueAverage(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "avg([t0].[WorkValue])", name: "WorkValueAverage", value: value, _operator: _operator); }
        public static IssuesHavingCollection RemainingWorkValueTotal(this IssuesHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "sum([t0].[WorkValue] - ([t0].[WorkValue] * [t0].[ProgressRate] * 0.01))", name: "RemainingWorkValueTotal", value: value, _operator: _operator); }
        public static SqlHavingCollection Issues_RemainingWorkValueTotal(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "sum([t0].[WorkValue] - ([t0].[WorkValue] * [t0].[ProgressRate] * 0.01))", name: "RemainingWorkValueTotal", value: value, _operator: _operator); }
        public static IssuesHavingCollection RemainingWorkValueAverage(this IssuesHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "avg([t0].[WorkValue] - ([t0].[WorkValue] * [t0].[ProgressRate] * 0.01))", name: "RemainingWorkValueAverage", value: value, _operator: _operator); }
        public static SqlHavingCollection Issues_RemainingWorkValueAverage(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "avg([t0].[WorkValue] - ([t0].[WorkValue] * [t0].[ProgressRate] * 0.01))", name: "RemainingWorkValueAverage", value: value, _operator: _operator); }
        public static IssuesHavingCollection NumATotal(this IssuesHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "sum([t0].[NumA])", name: "NumATotal", value: value, _operator: _operator); }
        public static SqlHavingCollection Issues_NumATotal(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "sum([t0].[NumA])", name: "NumATotal", value: value, _operator: _operator); }
        public static IssuesHavingCollection NumAAverage(this IssuesHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "avg([t0].[NumA])", name: "NumAAverage", value: value, _operator: _operator); }
        public static SqlHavingCollection Issues_NumAAverage(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "avg([t0].[NumA])", name: "NumAAverage", value: value, _operator: _operator); }
        public static IssuesHavingCollection NumBTotal(this IssuesHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "sum([t0].[NumB])", name: "NumBTotal", value: value, _operator: _operator); }
        public static SqlHavingCollection Issues_NumBTotal(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "sum([t0].[NumB])", name: "NumBTotal", value: value, _operator: _operator); }
        public static IssuesHavingCollection NumBAverage(this IssuesHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "avg([t0].[NumB])", name: "NumBAverage", value: value, _operator: _operator); }
        public static SqlHavingCollection Issues_NumBAverage(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "avg([t0].[NumB])", name: "NumBAverage", value: value, _operator: _operator); }
        public static IssuesHavingCollection NumCTotal(this IssuesHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "sum([t0].[NumC])", name: "NumCTotal", value: value, _operator: _operator); }
        public static SqlHavingCollection Issues_NumCTotal(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "sum([t0].[NumC])", name: "NumCTotal", value: value, _operator: _operator); }
        public static IssuesHavingCollection NumCAverage(this IssuesHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "avg([t0].[NumC])", name: "NumCAverage", value: value, _operator: _operator); }
        public static SqlHavingCollection Issues_NumCAverage(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "avg([t0].[NumC])", name: "NumCAverage", value: value, _operator: _operator); }
        public static IssuesHavingCollection NumDTotal(this IssuesHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "sum([t0].[NumD])", name: "NumDTotal", value: value, _operator: _operator); }
        public static SqlHavingCollection Issues_NumDTotal(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "sum([t0].[NumD])", name: "NumDTotal", value: value, _operator: _operator); }
        public static IssuesHavingCollection NumDAverage(this IssuesHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "avg([t0].[NumD])", name: "NumDAverage", value: value, _operator: _operator); }
        public static SqlHavingCollection Issues_NumDAverage(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "avg([t0].[NumD])", name: "NumDAverage", value: value, _operator: _operator); }
        public static IssuesHavingCollection NumETotal(this IssuesHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "sum([t0].[NumE])", name: "NumETotal", value: value, _operator: _operator); }
        public static SqlHavingCollection Issues_NumETotal(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "sum([t0].[NumE])", name: "NumETotal", value: value, _operator: _operator); }
        public static IssuesHavingCollection NumEAverage(this IssuesHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "avg([t0].[NumE])", name: "NumEAverage", value: value, _operator: _operator); }
        public static SqlHavingCollection Issues_NumEAverage(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "avg([t0].[NumE])", name: "NumEAverage", value: value, _operator: _operator); }
        public static IssuesHavingCollection NumFTotal(this IssuesHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "sum([t0].[NumF])", name: "NumFTotal", value: value, _operator: _operator); }
        public static SqlHavingCollection Issues_NumFTotal(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "sum([t0].[NumF])", name: "NumFTotal", value: value, _operator: _operator); }
        public static IssuesHavingCollection NumFAverage(this IssuesHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "avg([t0].[NumF])", name: "NumFAverage", value: value, _operator: _operator); }
        public static SqlHavingCollection Issues_NumFAverage(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "avg([t0].[NumF])", name: "NumFAverage", value: value, _operator: _operator); }
        public static IssuesHavingCollection NumGTotal(this IssuesHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "sum([t0].[NumG])", name: "NumGTotal", value: value, _operator: _operator); }
        public static SqlHavingCollection Issues_NumGTotal(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "sum([t0].[NumG])", name: "NumGTotal", value: value, _operator: _operator); }
        public static IssuesHavingCollection NumGAverage(this IssuesHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "avg([t0].[NumG])", name: "NumGAverage", value: value, _operator: _operator); }
        public static SqlHavingCollection Issues_NumGAverage(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "avg([t0].[NumG])", name: "NumGAverage", value: value, _operator: _operator); }
        public static IssuesHavingCollection NumHTotal(this IssuesHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "sum([t0].[NumH])", name: "NumHTotal", value: value, _operator: _operator); }
        public static SqlHavingCollection Issues_NumHTotal(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "sum([t0].[NumH])", name: "NumHTotal", value: value, _operator: _operator); }
        public static IssuesHavingCollection NumHAverage(this IssuesHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "avg([t0].[NumH])", name: "NumHAverage", value: value, _operator: _operator); }
        public static SqlHavingCollection Issues_NumHAverage(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "avg([t0].[NumH])", name: "NumHAverage", value: value, _operator: _operator); }
        public static IssuesHavingCollection NumITotal(this IssuesHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "sum([t0].[NumI])", name: "NumITotal", value: value, _operator: _operator); }
        public static SqlHavingCollection Issues_NumITotal(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "sum([t0].[NumI])", name: "NumITotal", value: value, _operator: _operator); }
        public static IssuesHavingCollection NumIAverage(this IssuesHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "avg([t0].[NumI])", name: "NumIAverage", value: value, _operator: _operator); }
        public static SqlHavingCollection Issues_NumIAverage(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "avg([t0].[NumI])", name: "NumIAverage", value: value, _operator: _operator); }
        public static IssuesHavingCollection NumJTotal(this IssuesHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "sum([t0].[NumJ])", name: "NumJTotal", value: value, _operator: _operator); }
        public static SqlHavingCollection Issues_NumJTotal(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "sum([t0].[NumJ])", name: "NumJTotal", value: value, _operator: _operator); }
        public static IssuesHavingCollection NumJAverage(this IssuesHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "avg([t0].[NumJ])", name: "NumJAverage", value: value, _operator: _operator); }
        public static SqlHavingCollection Issues_NumJAverage(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "avg([t0].[NumJ])", name: "NumJAverage", value: value, _operator: _operator); }
        public static IssuesHavingCollection NumKTotal(this IssuesHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "sum([t0].[NumK])", name: "NumKTotal", value: value, _operator: _operator); }
        public static SqlHavingCollection Issues_NumKTotal(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "sum([t0].[NumK])", name: "NumKTotal", value: value, _operator: _operator); }
        public static IssuesHavingCollection NumKAverage(this IssuesHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "avg([t0].[NumK])", name: "NumKAverage", value: value, _operator: _operator); }
        public static SqlHavingCollection Issues_NumKAverage(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "avg([t0].[NumK])", name: "NumKAverage", value: value, _operator: _operator); }
        public static IssuesHavingCollection NumLTotal(this IssuesHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "sum([t0].[NumL])", name: "NumLTotal", value: value, _operator: _operator); }
        public static SqlHavingCollection Issues_NumLTotal(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "sum([t0].[NumL])", name: "NumLTotal", value: value, _operator: _operator); }
        public static IssuesHavingCollection NumLAverage(this IssuesHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "avg([t0].[NumL])", name: "NumLAverage", value: value, _operator: _operator); }
        public static SqlHavingCollection Issues_NumLAverage(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "avg([t0].[NumL])", name: "NumLAverage", value: value, _operator: _operator); }
        public static IssuesHavingCollection NumMTotal(this IssuesHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "sum([t0].[NumM])", name: "NumMTotal", value: value, _operator: _operator); }
        public static SqlHavingCollection Issues_NumMTotal(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "sum([t0].[NumM])", name: "NumMTotal", value: value, _operator: _operator); }
        public static IssuesHavingCollection NumMAverage(this IssuesHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "avg([t0].[NumM])", name: "NumMAverage", value: value, _operator: _operator); }
        public static SqlHavingCollection Issues_NumMAverage(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "avg([t0].[NumM])", name: "NumMAverage", value: value, _operator: _operator); }
        public static IssuesHavingCollection NumNTotal(this IssuesHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "sum([t0].[NumN])", name: "NumNTotal", value: value, _operator: _operator); }
        public static SqlHavingCollection Issues_NumNTotal(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "sum([t0].[NumN])", name: "NumNTotal", value: value, _operator: _operator); }
        public static IssuesHavingCollection NumNAverage(this IssuesHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "avg([t0].[NumN])", name: "NumNAverage", value: value, _operator: _operator); }
        public static SqlHavingCollection Issues_NumNAverage(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "avg([t0].[NumN])", name: "NumNAverage", value: value, _operator: _operator); }
        public static IssuesHavingCollection NumOTotal(this IssuesHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "sum([t0].[NumO])", name: "NumOTotal", value: value, _operator: _operator); }
        public static SqlHavingCollection Issues_NumOTotal(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "sum([t0].[NumO])", name: "NumOTotal", value: value, _operator: _operator); }
        public static IssuesHavingCollection NumOAverage(this IssuesHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "avg([t0].[NumO])", name: "NumOAverage", value: value, _operator: _operator); }
        public static SqlHavingCollection Issues_NumOAverage(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "avg([t0].[NumO])", name: "NumOAverage", value: value, _operator: _operator); }
        public static IssuesHavingCollection NumPTotal(this IssuesHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "sum([t0].[NumP])", name: "NumPTotal", value: value, _operator: _operator); }
        public static SqlHavingCollection Issues_NumPTotal(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "sum([t0].[NumP])", name: "NumPTotal", value: value, _operator: _operator); }
        public static IssuesHavingCollection NumPAverage(this IssuesHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "avg([t0].[NumP])", name: "NumPAverage", value: value, _operator: _operator); }
        public static SqlHavingCollection Issues_NumPAverage(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "avg([t0].[NumP])", name: "NumPAverage", value: value, _operator: _operator); }
        public static IssuesHavingCollection WorkValueMax(this IssuesHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[WorkValue])", name: "WorkValueMax", value: value, _operator: _operator); }
        public static SqlHavingCollection Issues_WorkValueMax(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[WorkValue])", name: "WorkValueMax", value: value, _operator: _operator); }
        public static IssuesHavingCollection WorkValueMin(this IssuesHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[WorkValue])", name: "WorkValueMin", value: value, _operator: _operator); }
        public static SqlHavingCollection Issues_WorkValueMin(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[WorkValue])", name: "WorkValueMin", value: value, _operator: _operator); }
        public static IssuesHavingCollection RemainingWorkValueMax(this IssuesHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[WorkValue] - ([t0].[WorkValue] * [t0].[ProgressRate] * 0.01))", name: "RemainingWorkValueMax", value: value, _operator: _operator); }
        public static SqlHavingCollection Issues_RemainingWorkValueMax(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[WorkValue] - ([t0].[WorkValue] * [t0].[ProgressRate] * 0.01))", name: "RemainingWorkValueMax", value: value, _operator: _operator); }
        public static IssuesHavingCollection RemainingWorkValueMin(this IssuesHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[WorkValue] - ([t0].[WorkValue] * [t0].[ProgressRate] * 0.01))", name: "RemainingWorkValueMin", value: value, _operator: _operator); }
        public static SqlHavingCollection Issues_RemainingWorkValueMin(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[WorkValue] - ([t0].[WorkValue] * [t0].[ProgressRate] * 0.01))", name: "RemainingWorkValueMin", value: value, _operator: _operator); }
        public static IssuesHavingCollection NumAMax(this IssuesHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[NumA])", name: "NumAMax", value: value, _operator: _operator); }
        public static SqlHavingCollection Issues_NumAMax(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[NumA])", name: "NumAMax", value: value, _operator: _operator); }
        public static IssuesHavingCollection NumAMin(this IssuesHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[NumA])", name: "NumAMin", value: value, _operator: _operator); }
        public static SqlHavingCollection Issues_NumAMin(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[NumA])", name: "NumAMin", value: value, _operator: _operator); }
        public static IssuesHavingCollection NumBMax(this IssuesHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[NumB])", name: "NumBMax", value: value, _operator: _operator); }
        public static SqlHavingCollection Issues_NumBMax(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[NumB])", name: "NumBMax", value: value, _operator: _operator); }
        public static IssuesHavingCollection NumBMin(this IssuesHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[NumB])", name: "NumBMin", value: value, _operator: _operator); }
        public static SqlHavingCollection Issues_NumBMin(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[NumB])", name: "NumBMin", value: value, _operator: _operator); }
        public static IssuesHavingCollection NumCMax(this IssuesHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[NumC])", name: "NumCMax", value: value, _operator: _operator); }
        public static SqlHavingCollection Issues_NumCMax(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[NumC])", name: "NumCMax", value: value, _operator: _operator); }
        public static IssuesHavingCollection NumCMin(this IssuesHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[NumC])", name: "NumCMin", value: value, _operator: _operator); }
        public static SqlHavingCollection Issues_NumCMin(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[NumC])", name: "NumCMin", value: value, _operator: _operator); }
        public static IssuesHavingCollection NumDMax(this IssuesHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[NumD])", name: "NumDMax", value: value, _operator: _operator); }
        public static SqlHavingCollection Issues_NumDMax(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[NumD])", name: "NumDMax", value: value, _operator: _operator); }
        public static IssuesHavingCollection NumDMin(this IssuesHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[NumD])", name: "NumDMin", value: value, _operator: _operator); }
        public static SqlHavingCollection Issues_NumDMin(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[NumD])", name: "NumDMin", value: value, _operator: _operator); }
        public static IssuesHavingCollection NumEMax(this IssuesHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[NumE])", name: "NumEMax", value: value, _operator: _operator); }
        public static SqlHavingCollection Issues_NumEMax(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[NumE])", name: "NumEMax", value: value, _operator: _operator); }
        public static IssuesHavingCollection NumEMin(this IssuesHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[NumE])", name: "NumEMin", value: value, _operator: _operator); }
        public static SqlHavingCollection Issues_NumEMin(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[NumE])", name: "NumEMin", value: value, _operator: _operator); }
        public static IssuesHavingCollection NumFMax(this IssuesHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[NumF])", name: "NumFMax", value: value, _operator: _operator); }
        public static SqlHavingCollection Issues_NumFMax(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[NumF])", name: "NumFMax", value: value, _operator: _operator); }
        public static IssuesHavingCollection NumFMin(this IssuesHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[NumF])", name: "NumFMin", value: value, _operator: _operator); }
        public static SqlHavingCollection Issues_NumFMin(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[NumF])", name: "NumFMin", value: value, _operator: _operator); }
        public static IssuesHavingCollection NumGMax(this IssuesHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[NumG])", name: "NumGMax", value: value, _operator: _operator); }
        public static SqlHavingCollection Issues_NumGMax(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[NumG])", name: "NumGMax", value: value, _operator: _operator); }
        public static IssuesHavingCollection NumGMin(this IssuesHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[NumG])", name: "NumGMin", value: value, _operator: _operator); }
        public static SqlHavingCollection Issues_NumGMin(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[NumG])", name: "NumGMin", value: value, _operator: _operator); }
        public static IssuesHavingCollection NumHMax(this IssuesHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[NumH])", name: "NumHMax", value: value, _operator: _operator); }
        public static SqlHavingCollection Issues_NumHMax(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[NumH])", name: "NumHMax", value: value, _operator: _operator); }
        public static IssuesHavingCollection NumHMin(this IssuesHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[NumH])", name: "NumHMin", value: value, _operator: _operator); }
        public static SqlHavingCollection Issues_NumHMin(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[NumH])", name: "NumHMin", value: value, _operator: _operator); }
        public static IssuesHavingCollection NumIMax(this IssuesHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[NumI])", name: "NumIMax", value: value, _operator: _operator); }
        public static SqlHavingCollection Issues_NumIMax(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[NumI])", name: "NumIMax", value: value, _operator: _operator); }
        public static IssuesHavingCollection NumIMin(this IssuesHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[NumI])", name: "NumIMin", value: value, _operator: _operator); }
        public static SqlHavingCollection Issues_NumIMin(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[NumI])", name: "NumIMin", value: value, _operator: _operator); }
        public static IssuesHavingCollection NumJMax(this IssuesHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[NumJ])", name: "NumJMax", value: value, _operator: _operator); }
        public static SqlHavingCollection Issues_NumJMax(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[NumJ])", name: "NumJMax", value: value, _operator: _operator); }
        public static IssuesHavingCollection NumJMin(this IssuesHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[NumJ])", name: "NumJMin", value: value, _operator: _operator); }
        public static SqlHavingCollection Issues_NumJMin(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[NumJ])", name: "NumJMin", value: value, _operator: _operator); }
        public static IssuesHavingCollection NumKMax(this IssuesHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[NumK])", name: "NumKMax", value: value, _operator: _operator); }
        public static SqlHavingCollection Issues_NumKMax(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[NumK])", name: "NumKMax", value: value, _operator: _operator); }
        public static IssuesHavingCollection NumKMin(this IssuesHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[NumK])", name: "NumKMin", value: value, _operator: _operator); }
        public static SqlHavingCollection Issues_NumKMin(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[NumK])", name: "NumKMin", value: value, _operator: _operator); }
        public static IssuesHavingCollection NumLMax(this IssuesHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[NumL])", name: "NumLMax", value: value, _operator: _operator); }
        public static SqlHavingCollection Issues_NumLMax(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[NumL])", name: "NumLMax", value: value, _operator: _operator); }
        public static IssuesHavingCollection NumLMin(this IssuesHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[NumL])", name: "NumLMin", value: value, _operator: _operator); }
        public static SqlHavingCollection Issues_NumLMin(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[NumL])", name: "NumLMin", value: value, _operator: _operator); }
        public static IssuesHavingCollection NumMMax(this IssuesHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[NumM])", name: "NumMMax", value: value, _operator: _operator); }
        public static SqlHavingCollection Issues_NumMMax(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[NumM])", name: "NumMMax", value: value, _operator: _operator); }
        public static IssuesHavingCollection NumMMin(this IssuesHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[NumM])", name: "NumMMin", value: value, _operator: _operator); }
        public static SqlHavingCollection Issues_NumMMin(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[NumM])", name: "NumMMin", value: value, _operator: _operator); }
        public static IssuesHavingCollection NumNMax(this IssuesHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[NumN])", name: "NumNMax", value: value, _operator: _operator); }
        public static SqlHavingCollection Issues_NumNMax(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[NumN])", name: "NumNMax", value: value, _operator: _operator); }
        public static IssuesHavingCollection NumNMin(this IssuesHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[NumN])", name: "NumNMin", value: value, _operator: _operator); }
        public static SqlHavingCollection Issues_NumNMin(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[NumN])", name: "NumNMin", value: value, _operator: _operator); }
        public static IssuesHavingCollection NumOMax(this IssuesHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[NumO])", name: "NumOMax", value: value, _operator: _operator); }
        public static SqlHavingCollection Issues_NumOMax(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[NumO])", name: "NumOMax", value: value, _operator: _operator); }
        public static IssuesHavingCollection NumOMin(this IssuesHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[NumO])", name: "NumOMin", value: value, _operator: _operator); }
        public static SqlHavingCollection Issues_NumOMin(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[NumO])", name: "NumOMin", value: value, _operator: _operator); }
        public static IssuesHavingCollection NumPMax(this IssuesHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[NumP])", name: "NumPMax", value: value, _operator: _operator); }
        public static SqlHavingCollection Issues_NumPMax(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[NumP])", name: "NumPMax", value: value, _operator: _operator); }
        public static IssuesHavingCollection NumPMin(this IssuesHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[NumP])", name: "NumPMin", value: value, _operator: _operator); }
        public static SqlHavingCollection Issues_NumPMin(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[NumP])", name: "NumPMin", value: value, _operator: _operator); }
        public static IssuesHavingCollection CreatedTimeMax(this IssuesHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[CreatedTime])", name: "CreatedTimeMax", value: value, _operator: _operator); }
        public static SqlHavingCollection Issues_CreatedTimeMax(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[CreatedTime])", name: "CreatedTimeMax", value: value, _operator: _operator); }
        public static IssuesHavingCollection CreatedTimeMin(this IssuesHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[CreatedTime])", name: "CreatedTimeMin", value: value, _operator: _operator); }
        public static SqlHavingCollection Issues_CreatedTimeMin(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[CreatedTime])", name: "CreatedTimeMin", value: value, _operator: _operator); }
        public static IssuesOrderByCollection SiteId(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[SiteId]"); }
        public static IssuesOrderByCollection UpdatedTime(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[UpdatedTime]"); }
        public static IssuesOrderByCollection IssueId(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[IssueId]"); }
        public static IssuesOrderByCollection Ver(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Ver]"); }
        public static IssuesOrderByCollection Title(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Title]"); }
        public static IssuesOrderByCollection Body(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Body]"); }
        public static IssuesOrderByCollection TitleBody(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Title]", "[t0].[Body]"); }
        public static IssuesOrderByCollection StartTime(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[StartTime]"); }
        public static IssuesOrderByCollection CompletionTime(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[CompletionTime]"); }
        public static IssuesOrderByCollection WorkValue(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[WorkValue]"); }
        public static IssuesOrderByCollection ProgressRate(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[ProgressRate]"); }
        public static IssuesOrderByCollection RemainingWorkValue(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[WorkValue] - ([t0].[WorkValue] * [t0].[ProgressRate] * 0.01)"); }
        public static IssuesOrderByCollection Status(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Status]"); }
        public static IssuesOrderByCollection Manager(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Manager]"); }
        public static IssuesOrderByCollection Owner(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Owner]"); }
        public static IssuesOrderByCollection ClassA(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[ClassA]"); }
        public static IssuesOrderByCollection ClassB(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[ClassB]"); }
        public static IssuesOrderByCollection ClassC(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[ClassC]"); }
        public static IssuesOrderByCollection ClassD(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[ClassD]"); }
        public static IssuesOrderByCollection ClassE(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[ClassE]"); }
        public static IssuesOrderByCollection ClassF(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[ClassF]"); }
        public static IssuesOrderByCollection ClassG(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[ClassG]"); }
        public static IssuesOrderByCollection ClassH(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[ClassH]"); }
        public static IssuesOrderByCollection ClassI(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[ClassI]"); }
        public static IssuesOrderByCollection ClassJ(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[ClassJ]"); }
        public static IssuesOrderByCollection ClassK(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[ClassK]"); }
        public static IssuesOrderByCollection ClassL(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[ClassL]"); }
        public static IssuesOrderByCollection ClassM(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[ClassM]"); }
        public static IssuesOrderByCollection ClassN(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[ClassN]"); }
        public static IssuesOrderByCollection ClassO(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[ClassO]"); }
        public static IssuesOrderByCollection ClassP(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[ClassP]"); }
        public static IssuesOrderByCollection NumA(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[NumA]"); }
        public static IssuesOrderByCollection NumB(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[NumB]"); }
        public static IssuesOrderByCollection NumC(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[NumC]"); }
        public static IssuesOrderByCollection NumD(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[NumD]"); }
        public static IssuesOrderByCollection NumE(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[NumE]"); }
        public static IssuesOrderByCollection NumF(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[NumF]"); }
        public static IssuesOrderByCollection NumG(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[NumG]"); }
        public static IssuesOrderByCollection NumH(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[NumH]"); }
        public static IssuesOrderByCollection NumI(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[NumI]"); }
        public static IssuesOrderByCollection NumJ(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[NumJ]"); }
        public static IssuesOrderByCollection NumK(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[NumK]"); }
        public static IssuesOrderByCollection NumL(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[NumL]"); }
        public static IssuesOrderByCollection NumM(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[NumM]"); }
        public static IssuesOrderByCollection NumN(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[NumN]"); }
        public static IssuesOrderByCollection NumO(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[NumO]"); }
        public static IssuesOrderByCollection NumP(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[NumP]"); }
        public static IssuesOrderByCollection DateA(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[DateA]"); }
        public static IssuesOrderByCollection DateB(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[DateB]"); }
        public static IssuesOrderByCollection DateC(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[DateC]"); }
        public static IssuesOrderByCollection DateD(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[DateD]"); }
        public static IssuesOrderByCollection DateE(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[DateE]"); }
        public static IssuesOrderByCollection DateF(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[DateF]"); }
        public static IssuesOrderByCollection DateG(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[DateG]"); }
        public static IssuesOrderByCollection DateH(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[DateH]"); }
        public static IssuesOrderByCollection DateI(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[DateI]"); }
        public static IssuesOrderByCollection DateJ(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[DateJ]"); }
        public static IssuesOrderByCollection DateK(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[DateK]"); }
        public static IssuesOrderByCollection DateL(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[DateL]"); }
        public static IssuesOrderByCollection DateM(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[DateM]"); }
        public static IssuesOrderByCollection DateN(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[DateN]"); }
        public static IssuesOrderByCollection DateO(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[DateO]"); }
        public static IssuesOrderByCollection DateP(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[DateP]"); }
        public static IssuesOrderByCollection DescriptionA(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[DescriptionA]"); }
        public static IssuesOrderByCollection DescriptionB(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[DescriptionB]"); }
        public static IssuesOrderByCollection DescriptionC(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[DescriptionC]"); }
        public static IssuesOrderByCollection DescriptionD(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[DescriptionD]"); }
        public static IssuesOrderByCollection DescriptionE(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[DescriptionE]"); }
        public static IssuesOrderByCollection DescriptionF(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[DescriptionF]"); }
        public static IssuesOrderByCollection DescriptionG(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[DescriptionG]"); }
        public static IssuesOrderByCollection DescriptionH(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[DescriptionH]"); }
        public static IssuesOrderByCollection DescriptionI(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[DescriptionI]"); }
        public static IssuesOrderByCollection DescriptionJ(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[DescriptionJ]"); }
        public static IssuesOrderByCollection DescriptionK(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[DescriptionK]"); }
        public static IssuesOrderByCollection DescriptionL(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[DescriptionL]"); }
        public static IssuesOrderByCollection DescriptionM(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[DescriptionM]"); }
        public static IssuesOrderByCollection DescriptionN(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[DescriptionN]"); }
        public static IssuesOrderByCollection DescriptionO(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[DescriptionO]"); }
        public static IssuesOrderByCollection DescriptionP(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[DescriptionP]"); }
        public static IssuesOrderByCollection CheckA(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[CheckA]"); }
        public static IssuesOrderByCollection CheckB(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[CheckB]"); }
        public static IssuesOrderByCollection CheckC(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[CheckC]"); }
        public static IssuesOrderByCollection CheckD(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[CheckD]"); }
        public static IssuesOrderByCollection CheckE(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[CheckE]"); }
        public static IssuesOrderByCollection CheckF(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[CheckF]"); }
        public static IssuesOrderByCollection CheckG(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[CheckG]"); }
        public static IssuesOrderByCollection CheckH(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[CheckH]"); }
        public static IssuesOrderByCollection CheckI(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[CheckI]"); }
        public static IssuesOrderByCollection CheckJ(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[CheckJ]"); }
        public static IssuesOrderByCollection CheckK(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[CheckK]"); }
        public static IssuesOrderByCollection CheckL(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[CheckL]"); }
        public static IssuesOrderByCollection CheckM(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[CheckM]"); }
        public static IssuesOrderByCollection CheckN(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[CheckN]"); }
        public static IssuesOrderByCollection CheckO(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[CheckO]"); }
        public static IssuesOrderByCollection CheckP(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[CheckP]"); }
        public static IssuesOrderByCollection Comments(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Comments]"); }
        public static IssuesOrderByCollection Creator(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Creator]"); }
        public static IssuesOrderByCollection Updator(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Updator]"); }
        public static IssuesOrderByCollection CreatedTime(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[CreatedTime]"); }
        public static SqlOrderByCollection Issues_SiteId(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[SiteId]"); }
        public static SqlOrderByCollection Issues_UpdatedTime(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[UpdatedTime]"); }
        public static SqlOrderByCollection Issues_IssueId(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[IssueId]"); }
        public static SqlOrderByCollection Issues_Ver(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Ver]"); }
        public static SqlOrderByCollection Issues_Title(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Title]"); }
        public static SqlOrderByCollection Issues_Body(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Body]"); }
        public static SqlOrderByCollection Issues_TitleBody(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Title]", "[" + tableName + "].[Body]"); }
        public static SqlOrderByCollection Issues_StartTime(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[StartTime]"); }
        public static SqlOrderByCollection Issues_CompletionTime(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[CompletionTime]"); }
        public static SqlOrderByCollection Issues_WorkValue(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[WorkValue]"); }
        public static SqlOrderByCollection Issues_ProgressRate(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[ProgressRate]"); }
        public static SqlOrderByCollection Issues_RemainingWorkValue(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[WorkValue] - ([" + tableName + "].[WorkValue] * [" + tableName + "].[ProgressRate] * 0.01)"); }
        public static SqlOrderByCollection Issues_Status(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Status]"); }
        public static SqlOrderByCollection Issues_Manager(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Manager]"); }
        public static SqlOrderByCollection Issues_Owner(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Owner]"); }
        public static SqlOrderByCollection Issues_ClassA(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[ClassA]"); }
        public static SqlOrderByCollection Issues_ClassB(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[ClassB]"); }
        public static SqlOrderByCollection Issues_ClassC(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[ClassC]"); }
        public static SqlOrderByCollection Issues_ClassD(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[ClassD]"); }
        public static SqlOrderByCollection Issues_ClassE(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[ClassE]"); }
        public static SqlOrderByCollection Issues_ClassF(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[ClassF]"); }
        public static SqlOrderByCollection Issues_ClassG(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[ClassG]"); }
        public static SqlOrderByCollection Issues_ClassH(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[ClassH]"); }
        public static SqlOrderByCollection Issues_ClassI(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[ClassI]"); }
        public static SqlOrderByCollection Issues_ClassJ(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[ClassJ]"); }
        public static SqlOrderByCollection Issues_ClassK(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[ClassK]"); }
        public static SqlOrderByCollection Issues_ClassL(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[ClassL]"); }
        public static SqlOrderByCollection Issues_ClassM(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[ClassM]"); }
        public static SqlOrderByCollection Issues_ClassN(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[ClassN]"); }
        public static SqlOrderByCollection Issues_ClassO(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[ClassO]"); }
        public static SqlOrderByCollection Issues_ClassP(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[ClassP]"); }
        public static SqlOrderByCollection Issues_NumA(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[NumA]"); }
        public static SqlOrderByCollection Issues_NumB(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[NumB]"); }
        public static SqlOrderByCollection Issues_NumC(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[NumC]"); }
        public static SqlOrderByCollection Issues_NumD(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[NumD]"); }
        public static SqlOrderByCollection Issues_NumE(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[NumE]"); }
        public static SqlOrderByCollection Issues_NumF(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[NumF]"); }
        public static SqlOrderByCollection Issues_NumG(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[NumG]"); }
        public static SqlOrderByCollection Issues_NumH(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[NumH]"); }
        public static SqlOrderByCollection Issues_NumI(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[NumI]"); }
        public static SqlOrderByCollection Issues_NumJ(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[NumJ]"); }
        public static SqlOrderByCollection Issues_NumK(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[NumK]"); }
        public static SqlOrderByCollection Issues_NumL(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[NumL]"); }
        public static SqlOrderByCollection Issues_NumM(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[NumM]"); }
        public static SqlOrderByCollection Issues_NumN(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[NumN]"); }
        public static SqlOrderByCollection Issues_NumO(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[NumO]"); }
        public static SqlOrderByCollection Issues_NumP(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[NumP]"); }
        public static SqlOrderByCollection Issues_DateA(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[DateA]"); }
        public static SqlOrderByCollection Issues_DateB(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[DateB]"); }
        public static SqlOrderByCollection Issues_DateC(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[DateC]"); }
        public static SqlOrderByCollection Issues_DateD(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[DateD]"); }
        public static SqlOrderByCollection Issues_DateE(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[DateE]"); }
        public static SqlOrderByCollection Issues_DateF(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[DateF]"); }
        public static SqlOrderByCollection Issues_DateG(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[DateG]"); }
        public static SqlOrderByCollection Issues_DateH(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[DateH]"); }
        public static SqlOrderByCollection Issues_DateI(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[DateI]"); }
        public static SqlOrderByCollection Issues_DateJ(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[DateJ]"); }
        public static SqlOrderByCollection Issues_DateK(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[DateK]"); }
        public static SqlOrderByCollection Issues_DateL(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[DateL]"); }
        public static SqlOrderByCollection Issues_DateM(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[DateM]"); }
        public static SqlOrderByCollection Issues_DateN(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[DateN]"); }
        public static SqlOrderByCollection Issues_DateO(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[DateO]"); }
        public static SqlOrderByCollection Issues_DateP(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[DateP]"); }
        public static SqlOrderByCollection Issues_DescriptionA(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[DescriptionA]"); }
        public static SqlOrderByCollection Issues_DescriptionB(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[DescriptionB]"); }
        public static SqlOrderByCollection Issues_DescriptionC(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[DescriptionC]"); }
        public static SqlOrderByCollection Issues_DescriptionD(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[DescriptionD]"); }
        public static SqlOrderByCollection Issues_DescriptionE(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[DescriptionE]"); }
        public static SqlOrderByCollection Issues_DescriptionF(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[DescriptionF]"); }
        public static SqlOrderByCollection Issues_DescriptionG(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[DescriptionG]"); }
        public static SqlOrderByCollection Issues_DescriptionH(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[DescriptionH]"); }
        public static SqlOrderByCollection Issues_DescriptionI(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[DescriptionI]"); }
        public static SqlOrderByCollection Issues_DescriptionJ(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[DescriptionJ]"); }
        public static SqlOrderByCollection Issues_DescriptionK(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[DescriptionK]"); }
        public static SqlOrderByCollection Issues_DescriptionL(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[DescriptionL]"); }
        public static SqlOrderByCollection Issues_DescriptionM(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[DescriptionM]"); }
        public static SqlOrderByCollection Issues_DescriptionN(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[DescriptionN]"); }
        public static SqlOrderByCollection Issues_DescriptionO(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[DescriptionO]"); }
        public static SqlOrderByCollection Issues_DescriptionP(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[DescriptionP]"); }
        public static SqlOrderByCollection Issues_CheckA(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[CheckA]"); }
        public static SqlOrderByCollection Issues_CheckB(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[CheckB]"); }
        public static SqlOrderByCollection Issues_CheckC(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[CheckC]"); }
        public static SqlOrderByCollection Issues_CheckD(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[CheckD]"); }
        public static SqlOrderByCollection Issues_CheckE(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[CheckE]"); }
        public static SqlOrderByCollection Issues_CheckF(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[CheckF]"); }
        public static SqlOrderByCollection Issues_CheckG(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[CheckG]"); }
        public static SqlOrderByCollection Issues_CheckH(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[CheckH]"); }
        public static SqlOrderByCollection Issues_CheckI(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[CheckI]"); }
        public static SqlOrderByCollection Issues_CheckJ(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[CheckJ]"); }
        public static SqlOrderByCollection Issues_CheckK(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[CheckK]"); }
        public static SqlOrderByCollection Issues_CheckL(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[CheckL]"); }
        public static SqlOrderByCollection Issues_CheckM(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[CheckM]"); }
        public static SqlOrderByCollection Issues_CheckN(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[CheckN]"); }
        public static SqlOrderByCollection Issues_CheckO(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[CheckO]"); }
        public static SqlOrderByCollection Issues_CheckP(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[CheckP]"); }
        public static SqlOrderByCollection Issues_Comments(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Comments]"); }
        public static SqlOrderByCollection Issues_Creator(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Creator]"); }
        public static SqlOrderByCollection Issues_Updator(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Updator]"); }
        public static SqlOrderByCollection Issues_CreatedTime(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[CreatedTime]"); }
        public static IssuesOrderByCollection IssuesCount(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "count(*)"); }
        public static IssuesOrderByCollection WorkValueTotal(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "sum([t0].[WorkValue])"); }
        public static SqlOrderByCollection Issues_WorkValueTotal(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "sum([t0].[WorkValue])"); }
        public static IssuesOrderByCollection WorkValueAverage(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "avg([t0].[WorkValue])"); }
        public static SqlOrderByCollection Issues_WorkValueAverage(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "avg([t0].[WorkValue])"); }
        public static IssuesOrderByCollection RemainingWorkValueTotal(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "sum([t0].[WorkValue] - ([t0].[WorkValue] * [t0].[ProgressRate] * 0.01))"); }
        public static SqlOrderByCollection Issues_RemainingWorkValueTotal(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "sum([t0].[WorkValue] - ([t0].[WorkValue] * [t0].[ProgressRate] * 0.01))"); }
        public static IssuesOrderByCollection RemainingWorkValueAverage(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "avg([t0].[WorkValue] - ([t0].[WorkValue] * [t0].[ProgressRate] * 0.01))"); }
        public static SqlOrderByCollection Issues_RemainingWorkValueAverage(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "avg([t0].[WorkValue] - ([t0].[WorkValue] * [t0].[ProgressRate] * 0.01))"); }
        public static IssuesOrderByCollection NumATotal(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "sum([t0].[NumA])"); }
        public static SqlOrderByCollection Issues_NumATotal(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "sum([t0].[NumA])"); }
        public static IssuesOrderByCollection NumAAverage(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "avg([t0].[NumA])"); }
        public static SqlOrderByCollection Issues_NumAAverage(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "avg([t0].[NumA])"); }
        public static IssuesOrderByCollection NumBTotal(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "sum([t0].[NumB])"); }
        public static SqlOrderByCollection Issues_NumBTotal(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "sum([t0].[NumB])"); }
        public static IssuesOrderByCollection NumBAverage(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "avg([t0].[NumB])"); }
        public static SqlOrderByCollection Issues_NumBAverage(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "avg([t0].[NumB])"); }
        public static IssuesOrderByCollection NumCTotal(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "sum([t0].[NumC])"); }
        public static SqlOrderByCollection Issues_NumCTotal(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "sum([t0].[NumC])"); }
        public static IssuesOrderByCollection NumCAverage(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "avg([t0].[NumC])"); }
        public static SqlOrderByCollection Issues_NumCAverage(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "avg([t0].[NumC])"); }
        public static IssuesOrderByCollection NumDTotal(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "sum([t0].[NumD])"); }
        public static SqlOrderByCollection Issues_NumDTotal(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "sum([t0].[NumD])"); }
        public static IssuesOrderByCollection NumDAverage(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "avg([t0].[NumD])"); }
        public static SqlOrderByCollection Issues_NumDAverage(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "avg([t0].[NumD])"); }
        public static IssuesOrderByCollection NumETotal(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "sum([t0].[NumE])"); }
        public static SqlOrderByCollection Issues_NumETotal(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "sum([t0].[NumE])"); }
        public static IssuesOrderByCollection NumEAverage(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "avg([t0].[NumE])"); }
        public static SqlOrderByCollection Issues_NumEAverage(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "avg([t0].[NumE])"); }
        public static IssuesOrderByCollection NumFTotal(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "sum([t0].[NumF])"); }
        public static SqlOrderByCollection Issues_NumFTotal(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "sum([t0].[NumF])"); }
        public static IssuesOrderByCollection NumFAverage(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "avg([t0].[NumF])"); }
        public static SqlOrderByCollection Issues_NumFAverage(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "avg([t0].[NumF])"); }
        public static IssuesOrderByCollection NumGTotal(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "sum([t0].[NumG])"); }
        public static SqlOrderByCollection Issues_NumGTotal(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "sum([t0].[NumG])"); }
        public static IssuesOrderByCollection NumGAverage(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "avg([t0].[NumG])"); }
        public static SqlOrderByCollection Issues_NumGAverage(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "avg([t0].[NumG])"); }
        public static IssuesOrderByCollection NumHTotal(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "sum([t0].[NumH])"); }
        public static SqlOrderByCollection Issues_NumHTotal(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "sum([t0].[NumH])"); }
        public static IssuesOrderByCollection NumHAverage(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "avg([t0].[NumH])"); }
        public static SqlOrderByCollection Issues_NumHAverage(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "avg([t0].[NumH])"); }
        public static IssuesOrderByCollection NumITotal(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "sum([t0].[NumI])"); }
        public static SqlOrderByCollection Issues_NumITotal(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "sum([t0].[NumI])"); }
        public static IssuesOrderByCollection NumIAverage(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "avg([t0].[NumI])"); }
        public static SqlOrderByCollection Issues_NumIAverage(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "avg([t0].[NumI])"); }
        public static IssuesOrderByCollection NumJTotal(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "sum([t0].[NumJ])"); }
        public static SqlOrderByCollection Issues_NumJTotal(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "sum([t0].[NumJ])"); }
        public static IssuesOrderByCollection NumJAverage(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "avg([t0].[NumJ])"); }
        public static SqlOrderByCollection Issues_NumJAverage(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "avg([t0].[NumJ])"); }
        public static IssuesOrderByCollection NumKTotal(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "sum([t0].[NumK])"); }
        public static SqlOrderByCollection Issues_NumKTotal(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "sum([t0].[NumK])"); }
        public static IssuesOrderByCollection NumKAverage(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "avg([t0].[NumK])"); }
        public static SqlOrderByCollection Issues_NumKAverage(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "avg([t0].[NumK])"); }
        public static IssuesOrderByCollection NumLTotal(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "sum([t0].[NumL])"); }
        public static SqlOrderByCollection Issues_NumLTotal(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "sum([t0].[NumL])"); }
        public static IssuesOrderByCollection NumLAverage(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "avg([t0].[NumL])"); }
        public static SqlOrderByCollection Issues_NumLAverage(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "avg([t0].[NumL])"); }
        public static IssuesOrderByCollection NumMTotal(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "sum([t0].[NumM])"); }
        public static SqlOrderByCollection Issues_NumMTotal(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "sum([t0].[NumM])"); }
        public static IssuesOrderByCollection NumMAverage(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "avg([t0].[NumM])"); }
        public static SqlOrderByCollection Issues_NumMAverage(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "avg([t0].[NumM])"); }
        public static IssuesOrderByCollection NumNTotal(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "sum([t0].[NumN])"); }
        public static SqlOrderByCollection Issues_NumNTotal(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "sum([t0].[NumN])"); }
        public static IssuesOrderByCollection NumNAverage(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "avg([t0].[NumN])"); }
        public static SqlOrderByCollection Issues_NumNAverage(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "avg([t0].[NumN])"); }
        public static IssuesOrderByCollection NumOTotal(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "sum([t0].[NumO])"); }
        public static SqlOrderByCollection Issues_NumOTotal(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "sum([t0].[NumO])"); }
        public static IssuesOrderByCollection NumOAverage(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "avg([t0].[NumO])"); }
        public static SqlOrderByCollection Issues_NumOAverage(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "avg([t0].[NumO])"); }
        public static IssuesOrderByCollection NumPTotal(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "sum([t0].[NumP])"); }
        public static SqlOrderByCollection Issues_NumPTotal(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "sum([t0].[NumP])"); }
        public static IssuesOrderByCollection NumPAverage(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "avg([t0].[NumP])"); }
        public static SqlOrderByCollection Issues_NumPAverage(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "avg([t0].[NumP])"); }
        public static IssuesOrderByCollection WorkValueMax(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[WorkValue])"); }
        public static SqlOrderByCollection Issues_WorkValueMax(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[WorkValue])"); }
        public static IssuesOrderByCollection WorkValueMin(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[WorkValue])"); }
        public static SqlOrderByCollection Issues_WorkValueMin(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[WorkValue])"); }
        public static IssuesOrderByCollection RemainingWorkValueMax(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[WorkValue] - ([t0].[WorkValue] * [t0].[ProgressRate] * 0.01))"); }
        public static SqlOrderByCollection Issues_RemainingWorkValueMax(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[WorkValue] - ([t0].[WorkValue] * [t0].[ProgressRate] * 0.01))"); }
        public static IssuesOrderByCollection RemainingWorkValueMin(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[WorkValue] - ([t0].[WorkValue] * [t0].[ProgressRate] * 0.01))"); }
        public static SqlOrderByCollection Issues_RemainingWorkValueMin(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[WorkValue] - ([t0].[WorkValue] * [t0].[ProgressRate] * 0.01))"); }
        public static IssuesOrderByCollection NumAMax(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[NumA])"); }
        public static SqlOrderByCollection Issues_NumAMax(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[NumA])"); }
        public static IssuesOrderByCollection NumAMin(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[NumA])"); }
        public static SqlOrderByCollection Issues_NumAMin(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[NumA])"); }
        public static IssuesOrderByCollection NumBMax(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[NumB])"); }
        public static SqlOrderByCollection Issues_NumBMax(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[NumB])"); }
        public static IssuesOrderByCollection NumBMin(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[NumB])"); }
        public static SqlOrderByCollection Issues_NumBMin(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[NumB])"); }
        public static IssuesOrderByCollection NumCMax(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[NumC])"); }
        public static SqlOrderByCollection Issues_NumCMax(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[NumC])"); }
        public static IssuesOrderByCollection NumCMin(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[NumC])"); }
        public static SqlOrderByCollection Issues_NumCMin(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[NumC])"); }
        public static IssuesOrderByCollection NumDMax(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[NumD])"); }
        public static SqlOrderByCollection Issues_NumDMax(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[NumD])"); }
        public static IssuesOrderByCollection NumDMin(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[NumD])"); }
        public static SqlOrderByCollection Issues_NumDMin(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[NumD])"); }
        public static IssuesOrderByCollection NumEMax(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[NumE])"); }
        public static SqlOrderByCollection Issues_NumEMax(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[NumE])"); }
        public static IssuesOrderByCollection NumEMin(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[NumE])"); }
        public static SqlOrderByCollection Issues_NumEMin(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[NumE])"); }
        public static IssuesOrderByCollection NumFMax(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[NumF])"); }
        public static SqlOrderByCollection Issues_NumFMax(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[NumF])"); }
        public static IssuesOrderByCollection NumFMin(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[NumF])"); }
        public static SqlOrderByCollection Issues_NumFMin(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[NumF])"); }
        public static IssuesOrderByCollection NumGMax(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[NumG])"); }
        public static SqlOrderByCollection Issues_NumGMax(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[NumG])"); }
        public static IssuesOrderByCollection NumGMin(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[NumG])"); }
        public static SqlOrderByCollection Issues_NumGMin(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[NumG])"); }
        public static IssuesOrderByCollection NumHMax(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[NumH])"); }
        public static SqlOrderByCollection Issues_NumHMax(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[NumH])"); }
        public static IssuesOrderByCollection NumHMin(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[NumH])"); }
        public static SqlOrderByCollection Issues_NumHMin(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[NumH])"); }
        public static IssuesOrderByCollection NumIMax(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[NumI])"); }
        public static SqlOrderByCollection Issues_NumIMax(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[NumI])"); }
        public static IssuesOrderByCollection NumIMin(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[NumI])"); }
        public static SqlOrderByCollection Issues_NumIMin(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[NumI])"); }
        public static IssuesOrderByCollection NumJMax(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[NumJ])"); }
        public static SqlOrderByCollection Issues_NumJMax(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[NumJ])"); }
        public static IssuesOrderByCollection NumJMin(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[NumJ])"); }
        public static SqlOrderByCollection Issues_NumJMin(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[NumJ])"); }
        public static IssuesOrderByCollection NumKMax(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[NumK])"); }
        public static SqlOrderByCollection Issues_NumKMax(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[NumK])"); }
        public static IssuesOrderByCollection NumKMin(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[NumK])"); }
        public static SqlOrderByCollection Issues_NumKMin(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[NumK])"); }
        public static IssuesOrderByCollection NumLMax(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[NumL])"); }
        public static SqlOrderByCollection Issues_NumLMax(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[NumL])"); }
        public static IssuesOrderByCollection NumLMin(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[NumL])"); }
        public static SqlOrderByCollection Issues_NumLMin(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[NumL])"); }
        public static IssuesOrderByCollection NumMMax(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[NumM])"); }
        public static SqlOrderByCollection Issues_NumMMax(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[NumM])"); }
        public static IssuesOrderByCollection NumMMin(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[NumM])"); }
        public static SqlOrderByCollection Issues_NumMMin(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[NumM])"); }
        public static IssuesOrderByCollection NumNMax(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[NumN])"); }
        public static SqlOrderByCollection Issues_NumNMax(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[NumN])"); }
        public static IssuesOrderByCollection NumNMin(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[NumN])"); }
        public static SqlOrderByCollection Issues_NumNMin(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[NumN])"); }
        public static IssuesOrderByCollection NumOMax(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[NumO])"); }
        public static SqlOrderByCollection Issues_NumOMax(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[NumO])"); }
        public static IssuesOrderByCollection NumOMin(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[NumO])"); }
        public static SqlOrderByCollection Issues_NumOMin(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[NumO])"); }
        public static IssuesOrderByCollection NumPMax(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[NumP])"); }
        public static SqlOrderByCollection Issues_NumPMax(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[NumP])"); }
        public static IssuesOrderByCollection NumPMin(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[NumP])"); }
        public static SqlOrderByCollection Issues_NumPMin(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[NumP])"); }
        public static IssuesOrderByCollection CreatedTimeMax(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[CreatedTime])"); }
        public static SqlOrderByCollection Issues_CreatedTimeMax(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[CreatedTime])"); }
        public static IssuesOrderByCollection CreatedTimeMin(this IssuesOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[CreatedTime])"); }
        public static SqlOrderByCollection Issues_CreatedTimeMin(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[CreatedTime])"); }

        public static IssuesParamCollection ItemId(this IssuesParamCollection self, long itemId)
        {
            if (itemId == 0)
            {
                return self.IssueId(raw: Def.Sql.Identity);
            }
            else
            {
                return self.IssueId(value: itemId);
            }
        }

        public static IssuesParamCollection SiteId(this IssuesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[SiteId]", "SiteId", value, sub, raw, _using); }
        public static SqlParamCollection Issues_SiteId(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[SiteId]", "SiteId", value, sub, raw, _using); }
        public static IssuesParamCollection UpdatedTime(this IssuesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[UpdatedTime]", "UpdatedTime", value, sub, raw, _using); }
        public static SqlParamCollection Issues_UpdatedTime(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[UpdatedTime]", "UpdatedTime", value, sub, raw, _using); }
        public static IssuesParamCollection IssueId(this IssuesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[IssueId]", "IssueId", value, sub, raw, _using); }
        public static SqlParamCollection Issues_IssueId(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[IssueId]", "IssueId", value, sub, raw, _using); }
        public static IssuesParamCollection Ver(this IssuesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Ver]", "Ver", value, sub, raw, _using); }
        public static SqlParamCollection Issues_Ver(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Ver]", "Ver", value, sub, raw, _using); }
        public static IssuesParamCollection Title(this IssuesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Title]", "Title", value, sub, raw, _using); }
        public static SqlParamCollection Issues_Title(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Title]", "Title", value, sub, raw, _using); }
        public static IssuesParamCollection Body(this IssuesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Body]", "Body", value, sub, raw, _using); }
        public static SqlParamCollection Issues_Body(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Body]", "Body", value, sub, raw, _using); }
        public static IssuesParamCollection StartTime(this IssuesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[StartTime]", "StartTime", value, sub, raw, _using); }
        public static SqlParamCollection Issues_StartTime(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[StartTime]", "StartTime", value, sub, raw, _using); }
        public static IssuesParamCollection CompletionTime(this IssuesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CompletionTime]", "CompletionTime", value, sub, raw, _using); }
        public static SqlParamCollection Issues_CompletionTime(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CompletionTime]", "CompletionTime", value, sub, raw, _using); }
        public static IssuesParamCollection WorkValue(this IssuesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[WorkValue]", "WorkValue", value, sub, raw, _using); }
        public static SqlParamCollection Issues_WorkValue(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[WorkValue]", "WorkValue", value, sub, raw, _using); }
        public static IssuesParamCollection ProgressRate(this IssuesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ProgressRate]", "ProgressRate", value, sub, raw, _using); }
        public static SqlParamCollection Issues_ProgressRate(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ProgressRate]", "ProgressRate", value, sub, raw, _using); }
        public static IssuesParamCollection Status(this IssuesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Status]", "Status", value, sub, raw, _using); }
        public static SqlParamCollection Issues_Status(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Status]", "Status", value, sub, raw, _using); }
        public static IssuesParamCollection Manager(this IssuesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Manager]", "Manager", value, sub, raw, _using); }
        public static SqlParamCollection Issues_Manager(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Manager]", "Manager", value, sub, raw, _using); }
        public static IssuesParamCollection Owner(this IssuesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Owner]", "Owner", value, sub, raw, _using); }
        public static SqlParamCollection Issues_Owner(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Owner]", "Owner", value, sub, raw, _using); }
        public static IssuesParamCollection ClassA(this IssuesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ClassA]", "ClassA", value, sub, raw, _using); }
        public static SqlParamCollection Issues_ClassA(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ClassA]", "ClassA", value, sub, raw, _using); }
        public static IssuesParamCollection ClassB(this IssuesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ClassB]", "ClassB", value, sub, raw, _using); }
        public static SqlParamCollection Issues_ClassB(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ClassB]", "ClassB", value, sub, raw, _using); }
        public static IssuesParamCollection ClassC(this IssuesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ClassC]", "ClassC", value, sub, raw, _using); }
        public static SqlParamCollection Issues_ClassC(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ClassC]", "ClassC", value, sub, raw, _using); }
        public static IssuesParamCollection ClassD(this IssuesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ClassD]", "ClassD", value, sub, raw, _using); }
        public static SqlParamCollection Issues_ClassD(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ClassD]", "ClassD", value, sub, raw, _using); }
        public static IssuesParamCollection ClassE(this IssuesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ClassE]", "ClassE", value, sub, raw, _using); }
        public static SqlParamCollection Issues_ClassE(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ClassE]", "ClassE", value, sub, raw, _using); }
        public static IssuesParamCollection ClassF(this IssuesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ClassF]", "ClassF", value, sub, raw, _using); }
        public static SqlParamCollection Issues_ClassF(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ClassF]", "ClassF", value, sub, raw, _using); }
        public static IssuesParamCollection ClassG(this IssuesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ClassG]", "ClassG", value, sub, raw, _using); }
        public static SqlParamCollection Issues_ClassG(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ClassG]", "ClassG", value, sub, raw, _using); }
        public static IssuesParamCollection ClassH(this IssuesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ClassH]", "ClassH", value, sub, raw, _using); }
        public static SqlParamCollection Issues_ClassH(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ClassH]", "ClassH", value, sub, raw, _using); }
        public static IssuesParamCollection ClassI(this IssuesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ClassI]", "ClassI", value, sub, raw, _using); }
        public static SqlParamCollection Issues_ClassI(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ClassI]", "ClassI", value, sub, raw, _using); }
        public static IssuesParamCollection ClassJ(this IssuesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ClassJ]", "ClassJ", value, sub, raw, _using); }
        public static SqlParamCollection Issues_ClassJ(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ClassJ]", "ClassJ", value, sub, raw, _using); }
        public static IssuesParamCollection ClassK(this IssuesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ClassK]", "ClassK", value, sub, raw, _using); }
        public static SqlParamCollection Issues_ClassK(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ClassK]", "ClassK", value, sub, raw, _using); }
        public static IssuesParamCollection ClassL(this IssuesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ClassL]", "ClassL", value, sub, raw, _using); }
        public static SqlParamCollection Issues_ClassL(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ClassL]", "ClassL", value, sub, raw, _using); }
        public static IssuesParamCollection ClassM(this IssuesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ClassM]", "ClassM", value, sub, raw, _using); }
        public static SqlParamCollection Issues_ClassM(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ClassM]", "ClassM", value, sub, raw, _using); }
        public static IssuesParamCollection ClassN(this IssuesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ClassN]", "ClassN", value, sub, raw, _using); }
        public static SqlParamCollection Issues_ClassN(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ClassN]", "ClassN", value, sub, raw, _using); }
        public static IssuesParamCollection ClassO(this IssuesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ClassO]", "ClassO", value, sub, raw, _using); }
        public static SqlParamCollection Issues_ClassO(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ClassO]", "ClassO", value, sub, raw, _using); }
        public static IssuesParamCollection ClassP(this IssuesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ClassP]", "ClassP", value, sub, raw, _using); }
        public static SqlParamCollection Issues_ClassP(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ClassP]", "ClassP", value, sub, raw, _using); }
        public static IssuesParamCollection NumA(this IssuesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[NumA]", "NumA", value, sub, raw, _using); }
        public static SqlParamCollection Issues_NumA(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[NumA]", "NumA", value, sub, raw, _using); }
        public static IssuesParamCollection NumB(this IssuesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[NumB]", "NumB", value, sub, raw, _using); }
        public static SqlParamCollection Issues_NumB(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[NumB]", "NumB", value, sub, raw, _using); }
        public static IssuesParamCollection NumC(this IssuesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[NumC]", "NumC", value, sub, raw, _using); }
        public static SqlParamCollection Issues_NumC(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[NumC]", "NumC", value, sub, raw, _using); }
        public static IssuesParamCollection NumD(this IssuesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[NumD]", "NumD", value, sub, raw, _using); }
        public static SqlParamCollection Issues_NumD(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[NumD]", "NumD", value, sub, raw, _using); }
        public static IssuesParamCollection NumE(this IssuesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[NumE]", "NumE", value, sub, raw, _using); }
        public static SqlParamCollection Issues_NumE(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[NumE]", "NumE", value, sub, raw, _using); }
        public static IssuesParamCollection NumF(this IssuesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[NumF]", "NumF", value, sub, raw, _using); }
        public static SqlParamCollection Issues_NumF(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[NumF]", "NumF", value, sub, raw, _using); }
        public static IssuesParamCollection NumG(this IssuesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[NumG]", "NumG", value, sub, raw, _using); }
        public static SqlParamCollection Issues_NumG(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[NumG]", "NumG", value, sub, raw, _using); }
        public static IssuesParamCollection NumH(this IssuesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[NumH]", "NumH", value, sub, raw, _using); }
        public static SqlParamCollection Issues_NumH(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[NumH]", "NumH", value, sub, raw, _using); }
        public static IssuesParamCollection NumI(this IssuesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[NumI]", "NumI", value, sub, raw, _using); }
        public static SqlParamCollection Issues_NumI(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[NumI]", "NumI", value, sub, raw, _using); }
        public static IssuesParamCollection NumJ(this IssuesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[NumJ]", "NumJ", value, sub, raw, _using); }
        public static SqlParamCollection Issues_NumJ(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[NumJ]", "NumJ", value, sub, raw, _using); }
        public static IssuesParamCollection NumK(this IssuesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[NumK]", "NumK", value, sub, raw, _using); }
        public static SqlParamCollection Issues_NumK(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[NumK]", "NumK", value, sub, raw, _using); }
        public static IssuesParamCollection NumL(this IssuesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[NumL]", "NumL", value, sub, raw, _using); }
        public static SqlParamCollection Issues_NumL(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[NumL]", "NumL", value, sub, raw, _using); }
        public static IssuesParamCollection NumM(this IssuesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[NumM]", "NumM", value, sub, raw, _using); }
        public static SqlParamCollection Issues_NumM(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[NumM]", "NumM", value, sub, raw, _using); }
        public static IssuesParamCollection NumN(this IssuesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[NumN]", "NumN", value, sub, raw, _using); }
        public static SqlParamCollection Issues_NumN(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[NumN]", "NumN", value, sub, raw, _using); }
        public static IssuesParamCollection NumO(this IssuesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[NumO]", "NumO", value, sub, raw, _using); }
        public static SqlParamCollection Issues_NumO(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[NumO]", "NumO", value, sub, raw, _using); }
        public static IssuesParamCollection NumP(this IssuesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[NumP]", "NumP", value, sub, raw, _using); }
        public static SqlParamCollection Issues_NumP(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[NumP]", "NumP", value, sub, raw, _using); }
        public static IssuesParamCollection DateA(this IssuesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DateA]", "DateA", value, sub, raw, _using); }
        public static SqlParamCollection Issues_DateA(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DateA]", "DateA", value, sub, raw, _using); }
        public static IssuesParamCollection DateB(this IssuesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DateB]", "DateB", value, sub, raw, _using); }
        public static SqlParamCollection Issues_DateB(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DateB]", "DateB", value, sub, raw, _using); }
        public static IssuesParamCollection DateC(this IssuesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DateC]", "DateC", value, sub, raw, _using); }
        public static SqlParamCollection Issues_DateC(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DateC]", "DateC", value, sub, raw, _using); }
        public static IssuesParamCollection DateD(this IssuesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DateD]", "DateD", value, sub, raw, _using); }
        public static SqlParamCollection Issues_DateD(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DateD]", "DateD", value, sub, raw, _using); }
        public static IssuesParamCollection DateE(this IssuesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DateE]", "DateE", value, sub, raw, _using); }
        public static SqlParamCollection Issues_DateE(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DateE]", "DateE", value, sub, raw, _using); }
        public static IssuesParamCollection DateF(this IssuesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DateF]", "DateF", value, sub, raw, _using); }
        public static SqlParamCollection Issues_DateF(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DateF]", "DateF", value, sub, raw, _using); }
        public static IssuesParamCollection DateG(this IssuesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DateG]", "DateG", value, sub, raw, _using); }
        public static SqlParamCollection Issues_DateG(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DateG]", "DateG", value, sub, raw, _using); }
        public static IssuesParamCollection DateH(this IssuesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DateH]", "DateH", value, sub, raw, _using); }
        public static SqlParamCollection Issues_DateH(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DateH]", "DateH", value, sub, raw, _using); }
        public static IssuesParamCollection DateI(this IssuesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DateI]", "DateI", value, sub, raw, _using); }
        public static SqlParamCollection Issues_DateI(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DateI]", "DateI", value, sub, raw, _using); }
        public static IssuesParamCollection DateJ(this IssuesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DateJ]", "DateJ", value, sub, raw, _using); }
        public static SqlParamCollection Issues_DateJ(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DateJ]", "DateJ", value, sub, raw, _using); }
        public static IssuesParamCollection DateK(this IssuesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DateK]", "DateK", value, sub, raw, _using); }
        public static SqlParamCollection Issues_DateK(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DateK]", "DateK", value, sub, raw, _using); }
        public static IssuesParamCollection DateL(this IssuesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DateL]", "DateL", value, sub, raw, _using); }
        public static SqlParamCollection Issues_DateL(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DateL]", "DateL", value, sub, raw, _using); }
        public static IssuesParamCollection DateM(this IssuesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DateM]", "DateM", value, sub, raw, _using); }
        public static SqlParamCollection Issues_DateM(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DateM]", "DateM", value, sub, raw, _using); }
        public static IssuesParamCollection DateN(this IssuesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DateN]", "DateN", value, sub, raw, _using); }
        public static SqlParamCollection Issues_DateN(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DateN]", "DateN", value, sub, raw, _using); }
        public static IssuesParamCollection DateO(this IssuesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DateO]", "DateO", value, sub, raw, _using); }
        public static SqlParamCollection Issues_DateO(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DateO]", "DateO", value, sub, raw, _using); }
        public static IssuesParamCollection DateP(this IssuesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DateP]", "DateP", value, sub, raw, _using); }
        public static SqlParamCollection Issues_DateP(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DateP]", "DateP", value, sub, raw, _using); }
        public static IssuesParamCollection DescriptionA(this IssuesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DescriptionA]", "DescriptionA", value, sub, raw, _using); }
        public static SqlParamCollection Issues_DescriptionA(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DescriptionA]", "DescriptionA", value, sub, raw, _using); }
        public static IssuesParamCollection DescriptionB(this IssuesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DescriptionB]", "DescriptionB", value, sub, raw, _using); }
        public static SqlParamCollection Issues_DescriptionB(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DescriptionB]", "DescriptionB", value, sub, raw, _using); }
        public static IssuesParamCollection DescriptionC(this IssuesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DescriptionC]", "DescriptionC", value, sub, raw, _using); }
        public static SqlParamCollection Issues_DescriptionC(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DescriptionC]", "DescriptionC", value, sub, raw, _using); }
        public static IssuesParamCollection DescriptionD(this IssuesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DescriptionD]", "DescriptionD", value, sub, raw, _using); }
        public static SqlParamCollection Issues_DescriptionD(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DescriptionD]", "DescriptionD", value, sub, raw, _using); }
        public static IssuesParamCollection DescriptionE(this IssuesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DescriptionE]", "DescriptionE", value, sub, raw, _using); }
        public static SqlParamCollection Issues_DescriptionE(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DescriptionE]", "DescriptionE", value, sub, raw, _using); }
        public static IssuesParamCollection DescriptionF(this IssuesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DescriptionF]", "DescriptionF", value, sub, raw, _using); }
        public static SqlParamCollection Issues_DescriptionF(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DescriptionF]", "DescriptionF", value, sub, raw, _using); }
        public static IssuesParamCollection DescriptionG(this IssuesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DescriptionG]", "DescriptionG", value, sub, raw, _using); }
        public static SqlParamCollection Issues_DescriptionG(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DescriptionG]", "DescriptionG", value, sub, raw, _using); }
        public static IssuesParamCollection DescriptionH(this IssuesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DescriptionH]", "DescriptionH", value, sub, raw, _using); }
        public static SqlParamCollection Issues_DescriptionH(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DescriptionH]", "DescriptionH", value, sub, raw, _using); }
        public static IssuesParamCollection DescriptionI(this IssuesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DescriptionI]", "DescriptionI", value, sub, raw, _using); }
        public static SqlParamCollection Issues_DescriptionI(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DescriptionI]", "DescriptionI", value, sub, raw, _using); }
        public static IssuesParamCollection DescriptionJ(this IssuesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DescriptionJ]", "DescriptionJ", value, sub, raw, _using); }
        public static SqlParamCollection Issues_DescriptionJ(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DescriptionJ]", "DescriptionJ", value, sub, raw, _using); }
        public static IssuesParamCollection DescriptionK(this IssuesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DescriptionK]", "DescriptionK", value, sub, raw, _using); }
        public static SqlParamCollection Issues_DescriptionK(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DescriptionK]", "DescriptionK", value, sub, raw, _using); }
        public static IssuesParamCollection DescriptionL(this IssuesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DescriptionL]", "DescriptionL", value, sub, raw, _using); }
        public static SqlParamCollection Issues_DescriptionL(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DescriptionL]", "DescriptionL", value, sub, raw, _using); }
        public static IssuesParamCollection DescriptionM(this IssuesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DescriptionM]", "DescriptionM", value, sub, raw, _using); }
        public static SqlParamCollection Issues_DescriptionM(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DescriptionM]", "DescriptionM", value, sub, raw, _using); }
        public static IssuesParamCollection DescriptionN(this IssuesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DescriptionN]", "DescriptionN", value, sub, raw, _using); }
        public static SqlParamCollection Issues_DescriptionN(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DescriptionN]", "DescriptionN", value, sub, raw, _using); }
        public static IssuesParamCollection DescriptionO(this IssuesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DescriptionO]", "DescriptionO", value, sub, raw, _using); }
        public static SqlParamCollection Issues_DescriptionO(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DescriptionO]", "DescriptionO", value, sub, raw, _using); }
        public static IssuesParamCollection DescriptionP(this IssuesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DescriptionP]", "DescriptionP", value, sub, raw, _using); }
        public static SqlParamCollection Issues_DescriptionP(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DescriptionP]", "DescriptionP", value, sub, raw, _using); }
        public static IssuesParamCollection CheckA(this IssuesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CheckA]", "CheckA", value, sub, raw, _using); }
        public static SqlParamCollection Issues_CheckA(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CheckA]", "CheckA", value, sub, raw, _using); }
        public static IssuesParamCollection CheckB(this IssuesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CheckB]", "CheckB", value, sub, raw, _using); }
        public static SqlParamCollection Issues_CheckB(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CheckB]", "CheckB", value, sub, raw, _using); }
        public static IssuesParamCollection CheckC(this IssuesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CheckC]", "CheckC", value, sub, raw, _using); }
        public static SqlParamCollection Issues_CheckC(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CheckC]", "CheckC", value, sub, raw, _using); }
        public static IssuesParamCollection CheckD(this IssuesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CheckD]", "CheckD", value, sub, raw, _using); }
        public static SqlParamCollection Issues_CheckD(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CheckD]", "CheckD", value, sub, raw, _using); }
        public static IssuesParamCollection CheckE(this IssuesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CheckE]", "CheckE", value, sub, raw, _using); }
        public static SqlParamCollection Issues_CheckE(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CheckE]", "CheckE", value, sub, raw, _using); }
        public static IssuesParamCollection CheckF(this IssuesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CheckF]", "CheckF", value, sub, raw, _using); }
        public static SqlParamCollection Issues_CheckF(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CheckF]", "CheckF", value, sub, raw, _using); }
        public static IssuesParamCollection CheckG(this IssuesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CheckG]", "CheckG", value, sub, raw, _using); }
        public static SqlParamCollection Issues_CheckG(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CheckG]", "CheckG", value, sub, raw, _using); }
        public static IssuesParamCollection CheckH(this IssuesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CheckH]", "CheckH", value, sub, raw, _using); }
        public static SqlParamCollection Issues_CheckH(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CheckH]", "CheckH", value, sub, raw, _using); }
        public static IssuesParamCollection CheckI(this IssuesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CheckI]", "CheckI", value, sub, raw, _using); }
        public static SqlParamCollection Issues_CheckI(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CheckI]", "CheckI", value, sub, raw, _using); }
        public static IssuesParamCollection CheckJ(this IssuesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CheckJ]", "CheckJ", value, sub, raw, _using); }
        public static SqlParamCollection Issues_CheckJ(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CheckJ]", "CheckJ", value, sub, raw, _using); }
        public static IssuesParamCollection CheckK(this IssuesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CheckK]", "CheckK", value, sub, raw, _using); }
        public static SqlParamCollection Issues_CheckK(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CheckK]", "CheckK", value, sub, raw, _using); }
        public static IssuesParamCollection CheckL(this IssuesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CheckL]", "CheckL", value, sub, raw, _using); }
        public static SqlParamCollection Issues_CheckL(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CheckL]", "CheckL", value, sub, raw, _using); }
        public static IssuesParamCollection CheckM(this IssuesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CheckM]", "CheckM", value, sub, raw, _using); }
        public static SqlParamCollection Issues_CheckM(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CheckM]", "CheckM", value, sub, raw, _using); }
        public static IssuesParamCollection CheckN(this IssuesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CheckN]", "CheckN", value, sub, raw, _using); }
        public static SqlParamCollection Issues_CheckN(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CheckN]", "CheckN", value, sub, raw, _using); }
        public static IssuesParamCollection CheckO(this IssuesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CheckO]", "CheckO", value, sub, raw, _using); }
        public static SqlParamCollection Issues_CheckO(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CheckO]", "CheckO", value, sub, raw, _using); }
        public static IssuesParamCollection CheckP(this IssuesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CheckP]", "CheckP", value, sub, raw, _using); }
        public static SqlParamCollection Issues_CheckP(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CheckP]", "CheckP", value, sub, raw, _using); }
        public static IssuesParamCollection Comments(this IssuesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Comments]", "Comments", value, sub, raw, _using); }
        public static SqlParamCollection Issues_Comments(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Comments]", "Comments", value, sub, raw, _using); }
        public static IssuesParamCollection Creator(this IssuesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Creator]", "Creator", value, sub, raw, _using); }
        public static SqlParamCollection Issues_Creator(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Creator]", "Creator", value, sub, raw, _using); }
        public static IssuesParamCollection Updator(this IssuesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Updator]", "Updator", value, sub, raw, _using); }
        public static SqlParamCollection Issues_Updator(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Updator]", "Updator", value, sub, raw, _using); }
        public static IssuesParamCollection CreatedTime(this IssuesParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CreatedTime]", "CreatedTime", value, sub, raw, _using); }
        public static SqlParamCollection Issues_CreatedTime(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CreatedTime]", "CreatedTime", value, sub, raw, _using); }

        public static ResultsColumnCollection ResultsColumn()
        {
            return new ResultsColumnCollection();
        }

        public class ResultsColumnCollection : SqlColumnCollection
        {
            public ResultsColumnCollection Add(params string[] columnBrackets)
            {
                base.Add(false, columnBrackets);
                return this;
            }

            public new ResultsColumnCollection Add(bool duplicates = false, params string[] columnBrackets)
            {
                base.Add(duplicates, columnBrackets);
                return this;
            }
        }

        public static ResultsJoinCollection ResultsJoin()
        {
            return new ResultsJoinCollection();
        }

        public class ResultsJoinCollection : SqlJoinCollection
        {
            public new ResultsJoinCollection Add(params string[] columnBrackets)
            {
                columnBrackets.ForEach(columnBracket => base.Add(new SqlJoin(columnBracket)));
                return this;
            }
        }

        public static ResultsWhereCollection ResultsWhere()
        {
            return new ResultsWhereCollection();
        }

        public class ResultsWhereCollection : SqlWhereCollection
        {
            public new ResultsWhereCollection Add(
                string[] columnBrackets = null,
                string name = "",
                object value = null,
                string _operator = "=",
                string multiColumnOperator = " or ",
                string multiParamOperator = " and ",
                SqlStatement sub = null,
                string raw = "",
                SqlWhereCollection or = null,
                bool _using = true)
            {
                base.Add(new SqlWhere(
                    columnBrackets: columnBrackets,
                    name: name,
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    sub: sub,
                    raw: raw,
                    or: or,
                    _using: _using));
                return this;
            }
        }

        public static ResultsGroupByCollection ResultsGroupBy()
        {
            return new ResultsGroupByCollection();
        }

        public class ResultsGroupByCollection : SqlGroupByCollection
        {
            public new ResultsGroupByCollection Add(
                params string[] columnBrackets)
            {
                columnBrackets.ForEach(columnBracket =>
                    base.Add(new SqlGroupBy(columnBracket)));
                return this;
            }
        }

        public static ResultsHavingCollection ResultsHaving()
        {
            return new ResultsHavingCollection();
        }

        public class ResultsHavingCollection : SqlHavingCollection
        {
            public ResultsHavingCollection Add(
                string columnBracket, string name, object value, string _operator)
            {
                base.Add(new SqlHaving(
                    columnBracket: columnBracket,
                    name: name,
                    value: value,
                    _operator: _operator));
                return this;
            }
        }

        public static ResultsOrderByCollection ResultsOrderBy()
        {
            return new ResultsOrderByCollection();
        }

        public class ResultsOrderByCollection : SqlOrderByCollection
        {
            public new ResultsOrderByCollection Add(
                SqlOrderBy.Types type = SqlOrderBy.Types.asc,
                params string[] columnBrackets)
            {
                columnBrackets.ForEach(columnBracket =>
                    base.Add(new SqlOrderBy(columnBracket, type)));
                return this;
            }
        }

        public static ResultsParamCollection ResultsParam()
        {
            return new ResultsParamCollection();
        }

        public class ResultsParamCollection : SqlParamCollection
        {
            public new ResultsParamCollection Add(
                string columnBracket = "",
                string name = "",
                object value = null,
                SqlStatement sub = null,
                string raw = null,
                bool _using = true)
            {
                base.Add(new SqlParam(columnBracket, name, value, sub, raw, _using));
                return this;
            }
        }

        public static string Results_Title_WhereLike(string tableName = "t0") { return "([" + tableName + "].[Title] like '%' + @SearchText#ParamCount#_#CommandCount# + '%')"; }
        public static string Results_Body_WhereLike(string tableName = "t0") { return "([" + tableName + "].[Body] like '%' + @SearchText#ParamCount#_#CommandCount# + '%')"; }
        public static string Results_DescriptionA_WhereLike(string tableName = "t0") { return "([" + tableName + "].[DescriptionA] like '%' + @SearchText#ParamCount#_#CommandCount# + '%')"; }
        public static string Results_DescriptionB_WhereLike(string tableName = "t0") { return "([" + tableName + "].[DescriptionB] like '%' + @SearchText#ParamCount#_#CommandCount# + '%')"; }
        public static string Results_DescriptionC_WhereLike(string tableName = "t0") { return "([" + tableName + "].[DescriptionC] like '%' + @SearchText#ParamCount#_#CommandCount# + '%')"; }
        public static string Results_DescriptionD_WhereLike(string tableName = "t0") { return "([" + tableName + "].[DescriptionD] like '%' + @SearchText#ParamCount#_#CommandCount# + '%')"; }
        public static string Results_DescriptionE_WhereLike(string tableName = "t0") { return "([" + tableName + "].[DescriptionE] like '%' + @SearchText#ParamCount#_#CommandCount# + '%')"; }
        public static string Results_DescriptionF_WhereLike(string tableName = "t0") { return "([" + tableName + "].[DescriptionF] like '%' + @SearchText#ParamCount#_#CommandCount# + '%')"; }
        public static string Results_DescriptionG_WhereLike(string tableName = "t0") { return "([" + tableName + "].[DescriptionG] like '%' + @SearchText#ParamCount#_#CommandCount# + '%')"; }
        public static string Results_DescriptionH_WhereLike(string tableName = "t0") { return "([" + tableName + "].[DescriptionH] like '%' + @SearchText#ParamCount#_#CommandCount# + '%')"; }
        public static string Results_DescriptionI_WhereLike(string tableName = "t0") { return "([" + tableName + "].[DescriptionI] like '%' + @SearchText#ParamCount#_#CommandCount# + '%')"; }
        public static string Results_DescriptionJ_WhereLike(string tableName = "t0") { return "([" + tableName + "].[DescriptionJ] like '%' + @SearchText#ParamCount#_#CommandCount# + '%')"; }
        public static string Results_DescriptionK_WhereLike(string tableName = "t0") { return "([" + tableName + "].[DescriptionK] like '%' + @SearchText#ParamCount#_#CommandCount# + '%')"; }
        public static string Results_DescriptionL_WhereLike(string tableName = "t0") { return "([" + tableName + "].[DescriptionL] like '%' + @SearchText#ParamCount#_#CommandCount# + '%')"; }
        public static string Results_DescriptionM_WhereLike(string tableName = "t0") { return "([" + tableName + "].[DescriptionM] like '%' + @SearchText#ParamCount#_#CommandCount# + '%')"; }
        public static string Results_DescriptionN_WhereLike(string tableName = "t0") { return "([" + tableName + "].[DescriptionN] like '%' + @SearchText#ParamCount#_#CommandCount# + '%')"; }
        public static string Results_DescriptionO_WhereLike(string tableName = "t0") { return "([" + tableName + "].[DescriptionO] like '%' + @SearchText#ParamCount#_#CommandCount# + '%')"; }
        public static string Results_DescriptionP_WhereLike(string tableName = "t0") { return "([" + tableName + "].[DescriptionP] like '%' + @SearchText#ParamCount#_#CommandCount# + '%')"; }
        public const string SqlWhereExists_Results = "exists(select * from [Results] where #SqlWhere#)";
        public const string SqlWhereNotExists_Results = "not exists(select * from [Results] where #SqlWhere#)";
        public static ResultsColumnCollection SiteId(this ResultsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[SiteId]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Results_SiteId(this SqlColumnCollection self, string tableName = "Results", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[SiteId]" + _as.ExistsTo(" as [{0}]")); }
        public static ResultsColumnCollection UpdatedTime(this ResultsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[UpdatedTime]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Results_UpdatedTime(this SqlColumnCollection self, string tableName = "Results", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[UpdatedTime]" + _as.ExistsTo(" as [{0}]")); }
        public static ResultsColumnCollection ResultId(this ResultsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[ResultId]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Results_ResultId(this SqlColumnCollection self, string tableName = "Results", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[ResultId]" + _as.ExistsTo(" as [{0}]")); }
        public static ResultsColumnCollection Ver(this ResultsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Ver]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Results_Ver(this SqlColumnCollection self, string tableName = "Results", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Ver]" + _as.ExistsTo(" as [{0}]")); }
        public static ResultsColumnCollection Title(this ResultsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Title]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Results_Title(this SqlColumnCollection self, string tableName = "Results", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Title]" + _as.ExistsTo(" as [{0}]")); }
        public static ResultsColumnCollection Body(this ResultsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Body]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Results_Body(this SqlColumnCollection self, string tableName = "Results", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Body]" + _as.ExistsTo(" as [{0}]")); }
        public static ResultsColumnCollection Status(this ResultsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Status]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Results_Status(this SqlColumnCollection self, string tableName = "Results", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Status]" + _as.ExistsTo(" as [{0}]")); }
        public static ResultsColumnCollection Manager(this ResultsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Manager]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Results_Manager(this SqlColumnCollection self, string tableName = "Results", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Manager]" + _as.ExistsTo(" as [{0}]")); }
        public static ResultsColumnCollection Owner(this ResultsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Owner]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Results_Owner(this SqlColumnCollection self, string tableName = "Results", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Owner]" + _as.ExistsTo(" as [{0}]")); }
        public static ResultsColumnCollection ClassA(this ResultsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[ClassA]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Results_ClassA(this SqlColumnCollection self, string tableName = "Results", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[ClassA]" + _as.ExistsTo(" as [{0}]")); }
        public static ResultsColumnCollection ClassB(this ResultsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[ClassB]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Results_ClassB(this SqlColumnCollection self, string tableName = "Results", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[ClassB]" + _as.ExistsTo(" as [{0}]")); }
        public static ResultsColumnCollection ClassC(this ResultsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[ClassC]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Results_ClassC(this SqlColumnCollection self, string tableName = "Results", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[ClassC]" + _as.ExistsTo(" as [{0}]")); }
        public static ResultsColumnCollection ClassD(this ResultsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[ClassD]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Results_ClassD(this SqlColumnCollection self, string tableName = "Results", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[ClassD]" + _as.ExistsTo(" as [{0}]")); }
        public static ResultsColumnCollection ClassE(this ResultsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[ClassE]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Results_ClassE(this SqlColumnCollection self, string tableName = "Results", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[ClassE]" + _as.ExistsTo(" as [{0}]")); }
        public static ResultsColumnCollection ClassF(this ResultsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[ClassF]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Results_ClassF(this SqlColumnCollection self, string tableName = "Results", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[ClassF]" + _as.ExistsTo(" as [{0}]")); }
        public static ResultsColumnCollection ClassG(this ResultsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[ClassG]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Results_ClassG(this SqlColumnCollection self, string tableName = "Results", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[ClassG]" + _as.ExistsTo(" as [{0}]")); }
        public static ResultsColumnCollection ClassH(this ResultsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[ClassH]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Results_ClassH(this SqlColumnCollection self, string tableName = "Results", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[ClassH]" + _as.ExistsTo(" as [{0}]")); }
        public static ResultsColumnCollection ClassI(this ResultsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[ClassI]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Results_ClassI(this SqlColumnCollection self, string tableName = "Results", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[ClassI]" + _as.ExistsTo(" as [{0}]")); }
        public static ResultsColumnCollection ClassJ(this ResultsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[ClassJ]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Results_ClassJ(this SqlColumnCollection self, string tableName = "Results", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[ClassJ]" + _as.ExistsTo(" as [{0}]")); }
        public static ResultsColumnCollection ClassK(this ResultsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[ClassK]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Results_ClassK(this SqlColumnCollection self, string tableName = "Results", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[ClassK]" + _as.ExistsTo(" as [{0}]")); }
        public static ResultsColumnCollection ClassL(this ResultsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[ClassL]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Results_ClassL(this SqlColumnCollection self, string tableName = "Results", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[ClassL]" + _as.ExistsTo(" as [{0}]")); }
        public static ResultsColumnCollection ClassM(this ResultsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[ClassM]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Results_ClassM(this SqlColumnCollection self, string tableName = "Results", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[ClassM]" + _as.ExistsTo(" as [{0}]")); }
        public static ResultsColumnCollection ClassN(this ResultsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[ClassN]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Results_ClassN(this SqlColumnCollection self, string tableName = "Results", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[ClassN]" + _as.ExistsTo(" as [{0}]")); }
        public static ResultsColumnCollection ClassO(this ResultsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[ClassO]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Results_ClassO(this SqlColumnCollection self, string tableName = "Results", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[ClassO]" + _as.ExistsTo(" as [{0}]")); }
        public static ResultsColumnCollection ClassP(this ResultsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[ClassP]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Results_ClassP(this SqlColumnCollection self, string tableName = "Results", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[ClassP]" + _as.ExistsTo(" as [{0}]")); }
        public static ResultsColumnCollection NumA(this ResultsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[NumA]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Results_NumA(this SqlColumnCollection self, string tableName = "Results", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[NumA]" + _as.ExistsTo(" as [{0}]")); }
        public static ResultsColumnCollection NumB(this ResultsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[NumB]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Results_NumB(this SqlColumnCollection self, string tableName = "Results", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[NumB]" + _as.ExistsTo(" as [{0}]")); }
        public static ResultsColumnCollection NumC(this ResultsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[NumC]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Results_NumC(this SqlColumnCollection self, string tableName = "Results", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[NumC]" + _as.ExistsTo(" as [{0}]")); }
        public static ResultsColumnCollection NumD(this ResultsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[NumD]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Results_NumD(this SqlColumnCollection self, string tableName = "Results", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[NumD]" + _as.ExistsTo(" as [{0}]")); }
        public static ResultsColumnCollection NumE(this ResultsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[NumE]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Results_NumE(this SqlColumnCollection self, string tableName = "Results", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[NumE]" + _as.ExistsTo(" as [{0}]")); }
        public static ResultsColumnCollection NumF(this ResultsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[NumF]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Results_NumF(this SqlColumnCollection self, string tableName = "Results", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[NumF]" + _as.ExistsTo(" as [{0}]")); }
        public static ResultsColumnCollection NumG(this ResultsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[NumG]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Results_NumG(this SqlColumnCollection self, string tableName = "Results", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[NumG]" + _as.ExistsTo(" as [{0}]")); }
        public static ResultsColumnCollection NumH(this ResultsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[NumH]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Results_NumH(this SqlColumnCollection self, string tableName = "Results", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[NumH]" + _as.ExistsTo(" as [{0}]")); }
        public static ResultsColumnCollection NumI(this ResultsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[NumI]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Results_NumI(this SqlColumnCollection self, string tableName = "Results", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[NumI]" + _as.ExistsTo(" as [{0}]")); }
        public static ResultsColumnCollection NumJ(this ResultsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[NumJ]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Results_NumJ(this SqlColumnCollection self, string tableName = "Results", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[NumJ]" + _as.ExistsTo(" as [{0}]")); }
        public static ResultsColumnCollection NumK(this ResultsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[NumK]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Results_NumK(this SqlColumnCollection self, string tableName = "Results", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[NumK]" + _as.ExistsTo(" as [{0}]")); }
        public static ResultsColumnCollection NumL(this ResultsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[NumL]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Results_NumL(this SqlColumnCollection self, string tableName = "Results", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[NumL]" + _as.ExistsTo(" as [{0}]")); }
        public static ResultsColumnCollection NumM(this ResultsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[NumM]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Results_NumM(this SqlColumnCollection self, string tableName = "Results", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[NumM]" + _as.ExistsTo(" as [{0}]")); }
        public static ResultsColumnCollection NumN(this ResultsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[NumN]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Results_NumN(this SqlColumnCollection self, string tableName = "Results", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[NumN]" + _as.ExistsTo(" as [{0}]")); }
        public static ResultsColumnCollection NumO(this ResultsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[NumO]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Results_NumO(this SqlColumnCollection self, string tableName = "Results", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[NumO]" + _as.ExistsTo(" as [{0}]")); }
        public static ResultsColumnCollection NumP(this ResultsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[NumP]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Results_NumP(this SqlColumnCollection self, string tableName = "Results", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[NumP]" + _as.ExistsTo(" as [{0}]")); }
        public static ResultsColumnCollection DateA(this ResultsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[DateA]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Results_DateA(this SqlColumnCollection self, string tableName = "Results", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[DateA]" + _as.ExistsTo(" as [{0}]")); }
        public static ResultsColumnCollection DateB(this ResultsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[DateB]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Results_DateB(this SqlColumnCollection self, string tableName = "Results", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[DateB]" + _as.ExistsTo(" as [{0}]")); }
        public static ResultsColumnCollection DateC(this ResultsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[DateC]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Results_DateC(this SqlColumnCollection self, string tableName = "Results", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[DateC]" + _as.ExistsTo(" as [{0}]")); }
        public static ResultsColumnCollection DateD(this ResultsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[DateD]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Results_DateD(this SqlColumnCollection self, string tableName = "Results", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[DateD]" + _as.ExistsTo(" as [{0}]")); }
        public static ResultsColumnCollection DateE(this ResultsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[DateE]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Results_DateE(this SqlColumnCollection self, string tableName = "Results", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[DateE]" + _as.ExistsTo(" as [{0}]")); }
        public static ResultsColumnCollection DateF(this ResultsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[DateF]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Results_DateF(this SqlColumnCollection self, string tableName = "Results", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[DateF]" + _as.ExistsTo(" as [{0}]")); }
        public static ResultsColumnCollection DateG(this ResultsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[DateG]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Results_DateG(this SqlColumnCollection self, string tableName = "Results", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[DateG]" + _as.ExistsTo(" as [{0}]")); }
        public static ResultsColumnCollection DateH(this ResultsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[DateH]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Results_DateH(this SqlColumnCollection self, string tableName = "Results", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[DateH]" + _as.ExistsTo(" as [{0}]")); }
        public static ResultsColumnCollection DateI(this ResultsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[DateI]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Results_DateI(this SqlColumnCollection self, string tableName = "Results", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[DateI]" + _as.ExistsTo(" as [{0}]")); }
        public static ResultsColumnCollection DateJ(this ResultsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[DateJ]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Results_DateJ(this SqlColumnCollection self, string tableName = "Results", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[DateJ]" + _as.ExistsTo(" as [{0}]")); }
        public static ResultsColumnCollection DateK(this ResultsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[DateK]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Results_DateK(this SqlColumnCollection self, string tableName = "Results", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[DateK]" + _as.ExistsTo(" as [{0}]")); }
        public static ResultsColumnCollection DateL(this ResultsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[DateL]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Results_DateL(this SqlColumnCollection self, string tableName = "Results", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[DateL]" + _as.ExistsTo(" as [{0}]")); }
        public static ResultsColumnCollection DateM(this ResultsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[DateM]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Results_DateM(this SqlColumnCollection self, string tableName = "Results", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[DateM]" + _as.ExistsTo(" as [{0}]")); }
        public static ResultsColumnCollection DateN(this ResultsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[DateN]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Results_DateN(this SqlColumnCollection self, string tableName = "Results", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[DateN]" + _as.ExistsTo(" as [{0}]")); }
        public static ResultsColumnCollection DateO(this ResultsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[DateO]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Results_DateO(this SqlColumnCollection self, string tableName = "Results", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[DateO]" + _as.ExistsTo(" as [{0}]")); }
        public static ResultsColumnCollection DateP(this ResultsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[DateP]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Results_DateP(this SqlColumnCollection self, string tableName = "Results", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[DateP]" + _as.ExistsTo(" as [{0}]")); }
        public static ResultsColumnCollection DescriptionA(this ResultsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[DescriptionA]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Results_DescriptionA(this SqlColumnCollection self, string tableName = "Results", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[DescriptionA]" + _as.ExistsTo(" as [{0}]")); }
        public static ResultsColumnCollection DescriptionB(this ResultsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[DescriptionB]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Results_DescriptionB(this SqlColumnCollection self, string tableName = "Results", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[DescriptionB]" + _as.ExistsTo(" as [{0}]")); }
        public static ResultsColumnCollection DescriptionC(this ResultsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[DescriptionC]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Results_DescriptionC(this SqlColumnCollection self, string tableName = "Results", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[DescriptionC]" + _as.ExistsTo(" as [{0}]")); }
        public static ResultsColumnCollection DescriptionD(this ResultsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[DescriptionD]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Results_DescriptionD(this SqlColumnCollection self, string tableName = "Results", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[DescriptionD]" + _as.ExistsTo(" as [{0}]")); }
        public static ResultsColumnCollection DescriptionE(this ResultsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[DescriptionE]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Results_DescriptionE(this SqlColumnCollection self, string tableName = "Results", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[DescriptionE]" + _as.ExistsTo(" as [{0}]")); }
        public static ResultsColumnCollection DescriptionF(this ResultsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[DescriptionF]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Results_DescriptionF(this SqlColumnCollection self, string tableName = "Results", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[DescriptionF]" + _as.ExistsTo(" as [{0}]")); }
        public static ResultsColumnCollection DescriptionG(this ResultsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[DescriptionG]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Results_DescriptionG(this SqlColumnCollection self, string tableName = "Results", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[DescriptionG]" + _as.ExistsTo(" as [{0}]")); }
        public static ResultsColumnCollection DescriptionH(this ResultsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[DescriptionH]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Results_DescriptionH(this SqlColumnCollection self, string tableName = "Results", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[DescriptionH]" + _as.ExistsTo(" as [{0}]")); }
        public static ResultsColumnCollection DescriptionI(this ResultsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[DescriptionI]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Results_DescriptionI(this SqlColumnCollection self, string tableName = "Results", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[DescriptionI]" + _as.ExistsTo(" as [{0}]")); }
        public static ResultsColumnCollection DescriptionJ(this ResultsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[DescriptionJ]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Results_DescriptionJ(this SqlColumnCollection self, string tableName = "Results", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[DescriptionJ]" + _as.ExistsTo(" as [{0}]")); }
        public static ResultsColumnCollection DescriptionK(this ResultsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[DescriptionK]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Results_DescriptionK(this SqlColumnCollection self, string tableName = "Results", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[DescriptionK]" + _as.ExistsTo(" as [{0}]")); }
        public static ResultsColumnCollection DescriptionL(this ResultsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[DescriptionL]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Results_DescriptionL(this SqlColumnCollection self, string tableName = "Results", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[DescriptionL]" + _as.ExistsTo(" as [{0}]")); }
        public static ResultsColumnCollection DescriptionM(this ResultsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[DescriptionM]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Results_DescriptionM(this SqlColumnCollection self, string tableName = "Results", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[DescriptionM]" + _as.ExistsTo(" as [{0}]")); }
        public static ResultsColumnCollection DescriptionN(this ResultsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[DescriptionN]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Results_DescriptionN(this SqlColumnCollection self, string tableName = "Results", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[DescriptionN]" + _as.ExistsTo(" as [{0}]")); }
        public static ResultsColumnCollection DescriptionO(this ResultsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[DescriptionO]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Results_DescriptionO(this SqlColumnCollection self, string tableName = "Results", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[DescriptionO]" + _as.ExistsTo(" as [{0}]")); }
        public static ResultsColumnCollection DescriptionP(this ResultsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[DescriptionP]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Results_DescriptionP(this SqlColumnCollection self, string tableName = "Results", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[DescriptionP]" + _as.ExistsTo(" as [{0}]")); }
        public static ResultsColumnCollection CheckA(this ResultsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[CheckA]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Results_CheckA(this SqlColumnCollection self, string tableName = "Results", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[CheckA]" + _as.ExistsTo(" as [{0}]")); }
        public static ResultsColumnCollection CheckB(this ResultsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[CheckB]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Results_CheckB(this SqlColumnCollection self, string tableName = "Results", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[CheckB]" + _as.ExistsTo(" as [{0}]")); }
        public static ResultsColumnCollection CheckC(this ResultsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[CheckC]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Results_CheckC(this SqlColumnCollection self, string tableName = "Results", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[CheckC]" + _as.ExistsTo(" as [{0}]")); }
        public static ResultsColumnCollection CheckD(this ResultsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[CheckD]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Results_CheckD(this SqlColumnCollection self, string tableName = "Results", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[CheckD]" + _as.ExistsTo(" as [{0}]")); }
        public static ResultsColumnCollection CheckE(this ResultsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[CheckE]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Results_CheckE(this SqlColumnCollection self, string tableName = "Results", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[CheckE]" + _as.ExistsTo(" as [{0}]")); }
        public static ResultsColumnCollection CheckF(this ResultsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[CheckF]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Results_CheckF(this SqlColumnCollection self, string tableName = "Results", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[CheckF]" + _as.ExistsTo(" as [{0}]")); }
        public static ResultsColumnCollection CheckG(this ResultsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[CheckG]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Results_CheckG(this SqlColumnCollection self, string tableName = "Results", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[CheckG]" + _as.ExistsTo(" as [{0}]")); }
        public static ResultsColumnCollection CheckH(this ResultsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[CheckH]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Results_CheckH(this SqlColumnCollection self, string tableName = "Results", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[CheckH]" + _as.ExistsTo(" as [{0}]")); }
        public static ResultsColumnCollection CheckI(this ResultsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[CheckI]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Results_CheckI(this SqlColumnCollection self, string tableName = "Results", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[CheckI]" + _as.ExistsTo(" as [{0}]")); }
        public static ResultsColumnCollection CheckJ(this ResultsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[CheckJ]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Results_CheckJ(this SqlColumnCollection self, string tableName = "Results", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[CheckJ]" + _as.ExistsTo(" as [{0}]")); }
        public static ResultsColumnCollection CheckK(this ResultsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[CheckK]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Results_CheckK(this SqlColumnCollection self, string tableName = "Results", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[CheckK]" + _as.ExistsTo(" as [{0}]")); }
        public static ResultsColumnCollection CheckL(this ResultsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[CheckL]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Results_CheckL(this SqlColumnCollection self, string tableName = "Results", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[CheckL]" + _as.ExistsTo(" as [{0}]")); }
        public static ResultsColumnCollection CheckM(this ResultsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[CheckM]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Results_CheckM(this SqlColumnCollection self, string tableName = "Results", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[CheckM]" + _as.ExistsTo(" as [{0}]")); }
        public static ResultsColumnCollection CheckN(this ResultsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[CheckN]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Results_CheckN(this SqlColumnCollection self, string tableName = "Results", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[CheckN]" + _as.ExistsTo(" as [{0}]")); }
        public static ResultsColumnCollection CheckO(this ResultsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[CheckO]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Results_CheckO(this SqlColumnCollection self, string tableName = "Results", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[CheckO]" + _as.ExistsTo(" as [{0}]")); }
        public static ResultsColumnCollection CheckP(this ResultsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[CheckP]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Results_CheckP(this SqlColumnCollection self, string tableName = "Results", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[CheckP]" + _as.ExistsTo(" as [{0}]")); }
        public static ResultsColumnCollection Comments(this ResultsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Comments]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Results_Comments(this SqlColumnCollection self, string tableName = "Results", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Comments]" + _as.ExistsTo(" as [{0}]")); }
        public static ResultsColumnCollection Creator(this ResultsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Creator]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Results_Creator(this SqlColumnCollection self, string tableName = "Results", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Creator]" + _as.ExistsTo(" as [{0}]")); }
        public static ResultsColumnCollection Updator(this ResultsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Updator]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Results_Updator(this SqlColumnCollection self, string tableName = "Results", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Updator]" + _as.ExistsTo(" as [{0}]")); }
        public static ResultsColumnCollection CreatedTime(this ResultsColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[CreatedTime]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Results_CreatedTime(this SqlColumnCollection self, string tableName = "Results", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[CreatedTime]" + _as.ExistsTo(" as [{0}]")); }
        public static ResultsColumnCollection TitleBody(this ResultsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "[t0].[Title]", "[t0].[Body]"); }
        public static SqlColumnCollection Results_TitleBody(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "[t0].[Title]", "[t0].[Body]"); }
        public static ResultsColumnCollection ResultsCount(this ResultsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "count(*) as ResultsCount"); }
        public static ResultsColumnCollection NumATotal(this ResultsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "sum([t0].[NumA]) as [NumATotal]"); }
        public static SqlColumnCollection Results_NumATotal(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "sum([t0].[NumA]) as [NumATotal]"); }
        public static ResultsColumnCollection NumAAverage(this ResultsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "avg([t0].[NumA]) as [NumAAverage]"); }
        public static SqlColumnCollection Results_NumAAverage(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "avg([t0].[NumA]) as [NumAAverage]"); }
        public static ResultsColumnCollection NumBTotal(this ResultsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "sum([t0].[NumB]) as [NumBTotal]"); }
        public static SqlColumnCollection Results_NumBTotal(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "sum([t0].[NumB]) as [NumBTotal]"); }
        public static ResultsColumnCollection NumBAverage(this ResultsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "avg([t0].[NumB]) as [NumBAverage]"); }
        public static SqlColumnCollection Results_NumBAverage(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "avg([t0].[NumB]) as [NumBAverage]"); }
        public static ResultsColumnCollection NumCTotal(this ResultsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "sum([t0].[NumC]) as [NumCTotal]"); }
        public static SqlColumnCollection Results_NumCTotal(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "sum([t0].[NumC]) as [NumCTotal]"); }
        public static ResultsColumnCollection NumCAverage(this ResultsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "avg([t0].[NumC]) as [NumCAverage]"); }
        public static SqlColumnCollection Results_NumCAverage(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "avg([t0].[NumC]) as [NumCAverage]"); }
        public static ResultsColumnCollection NumDTotal(this ResultsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "sum([t0].[NumD]) as [NumDTotal]"); }
        public static SqlColumnCollection Results_NumDTotal(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "sum([t0].[NumD]) as [NumDTotal]"); }
        public static ResultsColumnCollection NumDAverage(this ResultsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "avg([t0].[NumD]) as [NumDAverage]"); }
        public static SqlColumnCollection Results_NumDAverage(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "avg([t0].[NumD]) as [NumDAverage]"); }
        public static ResultsColumnCollection NumETotal(this ResultsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "sum([t0].[NumE]) as [NumETotal]"); }
        public static SqlColumnCollection Results_NumETotal(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "sum([t0].[NumE]) as [NumETotal]"); }
        public static ResultsColumnCollection NumEAverage(this ResultsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "avg([t0].[NumE]) as [NumEAverage]"); }
        public static SqlColumnCollection Results_NumEAverage(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "avg([t0].[NumE]) as [NumEAverage]"); }
        public static ResultsColumnCollection NumFTotal(this ResultsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "sum([t0].[NumF]) as [NumFTotal]"); }
        public static SqlColumnCollection Results_NumFTotal(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "sum([t0].[NumF]) as [NumFTotal]"); }
        public static ResultsColumnCollection NumFAverage(this ResultsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "avg([t0].[NumF]) as [NumFAverage]"); }
        public static SqlColumnCollection Results_NumFAverage(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "avg([t0].[NumF]) as [NumFAverage]"); }
        public static ResultsColumnCollection NumGTotal(this ResultsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "sum([t0].[NumG]) as [NumGTotal]"); }
        public static SqlColumnCollection Results_NumGTotal(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "sum([t0].[NumG]) as [NumGTotal]"); }
        public static ResultsColumnCollection NumGAverage(this ResultsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "avg([t0].[NumG]) as [NumGAverage]"); }
        public static SqlColumnCollection Results_NumGAverage(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "avg([t0].[NumG]) as [NumGAverage]"); }
        public static ResultsColumnCollection NumHTotal(this ResultsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "sum([t0].[NumH]) as [NumHTotal]"); }
        public static SqlColumnCollection Results_NumHTotal(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "sum([t0].[NumH]) as [NumHTotal]"); }
        public static ResultsColumnCollection NumHAverage(this ResultsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "avg([t0].[NumH]) as [NumHAverage]"); }
        public static SqlColumnCollection Results_NumHAverage(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "avg([t0].[NumH]) as [NumHAverage]"); }
        public static ResultsColumnCollection NumITotal(this ResultsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "sum([t0].[NumI]) as [NumITotal]"); }
        public static SqlColumnCollection Results_NumITotal(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "sum([t0].[NumI]) as [NumITotal]"); }
        public static ResultsColumnCollection NumIAverage(this ResultsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "avg([t0].[NumI]) as [NumIAverage]"); }
        public static SqlColumnCollection Results_NumIAverage(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "avg([t0].[NumI]) as [NumIAverage]"); }
        public static ResultsColumnCollection NumJTotal(this ResultsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "sum([t0].[NumJ]) as [NumJTotal]"); }
        public static SqlColumnCollection Results_NumJTotal(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "sum([t0].[NumJ]) as [NumJTotal]"); }
        public static ResultsColumnCollection NumJAverage(this ResultsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "avg([t0].[NumJ]) as [NumJAverage]"); }
        public static SqlColumnCollection Results_NumJAverage(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "avg([t0].[NumJ]) as [NumJAverage]"); }
        public static ResultsColumnCollection NumKTotal(this ResultsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "sum([t0].[NumK]) as [NumKTotal]"); }
        public static SqlColumnCollection Results_NumKTotal(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "sum([t0].[NumK]) as [NumKTotal]"); }
        public static ResultsColumnCollection NumKAverage(this ResultsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "avg([t0].[NumK]) as [NumKAverage]"); }
        public static SqlColumnCollection Results_NumKAverage(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "avg([t0].[NumK]) as [NumKAverage]"); }
        public static ResultsColumnCollection NumLTotal(this ResultsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "sum([t0].[NumL]) as [NumLTotal]"); }
        public static SqlColumnCollection Results_NumLTotal(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "sum([t0].[NumL]) as [NumLTotal]"); }
        public static ResultsColumnCollection NumLAverage(this ResultsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "avg([t0].[NumL]) as [NumLAverage]"); }
        public static SqlColumnCollection Results_NumLAverage(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "avg([t0].[NumL]) as [NumLAverage]"); }
        public static ResultsColumnCollection NumMTotal(this ResultsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "sum([t0].[NumM]) as [NumMTotal]"); }
        public static SqlColumnCollection Results_NumMTotal(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "sum([t0].[NumM]) as [NumMTotal]"); }
        public static ResultsColumnCollection NumMAverage(this ResultsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "avg([t0].[NumM]) as [NumMAverage]"); }
        public static SqlColumnCollection Results_NumMAverage(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "avg([t0].[NumM]) as [NumMAverage]"); }
        public static ResultsColumnCollection NumNTotal(this ResultsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "sum([t0].[NumN]) as [NumNTotal]"); }
        public static SqlColumnCollection Results_NumNTotal(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "sum([t0].[NumN]) as [NumNTotal]"); }
        public static ResultsColumnCollection NumNAverage(this ResultsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "avg([t0].[NumN]) as [NumNAverage]"); }
        public static SqlColumnCollection Results_NumNAverage(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "avg([t0].[NumN]) as [NumNAverage]"); }
        public static ResultsColumnCollection NumOTotal(this ResultsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "sum([t0].[NumO]) as [NumOTotal]"); }
        public static SqlColumnCollection Results_NumOTotal(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "sum([t0].[NumO]) as [NumOTotal]"); }
        public static ResultsColumnCollection NumOAverage(this ResultsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "avg([t0].[NumO]) as [NumOAverage]"); }
        public static SqlColumnCollection Results_NumOAverage(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "avg([t0].[NumO]) as [NumOAverage]"); }
        public static ResultsColumnCollection NumPTotal(this ResultsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "sum([t0].[NumP]) as [NumPTotal]"); }
        public static SqlColumnCollection Results_NumPTotal(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "sum([t0].[NumP]) as [NumPTotal]"); }
        public static ResultsColumnCollection NumPAverage(this ResultsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "avg([t0].[NumP]) as [NumPAverage]"); }
        public static SqlColumnCollection Results_NumPAverage(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "avg([t0].[NumP]) as [NumPAverage]"); }
        public static ResultsColumnCollection NumAMax(this ResultsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[NumA]) as [NumAMax]"); }
        public static SqlColumnCollection Results_NumAMax(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[NumA]) as [NumAMax]"); }
        public static ResultsColumnCollection NumAMin(this ResultsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[NumA]) as [NumAMin]"); }
        public static SqlColumnCollection Results_NumAMin(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[NumA]) as [NumAMin]"); }
        public static ResultsColumnCollection NumBMax(this ResultsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[NumB]) as [NumBMax]"); }
        public static SqlColumnCollection Results_NumBMax(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[NumB]) as [NumBMax]"); }
        public static ResultsColumnCollection NumBMin(this ResultsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[NumB]) as [NumBMin]"); }
        public static SqlColumnCollection Results_NumBMin(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[NumB]) as [NumBMin]"); }
        public static ResultsColumnCollection NumCMax(this ResultsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[NumC]) as [NumCMax]"); }
        public static SqlColumnCollection Results_NumCMax(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[NumC]) as [NumCMax]"); }
        public static ResultsColumnCollection NumCMin(this ResultsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[NumC]) as [NumCMin]"); }
        public static SqlColumnCollection Results_NumCMin(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[NumC]) as [NumCMin]"); }
        public static ResultsColumnCollection NumDMax(this ResultsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[NumD]) as [NumDMax]"); }
        public static SqlColumnCollection Results_NumDMax(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[NumD]) as [NumDMax]"); }
        public static ResultsColumnCollection NumDMin(this ResultsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[NumD]) as [NumDMin]"); }
        public static SqlColumnCollection Results_NumDMin(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[NumD]) as [NumDMin]"); }
        public static ResultsColumnCollection NumEMax(this ResultsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[NumE]) as [NumEMax]"); }
        public static SqlColumnCollection Results_NumEMax(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[NumE]) as [NumEMax]"); }
        public static ResultsColumnCollection NumEMin(this ResultsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[NumE]) as [NumEMin]"); }
        public static SqlColumnCollection Results_NumEMin(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[NumE]) as [NumEMin]"); }
        public static ResultsColumnCollection NumFMax(this ResultsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[NumF]) as [NumFMax]"); }
        public static SqlColumnCollection Results_NumFMax(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[NumF]) as [NumFMax]"); }
        public static ResultsColumnCollection NumFMin(this ResultsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[NumF]) as [NumFMin]"); }
        public static SqlColumnCollection Results_NumFMin(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[NumF]) as [NumFMin]"); }
        public static ResultsColumnCollection NumGMax(this ResultsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[NumG]) as [NumGMax]"); }
        public static SqlColumnCollection Results_NumGMax(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[NumG]) as [NumGMax]"); }
        public static ResultsColumnCollection NumGMin(this ResultsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[NumG]) as [NumGMin]"); }
        public static SqlColumnCollection Results_NumGMin(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[NumG]) as [NumGMin]"); }
        public static ResultsColumnCollection NumHMax(this ResultsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[NumH]) as [NumHMax]"); }
        public static SqlColumnCollection Results_NumHMax(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[NumH]) as [NumHMax]"); }
        public static ResultsColumnCollection NumHMin(this ResultsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[NumH]) as [NumHMin]"); }
        public static SqlColumnCollection Results_NumHMin(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[NumH]) as [NumHMin]"); }
        public static ResultsColumnCollection NumIMax(this ResultsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[NumI]) as [NumIMax]"); }
        public static SqlColumnCollection Results_NumIMax(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[NumI]) as [NumIMax]"); }
        public static ResultsColumnCollection NumIMin(this ResultsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[NumI]) as [NumIMin]"); }
        public static SqlColumnCollection Results_NumIMin(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[NumI]) as [NumIMin]"); }
        public static ResultsColumnCollection NumJMax(this ResultsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[NumJ]) as [NumJMax]"); }
        public static SqlColumnCollection Results_NumJMax(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[NumJ]) as [NumJMax]"); }
        public static ResultsColumnCollection NumJMin(this ResultsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[NumJ]) as [NumJMin]"); }
        public static SqlColumnCollection Results_NumJMin(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[NumJ]) as [NumJMin]"); }
        public static ResultsColumnCollection NumKMax(this ResultsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[NumK]) as [NumKMax]"); }
        public static SqlColumnCollection Results_NumKMax(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[NumK]) as [NumKMax]"); }
        public static ResultsColumnCollection NumKMin(this ResultsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[NumK]) as [NumKMin]"); }
        public static SqlColumnCollection Results_NumKMin(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[NumK]) as [NumKMin]"); }
        public static ResultsColumnCollection NumLMax(this ResultsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[NumL]) as [NumLMax]"); }
        public static SqlColumnCollection Results_NumLMax(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[NumL]) as [NumLMax]"); }
        public static ResultsColumnCollection NumLMin(this ResultsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[NumL]) as [NumLMin]"); }
        public static SqlColumnCollection Results_NumLMin(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[NumL]) as [NumLMin]"); }
        public static ResultsColumnCollection NumMMax(this ResultsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[NumM]) as [NumMMax]"); }
        public static SqlColumnCollection Results_NumMMax(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[NumM]) as [NumMMax]"); }
        public static ResultsColumnCollection NumMMin(this ResultsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[NumM]) as [NumMMin]"); }
        public static SqlColumnCollection Results_NumMMin(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[NumM]) as [NumMMin]"); }
        public static ResultsColumnCollection NumNMax(this ResultsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[NumN]) as [NumNMax]"); }
        public static SqlColumnCollection Results_NumNMax(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[NumN]) as [NumNMax]"); }
        public static ResultsColumnCollection NumNMin(this ResultsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[NumN]) as [NumNMin]"); }
        public static SqlColumnCollection Results_NumNMin(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[NumN]) as [NumNMin]"); }
        public static ResultsColumnCollection NumOMax(this ResultsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[NumO]) as [NumOMax]"); }
        public static SqlColumnCollection Results_NumOMax(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[NumO]) as [NumOMax]"); }
        public static ResultsColumnCollection NumOMin(this ResultsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[NumO]) as [NumOMin]"); }
        public static SqlColumnCollection Results_NumOMin(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[NumO]) as [NumOMin]"); }
        public static ResultsColumnCollection NumPMax(this ResultsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[NumP]) as [NumPMax]"); }
        public static SqlColumnCollection Results_NumPMax(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[NumP]) as [NumPMax]"); }
        public static ResultsColumnCollection NumPMin(this ResultsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[NumP]) as [NumPMin]"); }
        public static SqlColumnCollection Results_NumPMin(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[NumP]) as [NumPMin]"); }
        public static ResultsColumnCollection CreatedTimeMax(this ResultsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[CreatedTime]) as [CreatedTimeMax]"); }
        public static SqlColumnCollection Results_CreatedTimeMax(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[CreatedTime]) as [CreatedTimeMax]"); }
        public static ResultsColumnCollection CreatedTimeMin(this ResultsColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[CreatedTime]) as [CreatedTimeMin]"); }
        public static SqlColumnCollection Results_CreatedTimeMin(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[CreatedTime]) as [CreatedTimeMin]"); }
        public static ResultsWhereCollection SiteId(this ResultsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[SiteId]" }, "SiteId", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Results_SiteId(this SqlWhereCollection self, object value = null, string tableName = "Results", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[SiteId]" }, "SiteId", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ResultsWhereCollection UpdatedTime(this ResultsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[UpdatedTime]" }, "UpdatedTime", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Results_UpdatedTime(this SqlWhereCollection self, object value = null, string tableName = "Results", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[UpdatedTime]" }, "UpdatedTime", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ResultsWhereCollection ResultId(this ResultsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[ResultId]" }, "ResultId", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Results_ResultId(this SqlWhereCollection self, object value = null, string tableName = "Results", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[ResultId]" }, "ResultId", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ResultsWhereCollection Ver(this ResultsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Ver]" }, "Ver", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Results_Ver(this SqlWhereCollection self, object value = null, string tableName = "Results", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Ver]" }, "Ver", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ResultsWhereCollection Title(this ResultsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Title]" }, "Title", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Results_Title(this SqlWhereCollection self, object value = null, string tableName = "Results", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Title]" }, "Title", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ResultsWhereCollection Body(this ResultsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Body]" }, "Body", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Results_Body(this SqlWhereCollection self, object value = null, string tableName = "Results", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Body]" }, "Body", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ResultsWhereCollection Status(this ResultsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Status]" }, "Status", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Results_Status(this SqlWhereCollection self, object value = null, string tableName = "Results", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Status]" }, "Status", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ResultsWhereCollection Manager(this ResultsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Manager]" }, "Manager", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Results_Manager(this SqlWhereCollection self, object value = null, string tableName = "Results", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Manager]" }, "Manager", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ResultsWhereCollection Owner(this ResultsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Owner]" }, "Owner", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Results_Owner(this SqlWhereCollection self, object value = null, string tableName = "Results", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Owner]" }, "Owner", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ResultsWhereCollection ClassA(this ResultsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[ClassA]" }, "ClassA", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Results_ClassA(this SqlWhereCollection self, object value = null, string tableName = "Results", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[ClassA]" }, "ClassA", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ResultsWhereCollection ClassB(this ResultsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[ClassB]" }, "ClassB", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Results_ClassB(this SqlWhereCollection self, object value = null, string tableName = "Results", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[ClassB]" }, "ClassB", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ResultsWhereCollection ClassC(this ResultsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[ClassC]" }, "ClassC", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Results_ClassC(this SqlWhereCollection self, object value = null, string tableName = "Results", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[ClassC]" }, "ClassC", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ResultsWhereCollection ClassD(this ResultsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[ClassD]" }, "ClassD", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Results_ClassD(this SqlWhereCollection self, object value = null, string tableName = "Results", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[ClassD]" }, "ClassD", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ResultsWhereCollection ClassE(this ResultsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[ClassE]" }, "ClassE", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Results_ClassE(this SqlWhereCollection self, object value = null, string tableName = "Results", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[ClassE]" }, "ClassE", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ResultsWhereCollection ClassF(this ResultsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[ClassF]" }, "ClassF", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Results_ClassF(this SqlWhereCollection self, object value = null, string tableName = "Results", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[ClassF]" }, "ClassF", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ResultsWhereCollection ClassG(this ResultsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[ClassG]" }, "ClassG", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Results_ClassG(this SqlWhereCollection self, object value = null, string tableName = "Results", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[ClassG]" }, "ClassG", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ResultsWhereCollection ClassH(this ResultsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[ClassH]" }, "ClassH", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Results_ClassH(this SqlWhereCollection self, object value = null, string tableName = "Results", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[ClassH]" }, "ClassH", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ResultsWhereCollection ClassI(this ResultsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[ClassI]" }, "ClassI", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Results_ClassI(this SqlWhereCollection self, object value = null, string tableName = "Results", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[ClassI]" }, "ClassI", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ResultsWhereCollection ClassJ(this ResultsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[ClassJ]" }, "ClassJ", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Results_ClassJ(this SqlWhereCollection self, object value = null, string tableName = "Results", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[ClassJ]" }, "ClassJ", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ResultsWhereCollection ClassK(this ResultsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[ClassK]" }, "ClassK", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Results_ClassK(this SqlWhereCollection self, object value = null, string tableName = "Results", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[ClassK]" }, "ClassK", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ResultsWhereCollection ClassL(this ResultsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[ClassL]" }, "ClassL", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Results_ClassL(this SqlWhereCollection self, object value = null, string tableName = "Results", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[ClassL]" }, "ClassL", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ResultsWhereCollection ClassM(this ResultsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[ClassM]" }, "ClassM", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Results_ClassM(this SqlWhereCollection self, object value = null, string tableName = "Results", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[ClassM]" }, "ClassM", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ResultsWhereCollection ClassN(this ResultsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[ClassN]" }, "ClassN", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Results_ClassN(this SqlWhereCollection self, object value = null, string tableName = "Results", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[ClassN]" }, "ClassN", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ResultsWhereCollection ClassO(this ResultsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[ClassO]" }, "ClassO", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Results_ClassO(this SqlWhereCollection self, object value = null, string tableName = "Results", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[ClassO]" }, "ClassO", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ResultsWhereCollection ClassP(this ResultsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[ClassP]" }, "ClassP", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Results_ClassP(this SqlWhereCollection self, object value = null, string tableName = "Results", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[ClassP]" }, "ClassP", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ResultsWhereCollection NumA(this ResultsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[NumA]" }, "NumA", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Results_NumA(this SqlWhereCollection self, object value = null, string tableName = "Results", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[NumA]" }, "NumA", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ResultsWhereCollection NumB(this ResultsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[NumB]" }, "NumB", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Results_NumB(this SqlWhereCollection self, object value = null, string tableName = "Results", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[NumB]" }, "NumB", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ResultsWhereCollection NumC(this ResultsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[NumC]" }, "NumC", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Results_NumC(this SqlWhereCollection self, object value = null, string tableName = "Results", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[NumC]" }, "NumC", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ResultsWhereCollection NumD(this ResultsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[NumD]" }, "NumD", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Results_NumD(this SqlWhereCollection self, object value = null, string tableName = "Results", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[NumD]" }, "NumD", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ResultsWhereCollection NumE(this ResultsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[NumE]" }, "NumE", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Results_NumE(this SqlWhereCollection self, object value = null, string tableName = "Results", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[NumE]" }, "NumE", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ResultsWhereCollection NumF(this ResultsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[NumF]" }, "NumF", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Results_NumF(this SqlWhereCollection self, object value = null, string tableName = "Results", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[NumF]" }, "NumF", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ResultsWhereCollection NumG(this ResultsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[NumG]" }, "NumG", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Results_NumG(this SqlWhereCollection self, object value = null, string tableName = "Results", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[NumG]" }, "NumG", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ResultsWhereCollection NumH(this ResultsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[NumH]" }, "NumH", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Results_NumH(this SqlWhereCollection self, object value = null, string tableName = "Results", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[NumH]" }, "NumH", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ResultsWhereCollection NumI(this ResultsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[NumI]" }, "NumI", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Results_NumI(this SqlWhereCollection self, object value = null, string tableName = "Results", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[NumI]" }, "NumI", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ResultsWhereCollection NumJ(this ResultsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[NumJ]" }, "NumJ", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Results_NumJ(this SqlWhereCollection self, object value = null, string tableName = "Results", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[NumJ]" }, "NumJ", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ResultsWhereCollection NumK(this ResultsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[NumK]" }, "NumK", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Results_NumK(this SqlWhereCollection self, object value = null, string tableName = "Results", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[NumK]" }, "NumK", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ResultsWhereCollection NumL(this ResultsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[NumL]" }, "NumL", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Results_NumL(this SqlWhereCollection self, object value = null, string tableName = "Results", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[NumL]" }, "NumL", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ResultsWhereCollection NumM(this ResultsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[NumM]" }, "NumM", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Results_NumM(this SqlWhereCollection self, object value = null, string tableName = "Results", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[NumM]" }, "NumM", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ResultsWhereCollection NumN(this ResultsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[NumN]" }, "NumN", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Results_NumN(this SqlWhereCollection self, object value = null, string tableName = "Results", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[NumN]" }, "NumN", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ResultsWhereCollection NumO(this ResultsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[NumO]" }, "NumO", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Results_NumO(this SqlWhereCollection self, object value = null, string tableName = "Results", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[NumO]" }, "NumO", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ResultsWhereCollection NumP(this ResultsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[NumP]" }, "NumP", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Results_NumP(this SqlWhereCollection self, object value = null, string tableName = "Results", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[NumP]" }, "NumP", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ResultsWhereCollection DateA(this ResultsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[DateA]" }, "DateA", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Results_DateA(this SqlWhereCollection self, object value = null, string tableName = "Results", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[DateA]" }, "DateA", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ResultsWhereCollection DateB(this ResultsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[DateB]" }, "DateB", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Results_DateB(this SqlWhereCollection self, object value = null, string tableName = "Results", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[DateB]" }, "DateB", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ResultsWhereCollection DateC(this ResultsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[DateC]" }, "DateC", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Results_DateC(this SqlWhereCollection self, object value = null, string tableName = "Results", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[DateC]" }, "DateC", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ResultsWhereCollection DateD(this ResultsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[DateD]" }, "DateD", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Results_DateD(this SqlWhereCollection self, object value = null, string tableName = "Results", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[DateD]" }, "DateD", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ResultsWhereCollection DateE(this ResultsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[DateE]" }, "DateE", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Results_DateE(this SqlWhereCollection self, object value = null, string tableName = "Results", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[DateE]" }, "DateE", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ResultsWhereCollection DateF(this ResultsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[DateF]" }, "DateF", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Results_DateF(this SqlWhereCollection self, object value = null, string tableName = "Results", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[DateF]" }, "DateF", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ResultsWhereCollection DateG(this ResultsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[DateG]" }, "DateG", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Results_DateG(this SqlWhereCollection self, object value = null, string tableName = "Results", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[DateG]" }, "DateG", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ResultsWhereCollection DateH(this ResultsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[DateH]" }, "DateH", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Results_DateH(this SqlWhereCollection self, object value = null, string tableName = "Results", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[DateH]" }, "DateH", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ResultsWhereCollection DateI(this ResultsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[DateI]" }, "DateI", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Results_DateI(this SqlWhereCollection self, object value = null, string tableName = "Results", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[DateI]" }, "DateI", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ResultsWhereCollection DateJ(this ResultsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[DateJ]" }, "DateJ", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Results_DateJ(this SqlWhereCollection self, object value = null, string tableName = "Results", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[DateJ]" }, "DateJ", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ResultsWhereCollection DateK(this ResultsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[DateK]" }, "DateK", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Results_DateK(this SqlWhereCollection self, object value = null, string tableName = "Results", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[DateK]" }, "DateK", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ResultsWhereCollection DateL(this ResultsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[DateL]" }, "DateL", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Results_DateL(this SqlWhereCollection self, object value = null, string tableName = "Results", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[DateL]" }, "DateL", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ResultsWhereCollection DateM(this ResultsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[DateM]" }, "DateM", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Results_DateM(this SqlWhereCollection self, object value = null, string tableName = "Results", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[DateM]" }, "DateM", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ResultsWhereCollection DateN(this ResultsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[DateN]" }, "DateN", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Results_DateN(this SqlWhereCollection self, object value = null, string tableName = "Results", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[DateN]" }, "DateN", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ResultsWhereCollection DateO(this ResultsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[DateO]" }, "DateO", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Results_DateO(this SqlWhereCollection self, object value = null, string tableName = "Results", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[DateO]" }, "DateO", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ResultsWhereCollection DateP(this ResultsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[DateP]" }, "DateP", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Results_DateP(this SqlWhereCollection self, object value = null, string tableName = "Results", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[DateP]" }, "DateP", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ResultsWhereCollection DescriptionA(this ResultsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[DescriptionA]" }, "DescriptionA", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Results_DescriptionA(this SqlWhereCollection self, object value = null, string tableName = "Results", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[DescriptionA]" }, "DescriptionA", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ResultsWhereCollection DescriptionB(this ResultsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[DescriptionB]" }, "DescriptionB", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Results_DescriptionB(this SqlWhereCollection self, object value = null, string tableName = "Results", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[DescriptionB]" }, "DescriptionB", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ResultsWhereCollection DescriptionC(this ResultsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[DescriptionC]" }, "DescriptionC", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Results_DescriptionC(this SqlWhereCollection self, object value = null, string tableName = "Results", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[DescriptionC]" }, "DescriptionC", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ResultsWhereCollection DescriptionD(this ResultsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[DescriptionD]" }, "DescriptionD", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Results_DescriptionD(this SqlWhereCollection self, object value = null, string tableName = "Results", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[DescriptionD]" }, "DescriptionD", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ResultsWhereCollection DescriptionE(this ResultsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[DescriptionE]" }, "DescriptionE", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Results_DescriptionE(this SqlWhereCollection self, object value = null, string tableName = "Results", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[DescriptionE]" }, "DescriptionE", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ResultsWhereCollection DescriptionF(this ResultsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[DescriptionF]" }, "DescriptionF", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Results_DescriptionF(this SqlWhereCollection self, object value = null, string tableName = "Results", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[DescriptionF]" }, "DescriptionF", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ResultsWhereCollection DescriptionG(this ResultsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[DescriptionG]" }, "DescriptionG", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Results_DescriptionG(this SqlWhereCollection self, object value = null, string tableName = "Results", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[DescriptionG]" }, "DescriptionG", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ResultsWhereCollection DescriptionH(this ResultsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[DescriptionH]" }, "DescriptionH", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Results_DescriptionH(this SqlWhereCollection self, object value = null, string tableName = "Results", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[DescriptionH]" }, "DescriptionH", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ResultsWhereCollection DescriptionI(this ResultsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[DescriptionI]" }, "DescriptionI", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Results_DescriptionI(this SqlWhereCollection self, object value = null, string tableName = "Results", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[DescriptionI]" }, "DescriptionI", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ResultsWhereCollection DescriptionJ(this ResultsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[DescriptionJ]" }, "DescriptionJ", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Results_DescriptionJ(this SqlWhereCollection self, object value = null, string tableName = "Results", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[DescriptionJ]" }, "DescriptionJ", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ResultsWhereCollection DescriptionK(this ResultsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[DescriptionK]" }, "DescriptionK", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Results_DescriptionK(this SqlWhereCollection self, object value = null, string tableName = "Results", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[DescriptionK]" }, "DescriptionK", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ResultsWhereCollection DescriptionL(this ResultsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[DescriptionL]" }, "DescriptionL", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Results_DescriptionL(this SqlWhereCollection self, object value = null, string tableName = "Results", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[DescriptionL]" }, "DescriptionL", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ResultsWhereCollection DescriptionM(this ResultsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[DescriptionM]" }, "DescriptionM", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Results_DescriptionM(this SqlWhereCollection self, object value = null, string tableName = "Results", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[DescriptionM]" }, "DescriptionM", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ResultsWhereCollection DescriptionN(this ResultsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[DescriptionN]" }, "DescriptionN", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Results_DescriptionN(this SqlWhereCollection self, object value = null, string tableName = "Results", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[DescriptionN]" }, "DescriptionN", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ResultsWhereCollection DescriptionO(this ResultsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[DescriptionO]" }, "DescriptionO", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Results_DescriptionO(this SqlWhereCollection self, object value = null, string tableName = "Results", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[DescriptionO]" }, "DescriptionO", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ResultsWhereCollection DescriptionP(this ResultsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[DescriptionP]" }, "DescriptionP", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Results_DescriptionP(this SqlWhereCollection self, object value = null, string tableName = "Results", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[DescriptionP]" }, "DescriptionP", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ResultsWhereCollection CheckA(this ResultsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[CheckA]" }, "CheckA", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Results_CheckA(this SqlWhereCollection self, object value = null, string tableName = "Results", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[CheckA]" }, "CheckA", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ResultsWhereCollection CheckB(this ResultsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[CheckB]" }, "CheckB", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Results_CheckB(this SqlWhereCollection self, object value = null, string tableName = "Results", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[CheckB]" }, "CheckB", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ResultsWhereCollection CheckC(this ResultsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[CheckC]" }, "CheckC", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Results_CheckC(this SqlWhereCollection self, object value = null, string tableName = "Results", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[CheckC]" }, "CheckC", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ResultsWhereCollection CheckD(this ResultsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[CheckD]" }, "CheckD", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Results_CheckD(this SqlWhereCollection self, object value = null, string tableName = "Results", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[CheckD]" }, "CheckD", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ResultsWhereCollection CheckE(this ResultsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[CheckE]" }, "CheckE", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Results_CheckE(this SqlWhereCollection self, object value = null, string tableName = "Results", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[CheckE]" }, "CheckE", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ResultsWhereCollection CheckF(this ResultsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[CheckF]" }, "CheckF", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Results_CheckF(this SqlWhereCollection self, object value = null, string tableName = "Results", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[CheckF]" }, "CheckF", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ResultsWhereCollection CheckG(this ResultsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[CheckG]" }, "CheckG", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Results_CheckG(this SqlWhereCollection self, object value = null, string tableName = "Results", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[CheckG]" }, "CheckG", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ResultsWhereCollection CheckH(this ResultsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[CheckH]" }, "CheckH", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Results_CheckH(this SqlWhereCollection self, object value = null, string tableName = "Results", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[CheckH]" }, "CheckH", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ResultsWhereCollection CheckI(this ResultsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[CheckI]" }, "CheckI", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Results_CheckI(this SqlWhereCollection self, object value = null, string tableName = "Results", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[CheckI]" }, "CheckI", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ResultsWhereCollection CheckJ(this ResultsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[CheckJ]" }, "CheckJ", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Results_CheckJ(this SqlWhereCollection self, object value = null, string tableName = "Results", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[CheckJ]" }, "CheckJ", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ResultsWhereCollection CheckK(this ResultsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[CheckK]" }, "CheckK", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Results_CheckK(this SqlWhereCollection self, object value = null, string tableName = "Results", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[CheckK]" }, "CheckK", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ResultsWhereCollection CheckL(this ResultsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[CheckL]" }, "CheckL", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Results_CheckL(this SqlWhereCollection self, object value = null, string tableName = "Results", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[CheckL]" }, "CheckL", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ResultsWhereCollection CheckM(this ResultsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[CheckM]" }, "CheckM", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Results_CheckM(this SqlWhereCollection self, object value = null, string tableName = "Results", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[CheckM]" }, "CheckM", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ResultsWhereCollection CheckN(this ResultsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[CheckN]" }, "CheckN", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Results_CheckN(this SqlWhereCollection self, object value = null, string tableName = "Results", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[CheckN]" }, "CheckN", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ResultsWhereCollection CheckO(this ResultsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[CheckO]" }, "CheckO", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Results_CheckO(this SqlWhereCollection self, object value = null, string tableName = "Results", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[CheckO]" }, "CheckO", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ResultsWhereCollection CheckP(this ResultsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[CheckP]" }, "CheckP", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Results_CheckP(this SqlWhereCollection self, object value = null, string tableName = "Results", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[CheckP]" }, "CheckP", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ResultsWhereCollection Comments(this ResultsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Comments]" }, "Comments", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Results_Comments(this SqlWhereCollection self, object value = null, string tableName = "Results", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Comments]" }, "Comments", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ResultsWhereCollection Creator(this ResultsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Creator]" }, "Creator", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Results_Creator(this SqlWhereCollection self, object value = null, string tableName = "Results", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Creator]" }, "Creator", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ResultsWhereCollection Updator(this ResultsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Updator]" }, "Updator", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Results_Updator(this SqlWhereCollection self, object value = null, string tableName = "Results", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Updator]" }, "Updator", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ResultsWhereCollection CreatedTime(this ResultsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[CreatedTime]" }, "CreatedTime", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Results_CreatedTime(this SqlWhereCollection self, object value = null, string tableName = "Results", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[CreatedTime]" }, "CreatedTime", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ResultsWhereCollection TitleBody(this ResultsWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Title]", "[t0].[Body]" }, "TitleBody", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Results_TitleBody(this SqlWhereCollection self, object value = null, string tableName = "Results", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Title]", "[t0].[Body]" }, "TitleBody", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static ResultsWhereCollection SiteId_In(this ResultsWhereCollection self, IEnumerable<long> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[SiteId]" }, "SiteId", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Results_SiteId_In(this SqlWhereCollection self, IEnumerable<long> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[SiteId]" }, "SiteId", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static ResultsWhereCollection ResultId_In(this ResultsWhereCollection self, IEnumerable<long> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[ResultId]" }, "ResultId", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Results_ResultId_In(this SqlWhereCollection self, IEnumerable<long> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[ResultId]" }, "ResultId", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static ResultsWhereCollection Ver_In(this ResultsWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Ver]" }, "Ver", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Results_Ver_In(this SqlWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Ver]" }, "Ver", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static ResultsWhereCollection Status_In(this ResultsWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Status]" }, "Status", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Results_Status_In(this SqlWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Status]" }, "Status", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static ResultsWhereCollection Manager_In(this ResultsWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Manager]" }, "Manager", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Results_Manager_In(this SqlWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Manager]" }, "Manager", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static ResultsWhereCollection Owner_In(this ResultsWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Owner]" }, "Owner", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Results_Owner_In(this SqlWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Owner]" }, "Owner", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static ResultsWhereCollection NumA_In(this ResultsWhereCollection self, IEnumerable<decimal> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[NumA]" }, "NumA", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Results_NumA_In(this SqlWhereCollection self, IEnumerable<decimal> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[NumA]" }, "NumA", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static ResultsWhereCollection NumB_In(this ResultsWhereCollection self, IEnumerable<decimal> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[NumB]" }, "NumB", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Results_NumB_In(this SqlWhereCollection self, IEnumerable<decimal> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[NumB]" }, "NumB", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static ResultsWhereCollection NumC_In(this ResultsWhereCollection self, IEnumerable<decimal> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[NumC]" }, "NumC", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Results_NumC_In(this SqlWhereCollection self, IEnumerable<decimal> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[NumC]" }, "NumC", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static ResultsWhereCollection NumD_In(this ResultsWhereCollection self, IEnumerable<decimal> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[NumD]" }, "NumD", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Results_NumD_In(this SqlWhereCollection self, IEnumerable<decimal> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[NumD]" }, "NumD", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static ResultsWhereCollection NumE_In(this ResultsWhereCollection self, IEnumerable<decimal> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[NumE]" }, "NumE", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Results_NumE_In(this SqlWhereCollection self, IEnumerable<decimal> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[NumE]" }, "NumE", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static ResultsWhereCollection NumF_In(this ResultsWhereCollection self, IEnumerable<decimal> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[NumF]" }, "NumF", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Results_NumF_In(this SqlWhereCollection self, IEnumerable<decimal> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[NumF]" }, "NumF", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static ResultsWhereCollection NumG_In(this ResultsWhereCollection self, IEnumerable<decimal> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[NumG]" }, "NumG", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Results_NumG_In(this SqlWhereCollection self, IEnumerable<decimal> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[NumG]" }, "NumG", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static ResultsWhereCollection NumH_In(this ResultsWhereCollection self, IEnumerable<decimal> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[NumH]" }, "NumH", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Results_NumH_In(this SqlWhereCollection self, IEnumerable<decimal> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[NumH]" }, "NumH", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static ResultsWhereCollection NumI_In(this ResultsWhereCollection self, IEnumerable<decimal> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[NumI]" }, "NumI", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Results_NumI_In(this SqlWhereCollection self, IEnumerable<decimal> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[NumI]" }, "NumI", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static ResultsWhereCollection NumJ_In(this ResultsWhereCollection self, IEnumerable<decimal> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[NumJ]" }, "NumJ", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Results_NumJ_In(this SqlWhereCollection self, IEnumerable<decimal> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[NumJ]" }, "NumJ", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static ResultsWhereCollection NumK_In(this ResultsWhereCollection self, IEnumerable<decimal> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[NumK]" }, "NumK", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Results_NumK_In(this SqlWhereCollection self, IEnumerable<decimal> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[NumK]" }, "NumK", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static ResultsWhereCollection NumL_In(this ResultsWhereCollection self, IEnumerable<decimal> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[NumL]" }, "NumL", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Results_NumL_In(this SqlWhereCollection self, IEnumerable<decimal> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[NumL]" }, "NumL", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static ResultsWhereCollection NumM_In(this ResultsWhereCollection self, IEnumerable<decimal> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[NumM]" }, "NumM", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Results_NumM_In(this SqlWhereCollection self, IEnumerable<decimal> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[NumM]" }, "NumM", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static ResultsWhereCollection NumN_In(this ResultsWhereCollection self, IEnumerable<decimal> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[NumN]" }, "NumN", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Results_NumN_In(this SqlWhereCollection self, IEnumerable<decimal> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[NumN]" }, "NumN", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static ResultsWhereCollection NumO_In(this ResultsWhereCollection self, IEnumerable<decimal> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[NumO]" }, "NumO", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Results_NumO_In(this SqlWhereCollection self, IEnumerable<decimal> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[NumO]" }, "NumO", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static ResultsWhereCollection NumP_In(this ResultsWhereCollection self, IEnumerable<decimal> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[NumP]" }, "NumP", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Results_NumP_In(this SqlWhereCollection self, IEnumerable<decimal> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[NumP]" }, "NumP", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static ResultsWhereCollection Creator_In(this ResultsWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Creator]" }, "Creator", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Results_Creator_In(this SqlWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Creator]" }, "Creator", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static ResultsWhereCollection Updator_In(this ResultsWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Updator]" }, "Updator", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Results_Updator_In(this SqlWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Updator]" }, "Updator", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static ResultsWhereCollection SiteId_Between(this ResultsWhereCollection self, long begin, long end, bool _using = true) { return self.Add(new string[] { "[t0].[SiteId]" }, "SiteId", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Results_SiteId_Between(this SqlWhereCollection self, long begin, long end, bool _using = true) { return self.Add(new string[] { "[t0].[SiteId]" }, "SiteId", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static ResultsWhereCollection ResultId_Between(this ResultsWhereCollection self, long begin, long end, bool _using = true) { return self.Add(new string[] { "[t0].[ResultId]" }, "ResultId", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Results_ResultId_Between(this SqlWhereCollection self, long begin, long end, bool _using = true) { return self.Add(new string[] { "[t0].[ResultId]" }, "ResultId", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static ResultsWhereCollection Ver_Between(this ResultsWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Ver]" }, "Ver", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Results_Ver_Between(this SqlWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Ver]" }, "Ver", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static ResultsWhereCollection Status_Between(this ResultsWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Status]" }, "Status", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Results_Status_Between(this SqlWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Status]" }, "Status", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static ResultsWhereCollection Manager_Between(this ResultsWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Manager]" }, "Manager", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Results_Manager_Between(this SqlWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Manager]" }, "Manager", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static ResultsWhereCollection Owner_Between(this ResultsWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Owner]" }, "Owner", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Results_Owner_Between(this SqlWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Owner]" }, "Owner", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static ResultsWhereCollection NumA_Between(this ResultsWhereCollection self, decimal begin, decimal end, bool _using = true) { return self.Add(new string[] { "[t0].[NumA]" }, "NumA", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Results_NumA_Between(this SqlWhereCollection self, decimal begin, decimal end, bool _using = true) { return self.Add(new string[] { "[t0].[NumA]" }, "NumA", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static ResultsWhereCollection NumB_Between(this ResultsWhereCollection self, decimal begin, decimal end, bool _using = true) { return self.Add(new string[] { "[t0].[NumB]" }, "NumB", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Results_NumB_Between(this SqlWhereCollection self, decimal begin, decimal end, bool _using = true) { return self.Add(new string[] { "[t0].[NumB]" }, "NumB", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static ResultsWhereCollection NumC_Between(this ResultsWhereCollection self, decimal begin, decimal end, bool _using = true) { return self.Add(new string[] { "[t0].[NumC]" }, "NumC", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Results_NumC_Between(this SqlWhereCollection self, decimal begin, decimal end, bool _using = true) { return self.Add(new string[] { "[t0].[NumC]" }, "NumC", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static ResultsWhereCollection NumD_Between(this ResultsWhereCollection self, decimal begin, decimal end, bool _using = true) { return self.Add(new string[] { "[t0].[NumD]" }, "NumD", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Results_NumD_Between(this SqlWhereCollection self, decimal begin, decimal end, bool _using = true) { return self.Add(new string[] { "[t0].[NumD]" }, "NumD", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static ResultsWhereCollection NumE_Between(this ResultsWhereCollection self, decimal begin, decimal end, bool _using = true) { return self.Add(new string[] { "[t0].[NumE]" }, "NumE", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Results_NumE_Between(this SqlWhereCollection self, decimal begin, decimal end, bool _using = true) { return self.Add(new string[] { "[t0].[NumE]" }, "NumE", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static ResultsWhereCollection NumF_Between(this ResultsWhereCollection self, decimal begin, decimal end, bool _using = true) { return self.Add(new string[] { "[t0].[NumF]" }, "NumF", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Results_NumF_Between(this SqlWhereCollection self, decimal begin, decimal end, bool _using = true) { return self.Add(new string[] { "[t0].[NumF]" }, "NumF", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static ResultsWhereCollection NumG_Between(this ResultsWhereCollection self, decimal begin, decimal end, bool _using = true) { return self.Add(new string[] { "[t0].[NumG]" }, "NumG", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Results_NumG_Between(this SqlWhereCollection self, decimal begin, decimal end, bool _using = true) { return self.Add(new string[] { "[t0].[NumG]" }, "NumG", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static ResultsWhereCollection NumH_Between(this ResultsWhereCollection self, decimal begin, decimal end, bool _using = true) { return self.Add(new string[] { "[t0].[NumH]" }, "NumH", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Results_NumH_Between(this SqlWhereCollection self, decimal begin, decimal end, bool _using = true) { return self.Add(new string[] { "[t0].[NumH]" }, "NumH", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static ResultsWhereCollection NumI_Between(this ResultsWhereCollection self, decimal begin, decimal end, bool _using = true) { return self.Add(new string[] { "[t0].[NumI]" }, "NumI", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Results_NumI_Between(this SqlWhereCollection self, decimal begin, decimal end, bool _using = true) { return self.Add(new string[] { "[t0].[NumI]" }, "NumI", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static ResultsWhereCollection NumJ_Between(this ResultsWhereCollection self, decimal begin, decimal end, bool _using = true) { return self.Add(new string[] { "[t0].[NumJ]" }, "NumJ", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Results_NumJ_Between(this SqlWhereCollection self, decimal begin, decimal end, bool _using = true) { return self.Add(new string[] { "[t0].[NumJ]" }, "NumJ", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static ResultsWhereCollection NumK_Between(this ResultsWhereCollection self, decimal begin, decimal end, bool _using = true) { return self.Add(new string[] { "[t0].[NumK]" }, "NumK", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Results_NumK_Between(this SqlWhereCollection self, decimal begin, decimal end, bool _using = true) { return self.Add(new string[] { "[t0].[NumK]" }, "NumK", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static ResultsWhereCollection NumL_Between(this ResultsWhereCollection self, decimal begin, decimal end, bool _using = true) { return self.Add(new string[] { "[t0].[NumL]" }, "NumL", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Results_NumL_Between(this SqlWhereCollection self, decimal begin, decimal end, bool _using = true) { return self.Add(new string[] { "[t0].[NumL]" }, "NumL", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static ResultsWhereCollection NumM_Between(this ResultsWhereCollection self, decimal begin, decimal end, bool _using = true) { return self.Add(new string[] { "[t0].[NumM]" }, "NumM", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Results_NumM_Between(this SqlWhereCollection self, decimal begin, decimal end, bool _using = true) { return self.Add(new string[] { "[t0].[NumM]" }, "NumM", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static ResultsWhereCollection NumN_Between(this ResultsWhereCollection self, decimal begin, decimal end, bool _using = true) { return self.Add(new string[] { "[t0].[NumN]" }, "NumN", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Results_NumN_Between(this SqlWhereCollection self, decimal begin, decimal end, bool _using = true) { return self.Add(new string[] { "[t0].[NumN]" }, "NumN", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static ResultsWhereCollection NumO_Between(this ResultsWhereCollection self, decimal begin, decimal end, bool _using = true) { return self.Add(new string[] { "[t0].[NumO]" }, "NumO", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Results_NumO_Between(this SqlWhereCollection self, decimal begin, decimal end, bool _using = true) { return self.Add(new string[] { "[t0].[NumO]" }, "NumO", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static ResultsWhereCollection NumP_Between(this ResultsWhereCollection self, decimal begin, decimal end, bool _using = true) { return self.Add(new string[] { "[t0].[NumP]" }, "NumP", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Results_NumP_Between(this SqlWhereCollection self, decimal begin, decimal end, bool _using = true) { return self.Add(new string[] { "[t0].[NumP]" }, "NumP", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static ResultsWhereCollection Creator_Between(this ResultsWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Creator]" }, "Creator", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Results_Creator_Between(this SqlWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Creator]" }, "Creator", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static ResultsWhereCollection Updator_Between(this ResultsWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Updator]" }, "Updator", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Results_Updator_Between(this SqlWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Updator]" }, "Updator", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static ResultsWhereCollection UpdatedTime_Between(this ResultsWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[UpdatedTime]" }, "UpdatedTime", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Results_UpdatedTime_Between(this SqlWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[UpdatedTime]" }, "UpdatedTime", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static ResultsWhereCollection DateA_Between(this ResultsWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[DateA]" }, "DateA", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Results_DateA_Between(this SqlWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[DateA]" }, "DateA", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static ResultsWhereCollection DateB_Between(this ResultsWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[DateB]" }, "DateB", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Results_DateB_Between(this SqlWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[DateB]" }, "DateB", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static ResultsWhereCollection DateC_Between(this ResultsWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[DateC]" }, "DateC", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Results_DateC_Between(this SqlWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[DateC]" }, "DateC", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static ResultsWhereCollection DateD_Between(this ResultsWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[DateD]" }, "DateD", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Results_DateD_Between(this SqlWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[DateD]" }, "DateD", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static ResultsWhereCollection DateE_Between(this ResultsWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[DateE]" }, "DateE", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Results_DateE_Between(this SqlWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[DateE]" }, "DateE", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static ResultsWhereCollection DateF_Between(this ResultsWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[DateF]" }, "DateF", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Results_DateF_Between(this SqlWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[DateF]" }, "DateF", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static ResultsWhereCollection DateG_Between(this ResultsWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[DateG]" }, "DateG", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Results_DateG_Between(this SqlWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[DateG]" }, "DateG", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static ResultsWhereCollection DateH_Between(this ResultsWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[DateH]" }, "DateH", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Results_DateH_Between(this SqlWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[DateH]" }, "DateH", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static ResultsWhereCollection DateI_Between(this ResultsWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[DateI]" }, "DateI", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Results_DateI_Between(this SqlWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[DateI]" }, "DateI", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static ResultsWhereCollection DateJ_Between(this ResultsWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[DateJ]" }, "DateJ", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Results_DateJ_Between(this SqlWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[DateJ]" }, "DateJ", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static ResultsWhereCollection DateK_Between(this ResultsWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[DateK]" }, "DateK", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Results_DateK_Between(this SqlWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[DateK]" }, "DateK", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static ResultsWhereCollection DateL_Between(this ResultsWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[DateL]" }, "DateL", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Results_DateL_Between(this SqlWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[DateL]" }, "DateL", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static ResultsWhereCollection DateM_Between(this ResultsWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[DateM]" }, "DateM", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Results_DateM_Between(this SqlWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[DateM]" }, "DateM", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static ResultsWhereCollection DateN_Between(this ResultsWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[DateN]" }, "DateN", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Results_DateN_Between(this SqlWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[DateN]" }, "DateN", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static ResultsWhereCollection DateO_Between(this ResultsWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[DateO]" }, "DateO", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Results_DateO_Between(this SqlWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[DateO]" }, "DateO", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static ResultsWhereCollection DateP_Between(this ResultsWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[DateP]" }, "DateP", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Results_DateP_Between(this SqlWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[DateP]" }, "DateP", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static ResultsWhereCollection CreatedTime_Between(this ResultsWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[CreatedTime]" }, "CreatedTime", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Results_CreatedTime_Between(this SqlWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[CreatedTime]" }, "CreatedTime", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static ResultsWhereCollection Sub(this ResultsWhereCollection self, SqlStatement sub, object value = null, string _operator = "=", bool _using = true) { return self.Add(null, null, value, _operator, sub: sub, _using: _using); }
        public static ResultsWhereCollection Or(this ResultsWhereCollection self, SqlWhereCollection or, bool _using = true) { return self.Add(null, null, or: or, _using: _using); }
        public static ResultsGroupByCollection SiteId(this ResultsGroupByCollection self) { return self.Add("[t0].[SiteId]"); }
        public static SqlGroupByCollection Results_SiteId(this SqlGroupByCollection self) { return self.Add("[t0].[SiteId]"); }
        public static ResultsGroupByCollection UpdatedTime(this ResultsGroupByCollection self) { return self.Add("[t0].[UpdatedTime]"); }
        public static SqlGroupByCollection Results_UpdatedTime(this SqlGroupByCollection self) { return self.Add("[t0].[UpdatedTime]"); }
        public static ResultsGroupByCollection ResultId(this ResultsGroupByCollection self) { return self.Add("[t0].[ResultId]"); }
        public static SqlGroupByCollection Results_ResultId(this SqlGroupByCollection self) { return self.Add("[t0].[ResultId]"); }
        public static ResultsGroupByCollection Ver(this ResultsGroupByCollection self) { return self.Add("[t0].[Ver]"); }
        public static SqlGroupByCollection Results_Ver(this SqlGroupByCollection self) { return self.Add("[t0].[Ver]"); }
        public static ResultsGroupByCollection Title(this ResultsGroupByCollection self) { return self.Add("[t0].[Title]"); }
        public static SqlGroupByCollection Results_Title(this SqlGroupByCollection self) { return self.Add("[t0].[Title]"); }
        public static ResultsGroupByCollection Body(this ResultsGroupByCollection self) { return self.Add("[t0].[Body]"); }
        public static SqlGroupByCollection Results_Body(this SqlGroupByCollection self) { return self.Add("[t0].[Body]"); }
        public static ResultsGroupByCollection TitleBody(this ResultsGroupByCollection self) { return self.Add("[t0].[Title]", "[t0].[Body]"); }
        public static SqlGroupByCollection Results_TitleBody(this SqlGroupByCollection self) { return self.Add("[t0].[Title]", "[t0].[Body]"); }
        public static ResultsGroupByCollection Status(this ResultsGroupByCollection self) { return self.Add("[t0].[Status]"); }
        public static SqlGroupByCollection Results_Status(this SqlGroupByCollection self) { return self.Add("[t0].[Status]"); }
        public static ResultsGroupByCollection Manager(this ResultsGroupByCollection self) { return self.Add("[t0].[Manager]"); }
        public static SqlGroupByCollection Results_Manager(this SqlGroupByCollection self) { return self.Add("[t0].[Manager]"); }
        public static ResultsGroupByCollection Owner(this ResultsGroupByCollection self) { return self.Add("[t0].[Owner]"); }
        public static SqlGroupByCollection Results_Owner(this SqlGroupByCollection self) { return self.Add("[t0].[Owner]"); }
        public static ResultsGroupByCollection ClassA(this ResultsGroupByCollection self) { return self.Add("[t0].[ClassA]"); }
        public static SqlGroupByCollection Results_ClassA(this SqlGroupByCollection self) { return self.Add("[t0].[ClassA]"); }
        public static ResultsGroupByCollection ClassB(this ResultsGroupByCollection self) { return self.Add("[t0].[ClassB]"); }
        public static SqlGroupByCollection Results_ClassB(this SqlGroupByCollection self) { return self.Add("[t0].[ClassB]"); }
        public static ResultsGroupByCollection ClassC(this ResultsGroupByCollection self) { return self.Add("[t0].[ClassC]"); }
        public static SqlGroupByCollection Results_ClassC(this SqlGroupByCollection self) { return self.Add("[t0].[ClassC]"); }
        public static ResultsGroupByCollection ClassD(this ResultsGroupByCollection self) { return self.Add("[t0].[ClassD]"); }
        public static SqlGroupByCollection Results_ClassD(this SqlGroupByCollection self) { return self.Add("[t0].[ClassD]"); }
        public static ResultsGroupByCollection ClassE(this ResultsGroupByCollection self) { return self.Add("[t0].[ClassE]"); }
        public static SqlGroupByCollection Results_ClassE(this SqlGroupByCollection self) { return self.Add("[t0].[ClassE]"); }
        public static ResultsGroupByCollection ClassF(this ResultsGroupByCollection self) { return self.Add("[t0].[ClassF]"); }
        public static SqlGroupByCollection Results_ClassF(this SqlGroupByCollection self) { return self.Add("[t0].[ClassF]"); }
        public static ResultsGroupByCollection ClassG(this ResultsGroupByCollection self) { return self.Add("[t0].[ClassG]"); }
        public static SqlGroupByCollection Results_ClassG(this SqlGroupByCollection self) { return self.Add("[t0].[ClassG]"); }
        public static ResultsGroupByCollection ClassH(this ResultsGroupByCollection self) { return self.Add("[t0].[ClassH]"); }
        public static SqlGroupByCollection Results_ClassH(this SqlGroupByCollection self) { return self.Add("[t0].[ClassH]"); }
        public static ResultsGroupByCollection ClassI(this ResultsGroupByCollection self) { return self.Add("[t0].[ClassI]"); }
        public static SqlGroupByCollection Results_ClassI(this SqlGroupByCollection self) { return self.Add("[t0].[ClassI]"); }
        public static ResultsGroupByCollection ClassJ(this ResultsGroupByCollection self) { return self.Add("[t0].[ClassJ]"); }
        public static SqlGroupByCollection Results_ClassJ(this SqlGroupByCollection self) { return self.Add("[t0].[ClassJ]"); }
        public static ResultsGroupByCollection ClassK(this ResultsGroupByCollection self) { return self.Add("[t0].[ClassK]"); }
        public static SqlGroupByCollection Results_ClassK(this SqlGroupByCollection self) { return self.Add("[t0].[ClassK]"); }
        public static ResultsGroupByCollection ClassL(this ResultsGroupByCollection self) { return self.Add("[t0].[ClassL]"); }
        public static SqlGroupByCollection Results_ClassL(this SqlGroupByCollection self) { return self.Add("[t0].[ClassL]"); }
        public static ResultsGroupByCollection ClassM(this ResultsGroupByCollection self) { return self.Add("[t0].[ClassM]"); }
        public static SqlGroupByCollection Results_ClassM(this SqlGroupByCollection self) { return self.Add("[t0].[ClassM]"); }
        public static ResultsGroupByCollection ClassN(this ResultsGroupByCollection self) { return self.Add("[t0].[ClassN]"); }
        public static SqlGroupByCollection Results_ClassN(this SqlGroupByCollection self) { return self.Add("[t0].[ClassN]"); }
        public static ResultsGroupByCollection ClassO(this ResultsGroupByCollection self) { return self.Add("[t0].[ClassO]"); }
        public static SqlGroupByCollection Results_ClassO(this SqlGroupByCollection self) { return self.Add("[t0].[ClassO]"); }
        public static ResultsGroupByCollection ClassP(this ResultsGroupByCollection self) { return self.Add("[t0].[ClassP]"); }
        public static SqlGroupByCollection Results_ClassP(this SqlGroupByCollection self) { return self.Add("[t0].[ClassP]"); }
        public static ResultsGroupByCollection NumA(this ResultsGroupByCollection self) { return self.Add("[t0].[NumA]"); }
        public static SqlGroupByCollection Results_NumA(this SqlGroupByCollection self) { return self.Add("[t0].[NumA]"); }
        public static ResultsGroupByCollection NumB(this ResultsGroupByCollection self) { return self.Add("[t0].[NumB]"); }
        public static SqlGroupByCollection Results_NumB(this SqlGroupByCollection self) { return self.Add("[t0].[NumB]"); }
        public static ResultsGroupByCollection NumC(this ResultsGroupByCollection self) { return self.Add("[t0].[NumC]"); }
        public static SqlGroupByCollection Results_NumC(this SqlGroupByCollection self) { return self.Add("[t0].[NumC]"); }
        public static ResultsGroupByCollection NumD(this ResultsGroupByCollection self) { return self.Add("[t0].[NumD]"); }
        public static SqlGroupByCollection Results_NumD(this SqlGroupByCollection self) { return self.Add("[t0].[NumD]"); }
        public static ResultsGroupByCollection NumE(this ResultsGroupByCollection self) { return self.Add("[t0].[NumE]"); }
        public static SqlGroupByCollection Results_NumE(this SqlGroupByCollection self) { return self.Add("[t0].[NumE]"); }
        public static ResultsGroupByCollection NumF(this ResultsGroupByCollection self) { return self.Add("[t0].[NumF]"); }
        public static SqlGroupByCollection Results_NumF(this SqlGroupByCollection self) { return self.Add("[t0].[NumF]"); }
        public static ResultsGroupByCollection NumG(this ResultsGroupByCollection self) { return self.Add("[t0].[NumG]"); }
        public static SqlGroupByCollection Results_NumG(this SqlGroupByCollection self) { return self.Add("[t0].[NumG]"); }
        public static ResultsGroupByCollection NumH(this ResultsGroupByCollection self) { return self.Add("[t0].[NumH]"); }
        public static SqlGroupByCollection Results_NumH(this SqlGroupByCollection self) { return self.Add("[t0].[NumH]"); }
        public static ResultsGroupByCollection NumI(this ResultsGroupByCollection self) { return self.Add("[t0].[NumI]"); }
        public static SqlGroupByCollection Results_NumI(this SqlGroupByCollection self) { return self.Add("[t0].[NumI]"); }
        public static ResultsGroupByCollection NumJ(this ResultsGroupByCollection self) { return self.Add("[t0].[NumJ]"); }
        public static SqlGroupByCollection Results_NumJ(this SqlGroupByCollection self) { return self.Add("[t0].[NumJ]"); }
        public static ResultsGroupByCollection NumK(this ResultsGroupByCollection self) { return self.Add("[t0].[NumK]"); }
        public static SqlGroupByCollection Results_NumK(this SqlGroupByCollection self) { return self.Add("[t0].[NumK]"); }
        public static ResultsGroupByCollection NumL(this ResultsGroupByCollection self) { return self.Add("[t0].[NumL]"); }
        public static SqlGroupByCollection Results_NumL(this SqlGroupByCollection self) { return self.Add("[t0].[NumL]"); }
        public static ResultsGroupByCollection NumM(this ResultsGroupByCollection self) { return self.Add("[t0].[NumM]"); }
        public static SqlGroupByCollection Results_NumM(this SqlGroupByCollection self) { return self.Add("[t0].[NumM]"); }
        public static ResultsGroupByCollection NumN(this ResultsGroupByCollection self) { return self.Add("[t0].[NumN]"); }
        public static SqlGroupByCollection Results_NumN(this SqlGroupByCollection self) { return self.Add("[t0].[NumN]"); }
        public static ResultsGroupByCollection NumO(this ResultsGroupByCollection self) { return self.Add("[t0].[NumO]"); }
        public static SqlGroupByCollection Results_NumO(this SqlGroupByCollection self) { return self.Add("[t0].[NumO]"); }
        public static ResultsGroupByCollection NumP(this ResultsGroupByCollection self) { return self.Add("[t0].[NumP]"); }
        public static SqlGroupByCollection Results_NumP(this SqlGroupByCollection self) { return self.Add("[t0].[NumP]"); }
        public static ResultsGroupByCollection DateA(this ResultsGroupByCollection self) { return self.Add("[t0].[DateA]"); }
        public static SqlGroupByCollection Results_DateA(this SqlGroupByCollection self) { return self.Add("[t0].[DateA]"); }
        public static ResultsGroupByCollection DateB(this ResultsGroupByCollection self) { return self.Add("[t0].[DateB]"); }
        public static SqlGroupByCollection Results_DateB(this SqlGroupByCollection self) { return self.Add("[t0].[DateB]"); }
        public static ResultsGroupByCollection DateC(this ResultsGroupByCollection self) { return self.Add("[t0].[DateC]"); }
        public static SqlGroupByCollection Results_DateC(this SqlGroupByCollection self) { return self.Add("[t0].[DateC]"); }
        public static ResultsGroupByCollection DateD(this ResultsGroupByCollection self) { return self.Add("[t0].[DateD]"); }
        public static SqlGroupByCollection Results_DateD(this SqlGroupByCollection self) { return self.Add("[t0].[DateD]"); }
        public static ResultsGroupByCollection DateE(this ResultsGroupByCollection self) { return self.Add("[t0].[DateE]"); }
        public static SqlGroupByCollection Results_DateE(this SqlGroupByCollection self) { return self.Add("[t0].[DateE]"); }
        public static ResultsGroupByCollection DateF(this ResultsGroupByCollection self) { return self.Add("[t0].[DateF]"); }
        public static SqlGroupByCollection Results_DateF(this SqlGroupByCollection self) { return self.Add("[t0].[DateF]"); }
        public static ResultsGroupByCollection DateG(this ResultsGroupByCollection self) { return self.Add("[t0].[DateG]"); }
        public static SqlGroupByCollection Results_DateG(this SqlGroupByCollection self) { return self.Add("[t0].[DateG]"); }
        public static ResultsGroupByCollection DateH(this ResultsGroupByCollection self) { return self.Add("[t0].[DateH]"); }
        public static SqlGroupByCollection Results_DateH(this SqlGroupByCollection self) { return self.Add("[t0].[DateH]"); }
        public static ResultsGroupByCollection DateI(this ResultsGroupByCollection self) { return self.Add("[t0].[DateI]"); }
        public static SqlGroupByCollection Results_DateI(this SqlGroupByCollection self) { return self.Add("[t0].[DateI]"); }
        public static ResultsGroupByCollection DateJ(this ResultsGroupByCollection self) { return self.Add("[t0].[DateJ]"); }
        public static SqlGroupByCollection Results_DateJ(this SqlGroupByCollection self) { return self.Add("[t0].[DateJ]"); }
        public static ResultsGroupByCollection DateK(this ResultsGroupByCollection self) { return self.Add("[t0].[DateK]"); }
        public static SqlGroupByCollection Results_DateK(this SqlGroupByCollection self) { return self.Add("[t0].[DateK]"); }
        public static ResultsGroupByCollection DateL(this ResultsGroupByCollection self) { return self.Add("[t0].[DateL]"); }
        public static SqlGroupByCollection Results_DateL(this SqlGroupByCollection self) { return self.Add("[t0].[DateL]"); }
        public static ResultsGroupByCollection DateM(this ResultsGroupByCollection self) { return self.Add("[t0].[DateM]"); }
        public static SqlGroupByCollection Results_DateM(this SqlGroupByCollection self) { return self.Add("[t0].[DateM]"); }
        public static ResultsGroupByCollection DateN(this ResultsGroupByCollection self) { return self.Add("[t0].[DateN]"); }
        public static SqlGroupByCollection Results_DateN(this SqlGroupByCollection self) { return self.Add("[t0].[DateN]"); }
        public static ResultsGroupByCollection DateO(this ResultsGroupByCollection self) { return self.Add("[t0].[DateO]"); }
        public static SqlGroupByCollection Results_DateO(this SqlGroupByCollection self) { return self.Add("[t0].[DateO]"); }
        public static ResultsGroupByCollection DateP(this ResultsGroupByCollection self) { return self.Add("[t0].[DateP]"); }
        public static SqlGroupByCollection Results_DateP(this SqlGroupByCollection self) { return self.Add("[t0].[DateP]"); }
        public static ResultsGroupByCollection DescriptionA(this ResultsGroupByCollection self) { return self.Add("[t0].[DescriptionA]"); }
        public static SqlGroupByCollection Results_DescriptionA(this SqlGroupByCollection self) { return self.Add("[t0].[DescriptionA]"); }
        public static ResultsGroupByCollection DescriptionB(this ResultsGroupByCollection self) { return self.Add("[t0].[DescriptionB]"); }
        public static SqlGroupByCollection Results_DescriptionB(this SqlGroupByCollection self) { return self.Add("[t0].[DescriptionB]"); }
        public static ResultsGroupByCollection DescriptionC(this ResultsGroupByCollection self) { return self.Add("[t0].[DescriptionC]"); }
        public static SqlGroupByCollection Results_DescriptionC(this SqlGroupByCollection self) { return self.Add("[t0].[DescriptionC]"); }
        public static ResultsGroupByCollection DescriptionD(this ResultsGroupByCollection self) { return self.Add("[t0].[DescriptionD]"); }
        public static SqlGroupByCollection Results_DescriptionD(this SqlGroupByCollection self) { return self.Add("[t0].[DescriptionD]"); }
        public static ResultsGroupByCollection DescriptionE(this ResultsGroupByCollection self) { return self.Add("[t0].[DescriptionE]"); }
        public static SqlGroupByCollection Results_DescriptionE(this SqlGroupByCollection self) { return self.Add("[t0].[DescriptionE]"); }
        public static ResultsGroupByCollection DescriptionF(this ResultsGroupByCollection self) { return self.Add("[t0].[DescriptionF]"); }
        public static SqlGroupByCollection Results_DescriptionF(this SqlGroupByCollection self) { return self.Add("[t0].[DescriptionF]"); }
        public static ResultsGroupByCollection DescriptionG(this ResultsGroupByCollection self) { return self.Add("[t0].[DescriptionG]"); }
        public static SqlGroupByCollection Results_DescriptionG(this SqlGroupByCollection self) { return self.Add("[t0].[DescriptionG]"); }
        public static ResultsGroupByCollection DescriptionH(this ResultsGroupByCollection self) { return self.Add("[t0].[DescriptionH]"); }
        public static SqlGroupByCollection Results_DescriptionH(this SqlGroupByCollection self) { return self.Add("[t0].[DescriptionH]"); }
        public static ResultsGroupByCollection DescriptionI(this ResultsGroupByCollection self) { return self.Add("[t0].[DescriptionI]"); }
        public static SqlGroupByCollection Results_DescriptionI(this SqlGroupByCollection self) { return self.Add("[t0].[DescriptionI]"); }
        public static ResultsGroupByCollection DescriptionJ(this ResultsGroupByCollection self) { return self.Add("[t0].[DescriptionJ]"); }
        public static SqlGroupByCollection Results_DescriptionJ(this SqlGroupByCollection self) { return self.Add("[t0].[DescriptionJ]"); }
        public static ResultsGroupByCollection DescriptionK(this ResultsGroupByCollection self) { return self.Add("[t0].[DescriptionK]"); }
        public static SqlGroupByCollection Results_DescriptionK(this SqlGroupByCollection self) { return self.Add("[t0].[DescriptionK]"); }
        public static ResultsGroupByCollection DescriptionL(this ResultsGroupByCollection self) { return self.Add("[t0].[DescriptionL]"); }
        public static SqlGroupByCollection Results_DescriptionL(this SqlGroupByCollection self) { return self.Add("[t0].[DescriptionL]"); }
        public static ResultsGroupByCollection DescriptionM(this ResultsGroupByCollection self) { return self.Add("[t0].[DescriptionM]"); }
        public static SqlGroupByCollection Results_DescriptionM(this SqlGroupByCollection self) { return self.Add("[t0].[DescriptionM]"); }
        public static ResultsGroupByCollection DescriptionN(this ResultsGroupByCollection self) { return self.Add("[t0].[DescriptionN]"); }
        public static SqlGroupByCollection Results_DescriptionN(this SqlGroupByCollection self) { return self.Add("[t0].[DescriptionN]"); }
        public static ResultsGroupByCollection DescriptionO(this ResultsGroupByCollection self) { return self.Add("[t0].[DescriptionO]"); }
        public static SqlGroupByCollection Results_DescriptionO(this SqlGroupByCollection self) { return self.Add("[t0].[DescriptionO]"); }
        public static ResultsGroupByCollection DescriptionP(this ResultsGroupByCollection self) { return self.Add("[t0].[DescriptionP]"); }
        public static SqlGroupByCollection Results_DescriptionP(this SqlGroupByCollection self) { return self.Add("[t0].[DescriptionP]"); }
        public static ResultsGroupByCollection CheckA(this ResultsGroupByCollection self) { return self.Add("[t0].[CheckA]"); }
        public static SqlGroupByCollection Results_CheckA(this SqlGroupByCollection self) { return self.Add("[t0].[CheckA]"); }
        public static ResultsGroupByCollection CheckB(this ResultsGroupByCollection self) { return self.Add("[t0].[CheckB]"); }
        public static SqlGroupByCollection Results_CheckB(this SqlGroupByCollection self) { return self.Add("[t0].[CheckB]"); }
        public static ResultsGroupByCollection CheckC(this ResultsGroupByCollection self) { return self.Add("[t0].[CheckC]"); }
        public static SqlGroupByCollection Results_CheckC(this SqlGroupByCollection self) { return self.Add("[t0].[CheckC]"); }
        public static ResultsGroupByCollection CheckD(this ResultsGroupByCollection self) { return self.Add("[t0].[CheckD]"); }
        public static SqlGroupByCollection Results_CheckD(this SqlGroupByCollection self) { return self.Add("[t0].[CheckD]"); }
        public static ResultsGroupByCollection CheckE(this ResultsGroupByCollection self) { return self.Add("[t0].[CheckE]"); }
        public static SqlGroupByCollection Results_CheckE(this SqlGroupByCollection self) { return self.Add("[t0].[CheckE]"); }
        public static ResultsGroupByCollection CheckF(this ResultsGroupByCollection self) { return self.Add("[t0].[CheckF]"); }
        public static SqlGroupByCollection Results_CheckF(this SqlGroupByCollection self) { return self.Add("[t0].[CheckF]"); }
        public static ResultsGroupByCollection CheckG(this ResultsGroupByCollection self) { return self.Add("[t0].[CheckG]"); }
        public static SqlGroupByCollection Results_CheckG(this SqlGroupByCollection self) { return self.Add("[t0].[CheckG]"); }
        public static ResultsGroupByCollection CheckH(this ResultsGroupByCollection self) { return self.Add("[t0].[CheckH]"); }
        public static SqlGroupByCollection Results_CheckH(this SqlGroupByCollection self) { return self.Add("[t0].[CheckH]"); }
        public static ResultsGroupByCollection CheckI(this ResultsGroupByCollection self) { return self.Add("[t0].[CheckI]"); }
        public static SqlGroupByCollection Results_CheckI(this SqlGroupByCollection self) { return self.Add("[t0].[CheckI]"); }
        public static ResultsGroupByCollection CheckJ(this ResultsGroupByCollection self) { return self.Add("[t0].[CheckJ]"); }
        public static SqlGroupByCollection Results_CheckJ(this SqlGroupByCollection self) { return self.Add("[t0].[CheckJ]"); }
        public static ResultsGroupByCollection CheckK(this ResultsGroupByCollection self) { return self.Add("[t0].[CheckK]"); }
        public static SqlGroupByCollection Results_CheckK(this SqlGroupByCollection self) { return self.Add("[t0].[CheckK]"); }
        public static ResultsGroupByCollection CheckL(this ResultsGroupByCollection self) { return self.Add("[t0].[CheckL]"); }
        public static SqlGroupByCollection Results_CheckL(this SqlGroupByCollection self) { return self.Add("[t0].[CheckL]"); }
        public static ResultsGroupByCollection CheckM(this ResultsGroupByCollection self) { return self.Add("[t0].[CheckM]"); }
        public static SqlGroupByCollection Results_CheckM(this SqlGroupByCollection self) { return self.Add("[t0].[CheckM]"); }
        public static ResultsGroupByCollection CheckN(this ResultsGroupByCollection self) { return self.Add("[t0].[CheckN]"); }
        public static SqlGroupByCollection Results_CheckN(this SqlGroupByCollection self) { return self.Add("[t0].[CheckN]"); }
        public static ResultsGroupByCollection CheckO(this ResultsGroupByCollection self) { return self.Add("[t0].[CheckO]"); }
        public static SqlGroupByCollection Results_CheckO(this SqlGroupByCollection self) { return self.Add("[t0].[CheckO]"); }
        public static ResultsGroupByCollection CheckP(this ResultsGroupByCollection self) { return self.Add("[t0].[CheckP]"); }
        public static SqlGroupByCollection Results_CheckP(this SqlGroupByCollection self) { return self.Add("[t0].[CheckP]"); }
        public static ResultsGroupByCollection Comments(this ResultsGroupByCollection self) { return self.Add("[t0].[Comments]"); }
        public static SqlGroupByCollection Results_Comments(this SqlGroupByCollection self) { return self.Add("[t0].[Comments]"); }
        public static ResultsGroupByCollection Creator(this ResultsGroupByCollection self) { return self.Add("[t0].[Creator]"); }
        public static SqlGroupByCollection Results_Creator(this SqlGroupByCollection self) { return self.Add("[t0].[Creator]"); }
        public static ResultsGroupByCollection Updator(this ResultsGroupByCollection self) { return self.Add("[t0].[Updator]"); }
        public static SqlGroupByCollection Results_Updator(this SqlGroupByCollection self) { return self.Add("[t0].[Updator]"); }
        public static ResultsGroupByCollection CreatedTime(this ResultsGroupByCollection self) { return self.Add("[t0].[CreatedTime]"); }
        public static SqlGroupByCollection Results_CreatedTime(this SqlGroupByCollection self) { return self.Add("[t0].[CreatedTime]"); }
        public static ResultsHavingCollection ResultsCount(this ResultsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "count(*)", name: "ResultsCount", value: value, _operator: _operator); }
        public static ResultsHavingCollection NumATotal(this ResultsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "sum([t0].[NumA])", name: "NumATotal", value: value, _operator: _operator); }
        public static SqlHavingCollection Results_NumATotal(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "sum([t0].[NumA])", name: "NumATotal", value: value, _operator: _operator); }
        public static ResultsHavingCollection NumAAverage(this ResultsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "avg([t0].[NumA])", name: "NumAAverage", value: value, _operator: _operator); }
        public static SqlHavingCollection Results_NumAAverage(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "avg([t0].[NumA])", name: "NumAAverage", value: value, _operator: _operator); }
        public static ResultsHavingCollection NumBTotal(this ResultsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "sum([t0].[NumB])", name: "NumBTotal", value: value, _operator: _operator); }
        public static SqlHavingCollection Results_NumBTotal(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "sum([t0].[NumB])", name: "NumBTotal", value: value, _operator: _operator); }
        public static ResultsHavingCollection NumBAverage(this ResultsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "avg([t0].[NumB])", name: "NumBAverage", value: value, _operator: _operator); }
        public static SqlHavingCollection Results_NumBAverage(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "avg([t0].[NumB])", name: "NumBAverage", value: value, _operator: _operator); }
        public static ResultsHavingCollection NumCTotal(this ResultsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "sum([t0].[NumC])", name: "NumCTotal", value: value, _operator: _operator); }
        public static SqlHavingCollection Results_NumCTotal(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "sum([t0].[NumC])", name: "NumCTotal", value: value, _operator: _operator); }
        public static ResultsHavingCollection NumCAverage(this ResultsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "avg([t0].[NumC])", name: "NumCAverage", value: value, _operator: _operator); }
        public static SqlHavingCollection Results_NumCAverage(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "avg([t0].[NumC])", name: "NumCAverage", value: value, _operator: _operator); }
        public static ResultsHavingCollection NumDTotal(this ResultsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "sum([t0].[NumD])", name: "NumDTotal", value: value, _operator: _operator); }
        public static SqlHavingCollection Results_NumDTotal(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "sum([t0].[NumD])", name: "NumDTotal", value: value, _operator: _operator); }
        public static ResultsHavingCollection NumDAverage(this ResultsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "avg([t0].[NumD])", name: "NumDAverage", value: value, _operator: _operator); }
        public static SqlHavingCollection Results_NumDAverage(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "avg([t0].[NumD])", name: "NumDAverage", value: value, _operator: _operator); }
        public static ResultsHavingCollection NumETotal(this ResultsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "sum([t0].[NumE])", name: "NumETotal", value: value, _operator: _operator); }
        public static SqlHavingCollection Results_NumETotal(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "sum([t0].[NumE])", name: "NumETotal", value: value, _operator: _operator); }
        public static ResultsHavingCollection NumEAverage(this ResultsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "avg([t0].[NumE])", name: "NumEAverage", value: value, _operator: _operator); }
        public static SqlHavingCollection Results_NumEAverage(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "avg([t0].[NumE])", name: "NumEAverage", value: value, _operator: _operator); }
        public static ResultsHavingCollection NumFTotal(this ResultsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "sum([t0].[NumF])", name: "NumFTotal", value: value, _operator: _operator); }
        public static SqlHavingCollection Results_NumFTotal(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "sum([t0].[NumF])", name: "NumFTotal", value: value, _operator: _operator); }
        public static ResultsHavingCollection NumFAverage(this ResultsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "avg([t0].[NumF])", name: "NumFAverage", value: value, _operator: _operator); }
        public static SqlHavingCollection Results_NumFAverage(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "avg([t0].[NumF])", name: "NumFAverage", value: value, _operator: _operator); }
        public static ResultsHavingCollection NumGTotal(this ResultsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "sum([t0].[NumG])", name: "NumGTotal", value: value, _operator: _operator); }
        public static SqlHavingCollection Results_NumGTotal(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "sum([t0].[NumG])", name: "NumGTotal", value: value, _operator: _operator); }
        public static ResultsHavingCollection NumGAverage(this ResultsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "avg([t0].[NumG])", name: "NumGAverage", value: value, _operator: _operator); }
        public static SqlHavingCollection Results_NumGAverage(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "avg([t0].[NumG])", name: "NumGAverage", value: value, _operator: _operator); }
        public static ResultsHavingCollection NumHTotal(this ResultsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "sum([t0].[NumH])", name: "NumHTotal", value: value, _operator: _operator); }
        public static SqlHavingCollection Results_NumHTotal(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "sum([t0].[NumH])", name: "NumHTotal", value: value, _operator: _operator); }
        public static ResultsHavingCollection NumHAverage(this ResultsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "avg([t0].[NumH])", name: "NumHAverage", value: value, _operator: _operator); }
        public static SqlHavingCollection Results_NumHAverage(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "avg([t0].[NumH])", name: "NumHAverage", value: value, _operator: _operator); }
        public static ResultsHavingCollection NumITotal(this ResultsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "sum([t0].[NumI])", name: "NumITotal", value: value, _operator: _operator); }
        public static SqlHavingCollection Results_NumITotal(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "sum([t0].[NumI])", name: "NumITotal", value: value, _operator: _operator); }
        public static ResultsHavingCollection NumIAverage(this ResultsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "avg([t0].[NumI])", name: "NumIAverage", value: value, _operator: _operator); }
        public static SqlHavingCollection Results_NumIAverage(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "avg([t0].[NumI])", name: "NumIAverage", value: value, _operator: _operator); }
        public static ResultsHavingCollection NumJTotal(this ResultsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "sum([t0].[NumJ])", name: "NumJTotal", value: value, _operator: _operator); }
        public static SqlHavingCollection Results_NumJTotal(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "sum([t0].[NumJ])", name: "NumJTotal", value: value, _operator: _operator); }
        public static ResultsHavingCollection NumJAverage(this ResultsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "avg([t0].[NumJ])", name: "NumJAverage", value: value, _operator: _operator); }
        public static SqlHavingCollection Results_NumJAverage(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "avg([t0].[NumJ])", name: "NumJAverage", value: value, _operator: _operator); }
        public static ResultsHavingCollection NumKTotal(this ResultsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "sum([t0].[NumK])", name: "NumKTotal", value: value, _operator: _operator); }
        public static SqlHavingCollection Results_NumKTotal(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "sum([t0].[NumK])", name: "NumKTotal", value: value, _operator: _operator); }
        public static ResultsHavingCollection NumKAverage(this ResultsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "avg([t0].[NumK])", name: "NumKAverage", value: value, _operator: _operator); }
        public static SqlHavingCollection Results_NumKAverage(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "avg([t0].[NumK])", name: "NumKAverage", value: value, _operator: _operator); }
        public static ResultsHavingCollection NumLTotal(this ResultsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "sum([t0].[NumL])", name: "NumLTotal", value: value, _operator: _operator); }
        public static SqlHavingCollection Results_NumLTotal(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "sum([t0].[NumL])", name: "NumLTotal", value: value, _operator: _operator); }
        public static ResultsHavingCollection NumLAverage(this ResultsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "avg([t0].[NumL])", name: "NumLAverage", value: value, _operator: _operator); }
        public static SqlHavingCollection Results_NumLAverage(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "avg([t0].[NumL])", name: "NumLAverage", value: value, _operator: _operator); }
        public static ResultsHavingCollection NumMTotal(this ResultsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "sum([t0].[NumM])", name: "NumMTotal", value: value, _operator: _operator); }
        public static SqlHavingCollection Results_NumMTotal(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "sum([t0].[NumM])", name: "NumMTotal", value: value, _operator: _operator); }
        public static ResultsHavingCollection NumMAverage(this ResultsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "avg([t0].[NumM])", name: "NumMAverage", value: value, _operator: _operator); }
        public static SqlHavingCollection Results_NumMAverage(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "avg([t0].[NumM])", name: "NumMAverage", value: value, _operator: _operator); }
        public static ResultsHavingCollection NumNTotal(this ResultsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "sum([t0].[NumN])", name: "NumNTotal", value: value, _operator: _operator); }
        public static SqlHavingCollection Results_NumNTotal(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "sum([t0].[NumN])", name: "NumNTotal", value: value, _operator: _operator); }
        public static ResultsHavingCollection NumNAverage(this ResultsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "avg([t0].[NumN])", name: "NumNAverage", value: value, _operator: _operator); }
        public static SqlHavingCollection Results_NumNAverage(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "avg([t0].[NumN])", name: "NumNAverage", value: value, _operator: _operator); }
        public static ResultsHavingCollection NumOTotal(this ResultsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "sum([t0].[NumO])", name: "NumOTotal", value: value, _operator: _operator); }
        public static SqlHavingCollection Results_NumOTotal(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "sum([t0].[NumO])", name: "NumOTotal", value: value, _operator: _operator); }
        public static ResultsHavingCollection NumOAverage(this ResultsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "avg([t0].[NumO])", name: "NumOAverage", value: value, _operator: _operator); }
        public static SqlHavingCollection Results_NumOAverage(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "avg([t0].[NumO])", name: "NumOAverage", value: value, _operator: _operator); }
        public static ResultsHavingCollection NumPTotal(this ResultsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "sum([t0].[NumP])", name: "NumPTotal", value: value, _operator: _operator); }
        public static SqlHavingCollection Results_NumPTotal(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "sum([t0].[NumP])", name: "NumPTotal", value: value, _operator: _operator); }
        public static ResultsHavingCollection NumPAverage(this ResultsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "avg([t0].[NumP])", name: "NumPAverage", value: value, _operator: _operator); }
        public static SqlHavingCollection Results_NumPAverage(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "avg([t0].[NumP])", name: "NumPAverage", value: value, _operator: _operator); }
        public static ResultsHavingCollection NumAMax(this ResultsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[NumA])", name: "NumAMax", value: value, _operator: _operator); }
        public static SqlHavingCollection Results_NumAMax(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[NumA])", name: "NumAMax", value: value, _operator: _operator); }
        public static ResultsHavingCollection NumAMin(this ResultsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[NumA])", name: "NumAMin", value: value, _operator: _operator); }
        public static SqlHavingCollection Results_NumAMin(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[NumA])", name: "NumAMin", value: value, _operator: _operator); }
        public static ResultsHavingCollection NumBMax(this ResultsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[NumB])", name: "NumBMax", value: value, _operator: _operator); }
        public static SqlHavingCollection Results_NumBMax(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[NumB])", name: "NumBMax", value: value, _operator: _operator); }
        public static ResultsHavingCollection NumBMin(this ResultsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[NumB])", name: "NumBMin", value: value, _operator: _operator); }
        public static SqlHavingCollection Results_NumBMin(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[NumB])", name: "NumBMin", value: value, _operator: _operator); }
        public static ResultsHavingCollection NumCMax(this ResultsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[NumC])", name: "NumCMax", value: value, _operator: _operator); }
        public static SqlHavingCollection Results_NumCMax(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[NumC])", name: "NumCMax", value: value, _operator: _operator); }
        public static ResultsHavingCollection NumCMin(this ResultsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[NumC])", name: "NumCMin", value: value, _operator: _operator); }
        public static SqlHavingCollection Results_NumCMin(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[NumC])", name: "NumCMin", value: value, _operator: _operator); }
        public static ResultsHavingCollection NumDMax(this ResultsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[NumD])", name: "NumDMax", value: value, _operator: _operator); }
        public static SqlHavingCollection Results_NumDMax(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[NumD])", name: "NumDMax", value: value, _operator: _operator); }
        public static ResultsHavingCollection NumDMin(this ResultsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[NumD])", name: "NumDMin", value: value, _operator: _operator); }
        public static SqlHavingCollection Results_NumDMin(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[NumD])", name: "NumDMin", value: value, _operator: _operator); }
        public static ResultsHavingCollection NumEMax(this ResultsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[NumE])", name: "NumEMax", value: value, _operator: _operator); }
        public static SqlHavingCollection Results_NumEMax(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[NumE])", name: "NumEMax", value: value, _operator: _operator); }
        public static ResultsHavingCollection NumEMin(this ResultsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[NumE])", name: "NumEMin", value: value, _operator: _operator); }
        public static SqlHavingCollection Results_NumEMin(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[NumE])", name: "NumEMin", value: value, _operator: _operator); }
        public static ResultsHavingCollection NumFMax(this ResultsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[NumF])", name: "NumFMax", value: value, _operator: _operator); }
        public static SqlHavingCollection Results_NumFMax(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[NumF])", name: "NumFMax", value: value, _operator: _operator); }
        public static ResultsHavingCollection NumFMin(this ResultsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[NumF])", name: "NumFMin", value: value, _operator: _operator); }
        public static SqlHavingCollection Results_NumFMin(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[NumF])", name: "NumFMin", value: value, _operator: _operator); }
        public static ResultsHavingCollection NumGMax(this ResultsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[NumG])", name: "NumGMax", value: value, _operator: _operator); }
        public static SqlHavingCollection Results_NumGMax(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[NumG])", name: "NumGMax", value: value, _operator: _operator); }
        public static ResultsHavingCollection NumGMin(this ResultsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[NumG])", name: "NumGMin", value: value, _operator: _operator); }
        public static SqlHavingCollection Results_NumGMin(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[NumG])", name: "NumGMin", value: value, _operator: _operator); }
        public static ResultsHavingCollection NumHMax(this ResultsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[NumH])", name: "NumHMax", value: value, _operator: _operator); }
        public static SqlHavingCollection Results_NumHMax(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[NumH])", name: "NumHMax", value: value, _operator: _operator); }
        public static ResultsHavingCollection NumHMin(this ResultsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[NumH])", name: "NumHMin", value: value, _operator: _operator); }
        public static SqlHavingCollection Results_NumHMin(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[NumH])", name: "NumHMin", value: value, _operator: _operator); }
        public static ResultsHavingCollection NumIMax(this ResultsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[NumI])", name: "NumIMax", value: value, _operator: _operator); }
        public static SqlHavingCollection Results_NumIMax(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[NumI])", name: "NumIMax", value: value, _operator: _operator); }
        public static ResultsHavingCollection NumIMin(this ResultsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[NumI])", name: "NumIMin", value: value, _operator: _operator); }
        public static SqlHavingCollection Results_NumIMin(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[NumI])", name: "NumIMin", value: value, _operator: _operator); }
        public static ResultsHavingCollection NumJMax(this ResultsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[NumJ])", name: "NumJMax", value: value, _operator: _operator); }
        public static SqlHavingCollection Results_NumJMax(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[NumJ])", name: "NumJMax", value: value, _operator: _operator); }
        public static ResultsHavingCollection NumJMin(this ResultsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[NumJ])", name: "NumJMin", value: value, _operator: _operator); }
        public static SqlHavingCollection Results_NumJMin(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[NumJ])", name: "NumJMin", value: value, _operator: _operator); }
        public static ResultsHavingCollection NumKMax(this ResultsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[NumK])", name: "NumKMax", value: value, _operator: _operator); }
        public static SqlHavingCollection Results_NumKMax(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[NumK])", name: "NumKMax", value: value, _operator: _operator); }
        public static ResultsHavingCollection NumKMin(this ResultsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[NumK])", name: "NumKMin", value: value, _operator: _operator); }
        public static SqlHavingCollection Results_NumKMin(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[NumK])", name: "NumKMin", value: value, _operator: _operator); }
        public static ResultsHavingCollection NumLMax(this ResultsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[NumL])", name: "NumLMax", value: value, _operator: _operator); }
        public static SqlHavingCollection Results_NumLMax(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[NumL])", name: "NumLMax", value: value, _operator: _operator); }
        public static ResultsHavingCollection NumLMin(this ResultsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[NumL])", name: "NumLMin", value: value, _operator: _operator); }
        public static SqlHavingCollection Results_NumLMin(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[NumL])", name: "NumLMin", value: value, _operator: _operator); }
        public static ResultsHavingCollection NumMMax(this ResultsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[NumM])", name: "NumMMax", value: value, _operator: _operator); }
        public static SqlHavingCollection Results_NumMMax(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[NumM])", name: "NumMMax", value: value, _operator: _operator); }
        public static ResultsHavingCollection NumMMin(this ResultsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[NumM])", name: "NumMMin", value: value, _operator: _operator); }
        public static SqlHavingCollection Results_NumMMin(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[NumM])", name: "NumMMin", value: value, _operator: _operator); }
        public static ResultsHavingCollection NumNMax(this ResultsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[NumN])", name: "NumNMax", value: value, _operator: _operator); }
        public static SqlHavingCollection Results_NumNMax(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[NumN])", name: "NumNMax", value: value, _operator: _operator); }
        public static ResultsHavingCollection NumNMin(this ResultsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[NumN])", name: "NumNMin", value: value, _operator: _operator); }
        public static SqlHavingCollection Results_NumNMin(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[NumN])", name: "NumNMin", value: value, _operator: _operator); }
        public static ResultsHavingCollection NumOMax(this ResultsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[NumO])", name: "NumOMax", value: value, _operator: _operator); }
        public static SqlHavingCollection Results_NumOMax(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[NumO])", name: "NumOMax", value: value, _operator: _operator); }
        public static ResultsHavingCollection NumOMin(this ResultsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[NumO])", name: "NumOMin", value: value, _operator: _operator); }
        public static SqlHavingCollection Results_NumOMin(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[NumO])", name: "NumOMin", value: value, _operator: _operator); }
        public static ResultsHavingCollection NumPMax(this ResultsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[NumP])", name: "NumPMax", value: value, _operator: _operator); }
        public static SqlHavingCollection Results_NumPMax(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[NumP])", name: "NumPMax", value: value, _operator: _operator); }
        public static ResultsHavingCollection NumPMin(this ResultsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[NumP])", name: "NumPMin", value: value, _operator: _operator); }
        public static SqlHavingCollection Results_NumPMin(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[NumP])", name: "NumPMin", value: value, _operator: _operator); }
        public static ResultsHavingCollection CreatedTimeMax(this ResultsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[CreatedTime])", name: "CreatedTimeMax", value: value, _operator: _operator); }
        public static SqlHavingCollection Results_CreatedTimeMax(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[CreatedTime])", name: "CreatedTimeMax", value: value, _operator: _operator); }
        public static ResultsHavingCollection CreatedTimeMin(this ResultsHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[CreatedTime])", name: "CreatedTimeMin", value: value, _operator: _operator); }
        public static SqlHavingCollection Results_CreatedTimeMin(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[CreatedTime])", name: "CreatedTimeMin", value: value, _operator: _operator); }
        public static ResultsOrderByCollection SiteId(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[SiteId]"); }
        public static ResultsOrderByCollection UpdatedTime(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[UpdatedTime]"); }
        public static ResultsOrderByCollection ResultId(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[ResultId]"); }
        public static ResultsOrderByCollection Ver(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Ver]"); }
        public static ResultsOrderByCollection Title(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Title]"); }
        public static ResultsOrderByCollection Body(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Body]"); }
        public static ResultsOrderByCollection TitleBody(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Title]", "[t0].[Body]"); }
        public static ResultsOrderByCollection Status(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Status]"); }
        public static ResultsOrderByCollection Manager(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Manager]"); }
        public static ResultsOrderByCollection Owner(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Owner]"); }
        public static ResultsOrderByCollection ClassA(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[ClassA]"); }
        public static ResultsOrderByCollection ClassB(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[ClassB]"); }
        public static ResultsOrderByCollection ClassC(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[ClassC]"); }
        public static ResultsOrderByCollection ClassD(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[ClassD]"); }
        public static ResultsOrderByCollection ClassE(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[ClassE]"); }
        public static ResultsOrderByCollection ClassF(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[ClassF]"); }
        public static ResultsOrderByCollection ClassG(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[ClassG]"); }
        public static ResultsOrderByCollection ClassH(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[ClassH]"); }
        public static ResultsOrderByCollection ClassI(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[ClassI]"); }
        public static ResultsOrderByCollection ClassJ(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[ClassJ]"); }
        public static ResultsOrderByCollection ClassK(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[ClassK]"); }
        public static ResultsOrderByCollection ClassL(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[ClassL]"); }
        public static ResultsOrderByCollection ClassM(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[ClassM]"); }
        public static ResultsOrderByCollection ClassN(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[ClassN]"); }
        public static ResultsOrderByCollection ClassO(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[ClassO]"); }
        public static ResultsOrderByCollection ClassP(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[ClassP]"); }
        public static ResultsOrderByCollection NumA(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[NumA]"); }
        public static ResultsOrderByCollection NumB(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[NumB]"); }
        public static ResultsOrderByCollection NumC(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[NumC]"); }
        public static ResultsOrderByCollection NumD(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[NumD]"); }
        public static ResultsOrderByCollection NumE(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[NumE]"); }
        public static ResultsOrderByCollection NumF(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[NumF]"); }
        public static ResultsOrderByCollection NumG(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[NumG]"); }
        public static ResultsOrderByCollection NumH(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[NumH]"); }
        public static ResultsOrderByCollection NumI(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[NumI]"); }
        public static ResultsOrderByCollection NumJ(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[NumJ]"); }
        public static ResultsOrderByCollection NumK(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[NumK]"); }
        public static ResultsOrderByCollection NumL(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[NumL]"); }
        public static ResultsOrderByCollection NumM(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[NumM]"); }
        public static ResultsOrderByCollection NumN(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[NumN]"); }
        public static ResultsOrderByCollection NumO(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[NumO]"); }
        public static ResultsOrderByCollection NumP(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[NumP]"); }
        public static ResultsOrderByCollection DateA(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[DateA]"); }
        public static ResultsOrderByCollection DateB(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[DateB]"); }
        public static ResultsOrderByCollection DateC(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[DateC]"); }
        public static ResultsOrderByCollection DateD(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[DateD]"); }
        public static ResultsOrderByCollection DateE(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[DateE]"); }
        public static ResultsOrderByCollection DateF(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[DateF]"); }
        public static ResultsOrderByCollection DateG(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[DateG]"); }
        public static ResultsOrderByCollection DateH(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[DateH]"); }
        public static ResultsOrderByCollection DateI(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[DateI]"); }
        public static ResultsOrderByCollection DateJ(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[DateJ]"); }
        public static ResultsOrderByCollection DateK(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[DateK]"); }
        public static ResultsOrderByCollection DateL(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[DateL]"); }
        public static ResultsOrderByCollection DateM(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[DateM]"); }
        public static ResultsOrderByCollection DateN(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[DateN]"); }
        public static ResultsOrderByCollection DateO(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[DateO]"); }
        public static ResultsOrderByCollection DateP(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[DateP]"); }
        public static ResultsOrderByCollection DescriptionA(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[DescriptionA]"); }
        public static ResultsOrderByCollection DescriptionB(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[DescriptionB]"); }
        public static ResultsOrderByCollection DescriptionC(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[DescriptionC]"); }
        public static ResultsOrderByCollection DescriptionD(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[DescriptionD]"); }
        public static ResultsOrderByCollection DescriptionE(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[DescriptionE]"); }
        public static ResultsOrderByCollection DescriptionF(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[DescriptionF]"); }
        public static ResultsOrderByCollection DescriptionG(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[DescriptionG]"); }
        public static ResultsOrderByCollection DescriptionH(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[DescriptionH]"); }
        public static ResultsOrderByCollection DescriptionI(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[DescriptionI]"); }
        public static ResultsOrderByCollection DescriptionJ(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[DescriptionJ]"); }
        public static ResultsOrderByCollection DescriptionK(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[DescriptionK]"); }
        public static ResultsOrderByCollection DescriptionL(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[DescriptionL]"); }
        public static ResultsOrderByCollection DescriptionM(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[DescriptionM]"); }
        public static ResultsOrderByCollection DescriptionN(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[DescriptionN]"); }
        public static ResultsOrderByCollection DescriptionO(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[DescriptionO]"); }
        public static ResultsOrderByCollection DescriptionP(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[DescriptionP]"); }
        public static ResultsOrderByCollection CheckA(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[CheckA]"); }
        public static ResultsOrderByCollection CheckB(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[CheckB]"); }
        public static ResultsOrderByCollection CheckC(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[CheckC]"); }
        public static ResultsOrderByCollection CheckD(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[CheckD]"); }
        public static ResultsOrderByCollection CheckE(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[CheckE]"); }
        public static ResultsOrderByCollection CheckF(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[CheckF]"); }
        public static ResultsOrderByCollection CheckG(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[CheckG]"); }
        public static ResultsOrderByCollection CheckH(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[CheckH]"); }
        public static ResultsOrderByCollection CheckI(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[CheckI]"); }
        public static ResultsOrderByCollection CheckJ(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[CheckJ]"); }
        public static ResultsOrderByCollection CheckK(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[CheckK]"); }
        public static ResultsOrderByCollection CheckL(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[CheckL]"); }
        public static ResultsOrderByCollection CheckM(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[CheckM]"); }
        public static ResultsOrderByCollection CheckN(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[CheckN]"); }
        public static ResultsOrderByCollection CheckO(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[CheckO]"); }
        public static ResultsOrderByCollection CheckP(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[CheckP]"); }
        public static ResultsOrderByCollection Comments(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Comments]"); }
        public static ResultsOrderByCollection Creator(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Creator]"); }
        public static ResultsOrderByCollection Updator(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Updator]"); }
        public static ResultsOrderByCollection CreatedTime(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[CreatedTime]"); }
        public static SqlOrderByCollection Results_SiteId(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[SiteId]"); }
        public static SqlOrderByCollection Results_UpdatedTime(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[UpdatedTime]"); }
        public static SqlOrderByCollection Results_ResultId(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[ResultId]"); }
        public static SqlOrderByCollection Results_Ver(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Ver]"); }
        public static SqlOrderByCollection Results_Title(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Title]"); }
        public static SqlOrderByCollection Results_Body(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Body]"); }
        public static SqlOrderByCollection Results_TitleBody(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Title]", "[" + tableName + "].[Body]"); }
        public static SqlOrderByCollection Results_Status(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Status]"); }
        public static SqlOrderByCollection Results_Manager(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Manager]"); }
        public static SqlOrderByCollection Results_Owner(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Owner]"); }
        public static SqlOrderByCollection Results_ClassA(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[ClassA]"); }
        public static SqlOrderByCollection Results_ClassB(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[ClassB]"); }
        public static SqlOrderByCollection Results_ClassC(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[ClassC]"); }
        public static SqlOrderByCollection Results_ClassD(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[ClassD]"); }
        public static SqlOrderByCollection Results_ClassE(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[ClassE]"); }
        public static SqlOrderByCollection Results_ClassF(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[ClassF]"); }
        public static SqlOrderByCollection Results_ClassG(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[ClassG]"); }
        public static SqlOrderByCollection Results_ClassH(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[ClassH]"); }
        public static SqlOrderByCollection Results_ClassI(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[ClassI]"); }
        public static SqlOrderByCollection Results_ClassJ(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[ClassJ]"); }
        public static SqlOrderByCollection Results_ClassK(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[ClassK]"); }
        public static SqlOrderByCollection Results_ClassL(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[ClassL]"); }
        public static SqlOrderByCollection Results_ClassM(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[ClassM]"); }
        public static SqlOrderByCollection Results_ClassN(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[ClassN]"); }
        public static SqlOrderByCollection Results_ClassO(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[ClassO]"); }
        public static SqlOrderByCollection Results_ClassP(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[ClassP]"); }
        public static SqlOrderByCollection Results_NumA(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[NumA]"); }
        public static SqlOrderByCollection Results_NumB(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[NumB]"); }
        public static SqlOrderByCollection Results_NumC(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[NumC]"); }
        public static SqlOrderByCollection Results_NumD(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[NumD]"); }
        public static SqlOrderByCollection Results_NumE(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[NumE]"); }
        public static SqlOrderByCollection Results_NumF(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[NumF]"); }
        public static SqlOrderByCollection Results_NumG(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[NumG]"); }
        public static SqlOrderByCollection Results_NumH(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[NumH]"); }
        public static SqlOrderByCollection Results_NumI(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[NumI]"); }
        public static SqlOrderByCollection Results_NumJ(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[NumJ]"); }
        public static SqlOrderByCollection Results_NumK(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[NumK]"); }
        public static SqlOrderByCollection Results_NumL(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[NumL]"); }
        public static SqlOrderByCollection Results_NumM(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[NumM]"); }
        public static SqlOrderByCollection Results_NumN(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[NumN]"); }
        public static SqlOrderByCollection Results_NumO(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[NumO]"); }
        public static SqlOrderByCollection Results_NumP(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[NumP]"); }
        public static SqlOrderByCollection Results_DateA(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[DateA]"); }
        public static SqlOrderByCollection Results_DateB(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[DateB]"); }
        public static SqlOrderByCollection Results_DateC(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[DateC]"); }
        public static SqlOrderByCollection Results_DateD(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[DateD]"); }
        public static SqlOrderByCollection Results_DateE(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[DateE]"); }
        public static SqlOrderByCollection Results_DateF(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[DateF]"); }
        public static SqlOrderByCollection Results_DateG(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[DateG]"); }
        public static SqlOrderByCollection Results_DateH(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[DateH]"); }
        public static SqlOrderByCollection Results_DateI(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[DateI]"); }
        public static SqlOrderByCollection Results_DateJ(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[DateJ]"); }
        public static SqlOrderByCollection Results_DateK(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[DateK]"); }
        public static SqlOrderByCollection Results_DateL(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[DateL]"); }
        public static SqlOrderByCollection Results_DateM(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[DateM]"); }
        public static SqlOrderByCollection Results_DateN(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[DateN]"); }
        public static SqlOrderByCollection Results_DateO(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[DateO]"); }
        public static SqlOrderByCollection Results_DateP(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[DateP]"); }
        public static SqlOrderByCollection Results_DescriptionA(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[DescriptionA]"); }
        public static SqlOrderByCollection Results_DescriptionB(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[DescriptionB]"); }
        public static SqlOrderByCollection Results_DescriptionC(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[DescriptionC]"); }
        public static SqlOrderByCollection Results_DescriptionD(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[DescriptionD]"); }
        public static SqlOrderByCollection Results_DescriptionE(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[DescriptionE]"); }
        public static SqlOrderByCollection Results_DescriptionF(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[DescriptionF]"); }
        public static SqlOrderByCollection Results_DescriptionG(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[DescriptionG]"); }
        public static SqlOrderByCollection Results_DescriptionH(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[DescriptionH]"); }
        public static SqlOrderByCollection Results_DescriptionI(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[DescriptionI]"); }
        public static SqlOrderByCollection Results_DescriptionJ(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[DescriptionJ]"); }
        public static SqlOrderByCollection Results_DescriptionK(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[DescriptionK]"); }
        public static SqlOrderByCollection Results_DescriptionL(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[DescriptionL]"); }
        public static SqlOrderByCollection Results_DescriptionM(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[DescriptionM]"); }
        public static SqlOrderByCollection Results_DescriptionN(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[DescriptionN]"); }
        public static SqlOrderByCollection Results_DescriptionO(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[DescriptionO]"); }
        public static SqlOrderByCollection Results_DescriptionP(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[DescriptionP]"); }
        public static SqlOrderByCollection Results_CheckA(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[CheckA]"); }
        public static SqlOrderByCollection Results_CheckB(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[CheckB]"); }
        public static SqlOrderByCollection Results_CheckC(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[CheckC]"); }
        public static SqlOrderByCollection Results_CheckD(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[CheckD]"); }
        public static SqlOrderByCollection Results_CheckE(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[CheckE]"); }
        public static SqlOrderByCollection Results_CheckF(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[CheckF]"); }
        public static SqlOrderByCollection Results_CheckG(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[CheckG]"); }
        public static SqlOrderByCollection Results_CheckH(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[CheckH]"); }
        public static SqlOrderByCollection Results_CheckI(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[CheckI]"); }
        public static SqlOrderByCollection Results_CheckJ(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[CheckJ]"); }
        public static SqlOrderByCollection Results_CheckK(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[CheckK]"); }
        public static SqlOrderByCollection Results_CheckL(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[CheckL]"); }
        public static SqlOrderByCollection Results_CheckM(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[CheckM]"); }
        public static SqlOrderByCollection Results_CheckN(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[CheckN]"); }
        public static SqlOrderByCollection Results_CheckO(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[CheckO]"); }
        public static SqlOrderByCollection Results_CheckP(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[CheckP]"); }
        public static SqlOrderByCollection Results_Comments(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Comments]"); }
        public static SqlOrderByCollection Results_Creator(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Creator]"); }
        public static SqlOrderByCollection Results_Updator(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Updator]"); }
        public static SqlOrderByCollection Results_CreatedTime(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[CreatedTime]"); }
        public static ResultsOrderByCollection ResultsCount(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "count(*)"); }
        public static ResultsOrderByCollection NumATotal(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "sum([t0].[NumA])"); }
        public static SqlOrderByCollection Results_NumATotal(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "sum([t0].[NumA])"); }
        public static ResultsOrderByCollection NumAAverage(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "avg([t0].[NumA])"); }
        public static SqlOrderByCollection Results_NumAAverage(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "avg([t0].[NumA])"); }
        public static ResultsOrderByCollection NumBTotal(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "sum([t0].[NumB])"); }
        public static SqlOrderByCollection Results_NumBTotal(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "sum([t0].[NumB])"); }
        public static ResultsOrderByCollection NumBAverage(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "avg([t0].[NumB])"); }
        public static SqlOrderByCollection Results_NumBAverage(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "avg([t0].[NumB])"); }
        public static ResultsOrderByCollection NumCTotal(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "sum([t0].[NumC])"); }
        public static SqlOrderByCollection Results_NumCTotal(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "sum([t0].[NumC])"); }
        public static ResultsOrderByCollection NumCAverage(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "avg([t0].[NumC])"); }
        public static SqlOrderByCollection Results_NumCAverage(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "avg([t0].[NumC])"); }
        public static ResultsOrderByCollection NumDTotal(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "sum([t0].[NumD])"); }
        public static SqlOrderByCollection Results_NumDTotal(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "sum([t0].[NumD])"); }
        public static ResultsOrderByCollection NumDAverage(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "avg([t0].[NumD])"); }
        public static SqlOrderByCollection Results_NumDAverage(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "avg([t0].[NumD])"); }
        public static ResultsOrderByCollection NumETotal(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "sum([t0].[NumE])"); }
        public static SqlOrderByCollection Results_NumETotal(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "sum([t0].[NumE])"); }
        public static ResultsOrderByCollection NumEAverage(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "avg([t0].[NumE])"); }
        public static SqlOrderByCollection Results_NumEAverage(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "avg([t0].[NumE])"); }
        public static ResultsOrderByCollection NumFTotal(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "sum([t0].[NumF])"); }
        public static SqlOrderByCollection Results_NumFTotal(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "sum([t0].[NumF])"); }
        public static ResultsOrderByCollection NumFAverage(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "avg([t0].[NumF])"); }
        public static SqlOrderByCollection Results_NumFAverage(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "avg([t0].[NumF])"); }
        public static ResultsOrderByCollection NumGTotal(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "sum([t0].[NumG])"); }
        public static SqlOrderByCollection Results_NumGTotal(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "sum([t0].[NumG])"); }
        public static ResultsOrderByCollection NumGAverage(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "avg([t0].[NumG])"); }
        public static SqlOrderByCollection Results_NumGAverage(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "avg([t0].[NumG])"); }
        public static ResultsOrderByCollection NumHTotal(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "sum([t0].[NumH])"); }
        public static SqlOrderByCollection Results_NumHTotal(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "sum([t0].[NumH])"); }
        public static ResultsOrderByCollection NumHAverage(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "avg([t0].[NumH])"); }
        public static SqlOrderByCollection Results_NumHAverage(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "avg([t0].[NumH])"); }
        public static ResultsOrderByCollection NumITotal(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "sum([t0].[NumI])"); }
        public static SqlOrderByCollection Results_NumITotal(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "sum([t0].[NumI])"); }
        public static ResultsOrderByCollection NumIAverage(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "avg([t0].[NumI])"); }
        public static SqlOrderByCollection Results_NumIAverage(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "avg([t0].[NumI])"); }
        public static ResultsOrderByCollection NumJTotal(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "sum([t0].[NumJ])"); }
        public static SqlOrderByCollection Results_NumJTotal(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "sum([t0].[NumJ])"); }
        public static ResultsOrderByCollection NumJAverage(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "avg([t0].[NumJ])"); }
        public static SqlOrderByCollection Results_NumJAverage(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "avg([t0].[NumJ])"); }
        public static ResultsOrderByCollection NumKTotal(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "sum([t0].[NumK])"); }
        public static SqlOrderByCollection Results_NumKTotal(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "sum([t0].[NumK])"); }
        public static ResultsOrderByCollection NumKAverage(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "avg([t0].[NumK])"); }
        public static SqlOrderByCollection Results_NumKAverage(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "avg([t0].[NumK])"); }
        public static ResultsOrderByCollection NumLTotal(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "sum([t0].[NumL])"); }
        public static SqlOrderByCollection Results_NumLTotal(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "sum([t0].[NumL])"); }
        public static ResultsOrderByCollection NumLAverage(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "avg([t0].[NumL])"); }
        public static SqlOrderByCollection Results_NumLAverage(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "avg([t0].[NumL])"); }
        public static ResultsOrderByCollection NumMTotal(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "sum([t0].[NumM])"); }
        public static SqlOrderByCollection Results_NumMTotal(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "sum([t0].[NumM])"); }
        public static ResultsOrderByCollection NumMAverage(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "avg([t0].[NumM])"); }
        public static SqlOrderByCollection Results_NumMAverage(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "avg([t0].[NumM])"); }
        public static ResultsOrderByCollection NumNTotal(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "sum([t0].[NumN])"); }
        public static SqlOrderByCollection Results_NumNTotal(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "sum([t0].[NumN])"); }
        public static ResultsOrderByCollection NumNAverage(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "avg([t0].[NumN])"); }
        public static SqlOrderByCollection Results_NumNAverage(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "avg([t0].[NumN])"); }
        public static ResultsOrderByCollection NumOTotal(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "sum([t0].[NumO])"); }
        public static SqlOrderByCollection Results_NumOTotal(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "sum([t0].[NumO])"); }
        public static ResultsOrderByCollection NumOAverage(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "avg([t0].[NumO])"); }
        public static SqlOrderByCollection Results_NumOAverage(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "avg([t0].[NumO])"); }
        public static ResultsOrderByCollection NumPTotal(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "sum([t0].[NumP])"); }
        public static SqlOrderByCollection Results_NumPTotal(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "sum([t0].[NumP])"); }
        public static ResultsOrderByCollection NumPAverage(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "avg([t0].[NumP])"); }
        public static SqlOrderByCollection Results_NumPAverage(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "avg([t0].[NumP])"); }
        public static ResultsOrderByCollection NumAMax(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[NumA])"); }
        public static SqlOrderByCollection Results_NumAMax(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[NumA])"); }
        public static ResultsOrderByCollection NumAMin(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[NumA])"); }
        public static SqlOrderByCollection Results_NumAMin(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[NumA])"); }
        public static ResultsOrderByCollection NumBMax(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[NumB])"); }
        public static SqlOrderByCollection Results_NumBMax(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[NumB])"); }
        public static ResultsOrderByCollection NumBMin(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[NumB])"); }
        public static SqlOrderByCollection Results_NumBMin(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[NumB])"); }
        public static ResultsOrderByCollection NumCMax(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[NumC])"); }
        public static SqlOrderByCollection Results_NumCMax(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[NumC])"); }
        public static ResultsOrderByCollection NumCMin(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[NumC])"); }
        public static SqlOrderByCollection Results_NumCMin(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[NumC])"); }
        public static ResultsOrderByCollection NumDMax(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[NumD])"); }
        public static SqlOrderByCollection Results_NumDMax(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[NumD])"); }
        public static ResultsOrderByCollection NumDMin(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[NumD])"); }
        public static SqlOrderByCollection Results_NumDMin(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[NumD])"); }
        public static ResultsOrderByCollection NumEMax(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[NumE])"); }
        public static SqlOrderByCollection Results_NumEMax(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[NumE])"); }
        public static ResultsOrderByCollection NumEMin(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[NumE])"); }
        public static SqlOrderByCollection Results_NumEMin(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[NumE])"); }
        public static ResultsOrderByCollection NumFMax(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[NumF])"); }
        public static SqlOrderByCollection Results_NumFMax(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[NumF])"); }
        public static ResultsOrderByCollection NumFMin(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[NumF])"); }
        public static SqlOrderByCollection Results_NumFMin(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[NumF])"); }
        public static ResultsOrderByCollection NumGMax(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[NumG])"); }
        public static SqlOrderByCollection Results_NumGMax(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[NumG])"); }
        public static ResultsOrderByCollection NumGMin(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[NumG])"); }
        public static SqlOrderByCollection Results_NumGMin(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[NumG])"); }
        public static ResultsOrderByCollection NumHMax(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[NumH])"); }
        public static SqlOrderByCollection Results_NumHMax(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[NumH])"); }
        public static ResultsOrderByCollection NumHMin(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[NumH])"); }
        public static SqlOrderByCollection Results_NumHMin(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[NumH])"); }
        public static ResultsOrderByCollection NumIMax(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[NumI])"); }
        public static SqlOrderByCollection Results_NumIMax(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[NumI])"); }
        public static ResultsOrderByCollection NumIMin(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[NumI])"); }
        public static SqlOrderByCollection Results_NumIMin(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[NumI])"); }
        public static ResultsOrderByCollection NumJMax(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[NumJ])"); }
        public static SqlOrderByCollection Results_NumJMax(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[NumJ])"); }
        public static ResultsOrderByCollection NumJMin(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[NumJ])"); }
        public static SqlOrderByCollection Results_NumJMin(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[NumJ])"); }
        public static ResultsOrderByCollection NumKMax(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[NumK])"); }
        public static SqlOrderByCollection Results_NumKMax(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[NumK])"); }
        public static ResultsOrderByCollection NumKMin(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[NumK])"); }
        public static SqlOrderByCollection Results_NumKMin(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[NumK])"); }
        public static ResultsOrderByCollection NumLMax(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[NumL])"); }
        public static SqlOrderByCollection Results_NumLMax(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[NumL])"); }
        public static ResultsOrderByCollection NumLMin(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[NumL])"); }
        public static SqlOrderByCollection Results_NumLMin(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[NumL])"); }
        public static ResultsOrderByCollection NumMMax(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[NumM])"); }
        public static SqlOrderByCollection Results_NumMMax(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[NumM])"); }
        public static ResultsOrderByCollection NumMMin(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[NumM])"); }
        public static SqlOrderByCollection Results_NumMMin(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[NumM])"); }
        public static ResultsOrderByCollection NumNMax(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[NumN])"); }
        public static SqlOrderByCollection Results_NumNMax(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[NumN])"); }
        public static ResultsOrderByCollection NumNMin(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[NumN])"); }
        public static SqlOrderByCollection Results_NumNMin(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[NumN])"); }
        public static ResultsOrderByCollection NumOMax(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[NumO])"); }
        public static SqlOrderByCollection Results_NumOMax(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[NumO])"); }
        public static ResultsOrderByCollection NumOMin(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[NumO])"); }
        public static SqlOrderByCollection Results_NumOMin(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[NumO])"); }
        public static ResultsOrderByCollection NumPMax(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[NumP])"); }
        public static SqlOrderByCollection Results_NumPMax(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[NumP])"); }
        public static ResultsOrderByCollection NumPMin(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[NumP])"); }
        public static SqlOrderByCollection Results_NumPMin(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[NumP])"); }
        public static ResultsOrderByCollection CreatedTimeMax(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[CreatedTime])"); }
        public static SqlOrderByCollection Results_CreatedTimeMax(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[CreatedTime])"); }
        public static ResultsOrderByCollection CreatedTimeMin(this ResultsOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[CreatedTime])"); }
        public static SqlOrderByCollection Results_CreatedTimeMin(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[CreatedTime])"); }

        public static ResultsParamCollection ItemId(this ResultsParamCollection self, long itemId)
        {
            if (itemId == 0)
            {
                return self.ResultId(raw: Def.Sql.Identity);
            }
            else
            {
                return self.ResultId(value: itemId);
            }
        }

        public static ResultsParamCollection SiteId(this ResultsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[SiteId]", "SiteId", value, sub, raw, _using); }
        public static SqlParamCollection Results_SiteId(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[SiteId]", "SiteId", value, sub, raw, _using); }
        public static ResultsParamCollection UpdatedTime(this ResultsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[UpdatedTime]", "UpdatedTime", value, sub, raw, _using); }
        public static SqlParamCollection Results_UpdatedTime(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[UpdatedTime]", "UpdatedTime", value, sub, raw, _using); }
        public static ResultsParamCollection ResultId(this ResultsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ResultId]", "ResultId", value, sub, raw, _using); }
        public static SqlParamCollection Results_ResultId(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ResultId]", "ResultId", value, sub, raw, _using); }
        public static ResultsParamCollection Ver(this ResultsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Ver]", "Ver", value, sub, raw, _using); }
        public static SqlParamCollection Results_Ver(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Ver]", "Ver", value, sub, raw, _using); }
        public static ResultsParamCollection Title(this ResultsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Title]", "Title", value, sub, raw, _using); }
        public static SqlParamCollection Results_Title(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Title]", "Title", value, sub, raw, _using); }
        public static ResultsParamCollection Body(this ResultsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Body]", "Body", value, sub, raw, _using); }
        public static SqlParamCollection Results_Body(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Body]", "Body", value, sub, raw, _using); }
        public static ResultsParamCollection Status(this ResultsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Status]", "Status", value, sub, raw, _using); }
        public static SqlParamCollection Results_Status(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Status]", "Status", value, sub, raw, _using); }
        public static ResultsParamCollection Manager(this ResultsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Manager]", "Manager", value, sub, raw, _using); }
        public static SqlParamCollection Results_Manager(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Manager]", "Manager", value, sub, raw, _using); }
        public static ResultsParamCollection Owner(this ResultsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Owner]", "Owner", value, sub, raw, _using); }
        public static SqlParamCollection Results_Owner(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Owner]", "Owner", value, sub, raw, _using); }
        public static ResultsParamCollection ClassA(this ResultsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ClassA]", "ClassA", value, sub, raw, _using); }
        public static SqlParamCollection Results_ClassA(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ClassA]", "ClassA", value, sub, raw, _using); }
        public static ResultsParamCollection ClassB(this ResultsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ClassB]", "ClassB", value, sub, raw, _using); }
        public static SqlParamCollection Results_ClassB(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ClassB]", "ClassB", value, sub, raw, _using); }
        public static ResultsParamCollection ClassC(this ResultsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ClassC]", "ClassC", value, sub, raw, _using); }
        public static SqlParamCollection Results_ClassC(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ClassC]", "ClassC", value, sub, raw, _using); }
        public static ResultsParamCollection ClassD(this ResultsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ClassD]", "ClassD", value, sub, raw, _using); }
        public static SqlParamCollection Results_ClassD(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ClassD]", "ClassD", value, sub, raw, _using); }
        public static ResultsParamCollection ClassE(this ResultsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ClassE]", "ClassE", value, sub, raw, _using); }
        public static SqlParamCollection Results_ClassE(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ClassE]", "ClassE", value, sub, raw, _using); }
        public static ResultsParamCollection ClassF(this ResultsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ClassF]", "ClassF", value, sub, raw, _using); }
        public static SqlParamCollection Results_ClassF(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ClassF]", "ClassF", value, sub, raw, _using); }
        public static ResultsParamCollection ClassG(this ResultsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ClassG]", "ClassG", value, sub, raw, _using); }
        public static SqlParamCollection Results_ClassG(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ClassG]", "ClassG", value, sub, raw, _using); }
        public static ResultsParamCollection ClassH(this ResultsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ClassH]", "ClassH", value, sub, raw, _using); }
        public static SqlParamCollection Results_ClassH(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ClassH]", "ClassH", value, sub, raw, _using); }
        public static ResultsParamCollection ClassI(this ResultsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ClassI]", "ClassI", value, sub, raw, _using); }
        public static SqlParamCollection Results_ClassI(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ClassI]", "ClassI", value, sub, raw, _using); }
        public static ResultsParamCollection ClassJ(this ResultsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ClassJ]", "ClassJ", value, sub, raw, _using); }
        public static SqlParamCollection Results_ClassJ(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ClassJ]", "ClassJ", value, sub, raw, _using); }
        public static ResultsParamCollection ClassK(this ResultsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ClassK]", "ClassK", value, sub, raw, _using); }
        public static SqlParamCollection Results_ClassK(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ClassK]", "ClassK", value, sub, raw, _using); }
        public static ResultsParamCollection ClassL(this ResultsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ClassL]", "ClassL", value, sub, raw, _using); }
        public static SqlParamCollection Results_ClassL(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ClassL]", "ClassL", value, sub, raw, _using); }
        public static ResultsParamCollection ClassM(this ResultsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ClassM]", "ClassM", value, sub, raw, _using); }
        public static SqlParamCollection Results_ClassM(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ClassM]", "ClassM", value, sub, raw, _using); }
        public static ResultsParamCollection ClassN(this ResultsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ClassN]", "ClassN", value, sub, raw, _using); }
        public static SqlParamCollection Results_ClassN(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ClassN]", "ClassN", value, sub, raw, _using); }
        public static ResultsParamCollection ClassO(this ResultsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ClassO]", "ClassO", value, sub, raw, _using); }
        public static SqlParamCollection Results_ClassO(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ClassO]", "ClassO", value, sub, raw, _using); }
        public static ResultsParamCollection ClassP(this ResultsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ClassP]", "ClassP", value, sub, raw, _using); }
        public static SqlParamCollection Results_ClassP(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[ClassP]", "ClassP", value, sub, raw, _using); }
        public static ResultsParamCollection NumA(this ResultsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[NumA]", "NumA", value, sub, raw, _using); }
        public static SqlParamCollection Results_NumA(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[NumA]", "NumA", value, sub, raw, _using); }
        public static ResultsParamCollection NumB(this ResultsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[NumB]", "NumB", value, sub, raw, _using); }
        public static SqlParamCollection Results_NumB(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[NumB]", "NumB", value, sub, raw, _using); }
        public static ResultsParamCollection NumC(this ResultsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[NumC]", "NumC", value, sub, raw, _using); }
        public static SqlParamCollection Results_NumC(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[NumC]", "NumC", value, sub, raw, _using); }
        public static ResultsParamCollection NumD(this ResultsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[NumD]", "NumD", value, sub, raw, _using); }
        public static SqlParamCollection Results_NumD(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[NumD]", "NumD", value, sub, raw, _using); }
        public static ResultsParamCollection NumE(this ResultsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[NumE]", "NumE", value, sub, raw, _using); }
        public static SqlParamCollection Results_NumE(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[NumE]", "NumE", value, sub, raw, _using); }
        public static ResultsParamCollection NumF(this ResultsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[NumF]", "NumF", value, sub, raw, _using); }
        public static SqlParamCollection Results_NumF(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[NumF]", "NumF", value, sub, raw, _using); }
        public static ResultsParamCollection NumG(this ResultsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[NumG]", "NumG", value, sub, raw, _using); }
        public static SqlParamCollection Results_NumG(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[NumG]", "NumG", value, sub, raw, _using); }
        public static ResultsParamCollection NumH(this ResultsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[NumH]", "NumH", value, sub, raw, _using); }
        public static SqlParamCollection Results_NumH(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[NumH]", "NumH", value, sub, raw, _using); }
        public static ResultsParamCollection NumI(this ResultsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[NumI]", "NumI", value, sub, raw, _using); }
        public static SqlParamCollection Results_NumI(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[NumI]", "NumI", value, sub, raw, _using); }
        public static ResultsParamCollection NumJ(this ResultsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[NumJ]", "NumJ", value, sub, raw, _using); }
        public static SqlParamCollection Results_NumJ(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[NumJ]", "NumJ", value, sub, raw, _using); }
        public static ResultsParamCollection NumK(this ResultsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[NumK]", "NumK", value, sub, raw, _using); }
        public static SqlParamCollection Results_NumK(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[NumK]", "NumK", value, sub, raw, _using); }
        public static ResultsParamCollection NumL(this ResultsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[NumL]", "NumL", value, sub, raw, _using); }
        public static SqlParamCollection Results_NumL(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[NumL]", "NumL", value, sub, raw, _using); }
        public static ResultsParamCollection NumM(this ResultsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[NumM]", "NumM", value, sub, raw, _using); }
        public static SqlParamCollection Results_NumM(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[NumM]", "NumM", value, sub, raw, _using); }
        public static ResultsParamCollection NumN(this ResultsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[NumN]", "NumN", value, sub, raw, _using); }
        public static SqlParamCollection Results_NumN(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[NumN]", "NumN", value, sub, raw, _using); }
        public static ResultsParamCollection NumO(this ResultsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[NumO]", "NumO", value, sub, raw, _using); }
        public static SqlParamCollection Results_NumO(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[NumO]", "NumO", value, sub, raw, _using); }
        public static ResultsParamCollection NumP(this ResultsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[NumP]", "NumP", value, sub, raw, _using); }
        public static SqlParamCollection Results_NumP(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[NumP]", "NumP", value, sub, raw, _using); }
        public static ResultsParamCollection DateA(this ResultsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DateA]", "DateA", value, sub, raw, _using); }
        public static SqlParamCollection Results_DateA(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DateA]", "DateA", value, sub, raw, _using); }
        public static ResultsParamCollection DateB(this ResultsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DateB]", "DateB", value, sub, raw, _using); }
        public static SqlParamCollection Results_DateB(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DateB]", "DateB", value, sub, raw, _using); }
        public static ResultsParamCollection DateC(this ResultsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DateC]", "DateC", value, sub, raw, _using); }
        public static SqlParamCollection Results_DateC(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DateC]", "DateC", value, sub, raw, _using); }
        public static ResultsParamCollection DateD(this ResultsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DateD]", "DateD", value, sub, raw, _using); }
        public static SqlParamCollection Results_DateD(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DateD]", "DateD", value, sub, raw, _using); }
        public static ResultsParamCollection DateE(this ResultsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DateE]", "DateE", value, sub, raw, _using); }
        public static SqlParamCollection Results_DateE(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DateE]", "DateE", value, sub, raw, _using); }
        public static ResultsParamCollection DateF(this ResultsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DateF]", "DateF", value, sub, raw, _using); }
        public static SqlParamCollection Results_DateF(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DateF]", "DateF", value, sub, raw, _using); }
        public static ResultsParamCollection DateG(this ResultsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DateG]", "DateG", value, sub, raw, _using); }
        public static SqlParamCollection Results_DateG(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DateG]", "DateG", value, sub, raw, _using); }
        public static ResultsParamCollection DateH(this ResultsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DateH]", "DateH", value, sub, raw, _using); }
        public static SqlParamCollection Results_DateH(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DateH]", "DateH", value, sub, raw, _using); }
        public static ResultsParamCollection DateI(this ResultsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DateI]", "DateI", value, sub, raw, _using); }
        public static SqlParamCollection Results_DateI(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DateI]", "DateI", value, sub, raw, _using); }
        public static ResultsParamCollection DateJ(this ResultsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DateJ]", "DateJ", value, sub, raw, _using); }
        public static SqlParamCollection Results_DateJ(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DateJ]", "DateJ", value, sub, raw, _using); }
        public static ResultsParamCollection DateK(this ResultsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DateK]", "DateK", value, sub, raw, _using); }
        public static SqlParamCollection Results_DateK(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DateK]", "DateK", value, sub, raw, _using); }
        public static ResultsParamCollection DateL(this ResultsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DateL]", "DateL", value, sub, raw, _using); }
        public static SqlParamCollection Results_DateL(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DateL]", "DateL", value, sub, raw, _using); }
        public static ResultsParamCollection DateM(this ResultsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DateM]", "DateM", value, sub, raw, _using); }
        public static SqlParamCollection Results_DateM(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DateM]", "DateM", value, sub, raw, _using); }
        public static ResultsParamCollection DateN(this ResultsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DateN]", "DateN", value, sub, raw, _using); }
        public static SqlParamCollection Results_DateN(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DateN]", "DateN", value, sub, raw, _using); }
        public static ResultsParamCollection DateO(this ResultsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DateO]", "DateO", value, sub, raw, _using); }
        public static SqlParamCollection Results_DateO(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DateO]", "DateO", value, sub, raw, _using); }
        public static ResultsParamCollection DateP(this ResultsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DateP]", "DateP", value, sub, raw, _using); }
        public static SqlParamCollection Results_DateP(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DateP]", "DateP", value, sub, raw, _using); }
        public static ResultsParamCollection DescriptionA(this ResultsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DescriptionA]", "DescriptionA", value, sub, raw, _using); }
        public static SqlParamCollection Results_DescriptionA(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DescriptionA]", "DescriptionA", value, sub, raw, _using); }
        public static ResultsParamCollection DescriptionB(this ResultsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DescriptionB]", "DescriptionB", value, sub, raw, _using); }
        public static SqlParamCollection Results_DescriptionB(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DescriptionB]", "DescriptionB", value, sub, raw, _using); }
        public static ResultsParamCollection DescriptionC(this ResultsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DescriptionC]", "DescriptionC", value, sub, raw, _using); }
        public static SqlParamCollection Results_DescriptionC(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DescriptionC]", "DescriptionC", value, sub, raw, _using); }
        public static ResultsParamCollection DescriptionD(this ResultsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DescriptionD]", "DescriptionD", value, sub, raw, _using); }
        public static SqlParamCollection Results_DescriptionD(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DescriptionD]", "DescriptionD", value, sub, raw, _using); }
        public static ResultsParamCollection DescriptionE(this ResultsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DescriptionE]", "DescriptionE", value, sub, raw, _using); }
        public static SqlParamCollection Results_DescriptionE(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DescriptionE]", "DescriptionE", value, sub, raw, _using); }
        public static ResultsParamCollection DescriptionF(this ResultsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DescriptionF]", "DescriptionF", value, sub, raw, _using); }
        public static SqlParamCollection Results_DescriptionF(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DescriptionF]", "DescriptionF", value, sub, raw, _using); }
        public static ResultsParamCollection DescriptionG(this ResultsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DescriptionG]", "DescriptionG", value, sub, raw, _using); }
        public static SqlParamCollection Results_DescriptionG(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DescriptionG]", "DescriptionG", value, sub, raw, _using); }
        public static ResultsParamCollection DescriptionH(this ResultsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DescriptionH]", "DescriptionH", value, sub, raw, _using); }
        public static SqlParamCollection Results_DescriptionH(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DescriptionH]", "DescriptionH", value, sub, raw, _using); }
        public static ResultsParamCollection DescriptionI(this ResultsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DescriptionI]", "DescriptionI", value, sub, raw, _using); }
        public static SqlParamCollection Results_DescriptionI(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DescriptionI]", "DescriptionI", value, sub, raw, _using); }
        public static ResultsParamCollection DescriptionJ(this ResultsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DescriptionJ]", "DescriptionJ", value, sub, raw, _using); }
        public static SqlParamCollection Results_DescriptionJ(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DescriptionJ]", "DescriptionJ", value, sub, raw, _using); }
        public static ResultsParamCollection DescriptionK(this ResultsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DescriptionK]", "DescriptionK", value, sub, raw, _using); }
        public static SqlParamCollection Results_DescriptionK(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DescriptionK]", "DescriptionK", value, sub, raw, _using); }
        public static ResultsParamCollection DescriptionL(this ResultsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DescriptionL]", "DescriptionL", value, sub, raw, _using); }
        public static SqlParamCollection Results_DescriptionL(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DescriptionL]", "DescriptionL", value, sub, raw, _using); }
        public static ResultsParamCollection DescriptionM(this ResultsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DescriptionM]", "DescriptionM", value, sub, raw, _using); }
        public static SqlParamCollection Results_DescriptionM(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DescriptionM]", "DescriptionM", value, sub, raw, _using); }
        public static ResultsParamCollection DescriptionN(this ResultsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DescriptionN]", "DescriptionN", value, sub, raw, _using); }
        public static SqlParamCollection Results_DescriptionN(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DescriptionN]", "DescriptionN", value, sub, raw, _using); }
        public static ResultsParamCollection DescriptionO(this ResultsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DescriptionO]", "DescriptionO", value, sub, raw, _using); }
        public static SqlParamCollection Results_DescriptionO(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DescriptionO]", "DescriptionO", value, sub, raw, _using); }
        public static ResultsParamCollection DescriptionP(this ResultsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DescriptionP]", "DescriptionP", value, sub, raw, _using); }
        public static SqlParamCollection Results_DescriptionP(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[DescriptionP]", "DescriptionP", value, sub, raw, _using); }
        public static ResultsParamCollection CheckA(this ResultsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CheckA]", "CheckA", value, sub, raw, _using); }
        public static SqlParamCollection Results_CheckA(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CheckA]", "CheckA", value, sub, raw, _using); }
        public static ResultsParamCollection CheckB(this ResultsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CheckB]", "CheckB", value, sub, raw, _using); }
        public static SqlParamCollection Results_CheckB(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CheckB]", "CheckB", value, sub, raw, _using); }
        public static ResultsParamCollection CheckC(this ResultsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CheckC]", "CheckC", value, sub, raw, _using); }
        public static SqlParamCollection Results_CheckC(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CheckC]", "CheckC", value, sub, raw, _using); }
        public static ResultsParamCollection CheckD(this ResultsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CheckD]", "CheckD", value, sub, raw, _using); }
        public static SqlParamCollection Results_CheckD(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CheckD]", "CheckD", value, sub, raw, _using); }
        public static ResultsParamCollection CheckE(this ResultsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CheckE]", "CheckE", value, sub, raw, _using); }
        public static SqlParamCollection Results_CheckE(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CheckE]", "CheckE", value, sub, raw, _using); }
        public static ResultsParamCollection CheckF(this ResultsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CheckF]", "CheckF", value, sub, raw, _using); }
        public static SqlParamCollection Results_CheckF(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CheckF]", "CheckF", value, sub, raw, _using); }
        public static ResultsParamCollection CheckG(this ResultsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CheckG]", "CheckG", value, sub, raw, _using); }
        public static SqlParamCollection Results_CheckG(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CheckG]", "CheckG", value, sub, raw, _using); }
        public static ResultsParamCollection CheckH(this ResultsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CheckH]", "CheckH", value, sub, raw, _using); }
        public static SqlParamCollection Results_CheckH(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CheckH]", "CheckH", value, sub, raw, _using); }
        public static ResultsParamCollection CheckI(this ResultsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CheckI]", "CheckI", value, sub, raw, _using); }
        public static SqlParamCollection Results_CheckI(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CheckI]", "CheckI", value, sub, raw, _using); }
        public static ResultsParamCollection CheckJ(this ResultsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CheckJ]", "CheckJ", value, sub, raw, _using); }
        public static SqlParamCollection Results_CheckJ(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CheckJ]", "CheckJ", value, sub, raw, _using); }
        public static ResultsParamCollection CheckK(this ResultsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CheckK]", "CheckK", value, sub, raw, _using); }
        public static SqlParamCollection Results_CheckK(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CheckK]", "CheckK", value, sub, raw, _using); }
        public static ResultsParamCollection CheckL(this ResultsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CheckL]", "CheckL", value, sub, raw, _using); }
        public static SqlParamCollection Results_CheckL(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CheckL]", "CheckL", value, sub, raw, _using); }
        public static ResultsParamCollection CheckM(this ResultsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CheckM]", "CheckM", value, sub, raw, _using); }
        public static SqlParamCollection Results_CheckM(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CheckM]", "CheckM", value, sub, raw, _using); }
        public static ResultsParamCollection CheckN(this ResultsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CheckN]", "CheckN", value, sub, raw, _using); }
        public static SqlParamCollection Results_CheckN(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CheckN]", "CheckN", value, sub, raw, _using); }
        public static ResultsParamCollection CheckO(this ResultsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CheckO]", "CheckO", value, sub, raw, _using); }
        public static SqlParamCollection Results_CheckO(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CheckO]", "CheckO", value, sub, raw, _using); }
        public static ResultsParamCollection CheckP(this ResultsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CheckP]", "CheckP", value, sub, raw, _using); }
        public static SqlParamCollection Results_CheckP(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CheckP]", "CheckP", value, sub, raw, _using); }
        public static ResultsParamCollection Comments(this ResultsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Comments]", "Comments", value, sub, raw, _using); }
        public static SqlParamCollection Results_Comments(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Comments]", "Comments", value, sub, raw, _using); }
        public static ResultsParamCollection Creator(this ResultsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Creator]", "Creator", value, sub, raw, _using); }
        public static SqlParamCollection Results_Creator(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Creator]", "Creator", value, sub, raw, _using); }
        public static ResultsParamCollection Updator(this ResultsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Updator]", "Updator", value, sub, raw, _using); }
        public static SqlParamCollection Results_Updator(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Updator]", "Updator", value, sub, raw, _using); }
        public static ResultsParamCollection CreatedTime(this ResultsParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CreatedTime]", "CreatedTime", value, sub, raw, _using); }
        public static SqlParamCollection Results_CreatedTime(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CreatedTime]", "CreatedTime", value, sub, raw, _using); }

        public static WikisColumnCollection WikisColumn()
        {
            return new WikisColumnCollection();
        }

        public class WikisColumnCollection : SqlColumnCollection
        {
            public WikisColumnCollection Add(params string[] columnBrackets)
            {
                base.Add(false, columnBrackets);
                return this;
            }

            public new WikisColumnCollection Add(bool duplicates = false, params string[] columnBrackets)
            {
                base.Add(duplicates, columnBrackets);
                return this;
            }
        }

        public static WikisJoinCollection WikisJoin()
        {
            return new WikisJoinCollection();
        }

        public class WikisJoinCollection : SqlJoinCollection
        {
            public new WikisJoinCollection Add(params string[] columnBrackets)
            {
                columnBrackets.ForEach(columnBracket => base.Add(new SqlJoin(columnBracket)));
                return this;
            }
        }

        public static WikisWhereCollection WikisWhere()
        {
            return new WikisWhereCollection();
        }

        public class WikisWhereCollection : SqlWhereCollection
        {
            public new WikisWhereCollection Add(
                string[] columnBrackets = null,
                string name = "",
                object value = null,
                string _operator = "=",
                string multiColumnOperator = " or ",
                string multiParamOperator = " and ",
                SqlStatement sub = null,
                string raw = "",
                SqlWhereCollection or = null,
                bool _using = true)
            {
                base.Add(new SqlWhere(
                    columnBrackets: columnBrackets,
                    name: name,
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    sub: sub,
                    raw: raw,
                    or: or,
                    _using: _using));
                return this;
            }
        }

        public static WikisGroupByCollection WikisGroupBy()
        {
            return new WikisGroupByCollection();
        }

        public class WikisGroupByCollection : SqlGroupByCollection
        {
            public new WikisGroupByCollection Add(
                params string[] columnBrackets)
            {
                columnBrackets.ForEach(columnBracket =>
                    base.Add(new SqlGroupBy(columnBracket)));
                return this;
            }
        }

        public static WikisHavingCollection WikisHaving()
        {
            return new WikisHavingCollection();
        }

        public class WikisHavingCollection : SqlHavingCollection
        {
            public WikisHavingCollection Add(
                string columnBracket, string name, object value, string _operator)
            {
                base.Add(new SqlHaving(
                    columnBracket: columnBracket,
                    name: name,
                    value: value,
                    _operator: _operator));
                return this;
            }
        }

        public static WikisOrderByCollection WikisOrderBy()
        {
            return new WikisOrderByCollection();
        }

        public class WikisOrderByCollection : SqlOrderByCollection
        {
            public new WikisOrderByCollection Add(
                SqlOrderBy.Types type = SqlOrderBy.Types.asc,
                params string[] columnBrackets)
            {
                columnBrackets.ForEach(columnBracket =>
                    base.Add(new SqlOrderBy(columnBracket, type)));
                return this;
            }
        }

        public static WikisParamCollection WikisParam()
        {
            return new WikisParamCollection();
        }

        public class WikisParamCollection : SqlParamCollection
        {
            public new WikisParamCollection Add(
                string columnBracket = "",
                string name = "",
                object value = null,
                SqlStatement sub = null,
                string raw = null,
                bool _using = true)
            {
                base.Add(new SqlParam(columnBracket, name, value, sub, raw, _using));
                return this;
            }
        }

        public static string Wikis_Title_WhereLike(string tableName = "t0") { return "([" + tableName + "].[Title] like '%' + @SearchText#ParamCount#_#CommandCount# + '%')"; }
        public static string Wikis_Body_WhereLike(string tableName = "t0") { return "([" + tableName + "].[Body] like '%' + @SearchText#ParamCount#_#CommandCount# + '%')"; }
        public const string SqlWhereExists_Wikis = "exists(select * from [Wikis] where #SqlWhere#)";
        public const string SqlWhereNotExists_Wikis = "not exists(select * from [Wikis] where #SqlWhere#)";
        public static WikisColumnCollection SiteId(this WikisColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[SiteId]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Wikis_SiteId(this SqlColumnCollection self, string tableName = "Wikis", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[SiteId]" + _as.ExistsTo(" as [{0}]")); }
        public static WikisColumnCollection UpdatedTime(this WikisColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[UpdatedTime]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Wikis_UpdatedTime(this SqlColumnCollection self, string tableName = "Wikis", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[UpdatedTime]" + _as.ExistsTo(" as [{0}]")); }
        public static WikisColumnCollection WikiId(this WikisColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[WikiId]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Wikis_WikiId(this SqlColumnCollection self, string tableName = "Wikis", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[WikiId]" + _as.ExistsTo(" as [{0}]")); }
        public static WikisColumnCollection Ver(this WikisColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Ver]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Wikis_Ver(this SqlColumnCollection self, string tableName = "Wikis", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Ver]" + _as.ExistsTo(" as [{0}]")); }
        public static WikisColumnCollection Title(this WikisColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Title]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Wikis_Title(this SqlColumnCollection self, string tableName = "Wikis", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Title]" + _as.ExistsTo(" as [{0}]")); }
        public static WikisColumnCollection Body(this WikisColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Body]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Wikis_Body(this SqlColumnCollection self, string tableName = "Wikis", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Body]" + _as.ExistsTo(" as [{0}]")); }
        public static WikisColumnCollection Comments(this WikisColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Comments]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Wikis_Comments(this SqlColumnCollection self, string tableName = "Wikis", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Comments]" + _as.ExistsTo(" as [{0}]")); }
        public static WikisColumnCollection Creator(this WikisColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Creator]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Wikis_Creator(this SqlColumnCollection self, string tableName = "Wikis", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Creator]" + _as.ExistsTo(" as [{0}]")); }
        public static WikisColumnCollection Updator(this WikisColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[Updator]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Wikis_Updator(this SqlColumnCollection self, string tableName = "Wikis", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[Updator]" + _as.ExistsTo(" as [{0}]")); }
        public static WikisColumnCollection CreatedTime(this WikisColumnCollection self, bool duplicates = false, string _as = null) { return self.Add(duplicates, "[t0].[CreatedTime]" + _as.ExistsTo(" as [{0}]")); }
        public static SqlColumnCollection Wikis_CreatedTime(this SqlColumnCollection self, string tableName = "Wikis", bool duplicates = false, string _as = null) { return self.Add(duplicates, "[" + tableName + "].[CreatedTime]" + _as.ExistsTo(" as [{0}]")); }
        public static WikisColumnCollection TitleBody(this WikisColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "[t0].[Title]", "[t0].[Body]"); }
        public static SqlColumnCollection Wikis_TitleBody(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "[t0].[Title]", "[t0].[Body]"); }
        public static WikisColumnCollection WikisCount(this WikisColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "count(*) as WikisCount"); }
        public static WikisColumnCollection CreatedTimeMax(this WikisColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[CreatedTime]) as [CreatedTimeMax]"); }
        public static SqlColumnCollection Wikis_CreatedTimeMax(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "max([t0].[CreatedTime]) as [CreatedTimeMax]"); }
        public static WikisColumnCollection CreatedTimeMin(this WikisColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[CreatedTime]) as [CreatedTimeMin]"); }
        public static SqlColumnCollection Wikis_CreatedTimeMin(this SqlColumnCollection self, bool duplicates = false) { return self.Add(duplicates, "min([t0].[CreatedTime]) as [CreatedTimeMin]"); }
        public static WikisWhereCollection SiteId(this WikisWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[SiteId]" }, "SiteId", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Wikis_SiteId(this SqlWhereCollection self, object value = null, string tableName = "Wikis", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[SiteId]" }, "SiteId", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static WikisWhereCollection UpdatedTime(this WikisWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[UpdatedTime]" }, "UpdatedTime", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Wikis_UpdatedTime(this SqlWhereCollection self, object value = null, string tableName = "Wikis", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[UpdatedTime]" }, "UpdatedTime", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static WikisWhereCollection WikiId(this WikisWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[WikiId]" }, "WikiId", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Wikis_WikiId(this SqlWhereCollection self, object value = null, string tableName = "Wikis", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[WikiId]" }, "WikiId", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static WikisWhereCollection Ver(this WikisWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Ver]" }, "Ver", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Wikis_Ver(this SqlWhereCollection self, object value = null, string tableName = "Wikis", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Ver]" }, "Ver", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static WikisWhereCollection Title(this WikisWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Title]" }, "Title", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Wikis_Title(this SqlWhereCollection self, object value = null, string tableName = "Wikis", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Title]" }, "Title", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static WikisWhereCollection Body(this WikisWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Body]" }, "Body", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Wikis_Body(this SqlWhereCollection self, object value = null, string tableName = "Wikis", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Body]" }, "Body", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static WikisWhereCollection Comments(this WikisWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Comments]" }, "Comments", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Wikis_Comments(this SqlWhereCollection self, object value = null, string tableName = "Wikis", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Comments]" }, "Comments", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static WikisWhereCollection Creator(this WikisWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Creator]" }, "Creator", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Wikis_Creator(this SqlWhereCollection self, object value = null, string tableName = "Wikis", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Creator]" }, "Creator", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static WikisWhereCollection Updator(this WikisWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Updator]" }, "Updator", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Wikis_Updator(this SqlWhereCollection self, object value = null, string tableName = "Wikis", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[Updator]" }, "Updator", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static WikisWhereCollection CreatedTime(this WikisWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[CreatedTime]" }, "CreatedTime", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Wikis_CreatedTime(this SqlWhereCollection self, object value = null, string tableName = "Wikis", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[" + tableName + "].[CreatedTime]" }, "CreatedTime", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static WikisWhereCollection TitleBody(this WikisWhereCollection self, object value = null, string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Title]", "[t0].[Body]" }, "TitleBody", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static SqlWhereCollection Wikis_TitleBody(this SqlWhereCollection self, object value = null, string tableName = "Wikis", string _operator = "=", string multiColumnOperator = " or ", string multiParamOperator = " and ", SqlStatement sub = null, string raw = "", bool _using = true) { return self.Add(new string[] { "[t0].[Title]", "[t0].[Body]" }, "TitleBody", value, _operator, multiColumnOperator, multiParamOperator, sub, raw, _using: _using); }
        public static WikisWhereCollection SiteId_In(this WikisWhereCollection self, IEnumerable<long> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[SiteId]" }, "SiteId", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Wikis_SiteId_In(this SqlWhereCollection self, IEnumerable<long> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[SiteId]" }, "SiteId", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static WikisWhereCollection WikiId_In(this WikisWhereCollection self, IEnumerable<long> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[WikiId]" }, "WikiId", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Wikis_WikiId_In(this SqlWhereCollection self, IEnumerable<long> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[WikiId]" }, "WikiId", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static WikisWhereCollection Ver_In(this WikisWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Ver]" }, "Ver", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Wikis_Ver_In(this SqlWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Ver]" }, "Ver", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static WikisWhereCollection Creator_In(this WikisWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Creator]" }, "Creator", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Wikis_Creator_In(this SqlWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Creator]" }, "Creator", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static WikisWhereCollection Updator_In(this WikisWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Updator]" }, "Updator", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static SqlWhereCollection Wikis_Updator_In(this SqlWhereCollection self, IEnumerable<int> value = null, SqlStatement sub = null, bool negative = false, bool _using = true) { return self.Add(new string[] { "[t0].[Updator]" }, "Updator", _operator: negative ? " not in " : " in ", raw: value != null ? "({0})".Params(value.Join()) : string.Empty, sub: sub, _using: _using); }
        public static WikisWhereCollection SiteId_Between(this WikisWhereCollection self, long begin, long end, bool _using = true) { return self.Add(new string[] { "[t0].[SiteId]" }, "SiteId", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Wikis_SiteId_Between(this SqlWhereCollection self, long begin, long end, bool _using = true) { return self.Add(new string[] { "[t0].[SiteId]" }, "SiteId", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static WikisWhereCollection WikiId_Between(this WikisWhereCollection self, long begin, long end, bool _using = true) { return self.Add(new string[] { "[t0].[WikiId]" }, "WikiId", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Wikis_WikiId_Between(this SqlWhereCollection self, long begin, long end, bool _using = true) { return self.Add(new string[] { "[t0].[WikiId]" }, "WikiId", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static WikisWhereCollection Ver_Between(this WikisWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Ver]" }, "Ver", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Wikis_Ver_Between(this SqlWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Ver]" }, "Ver", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static WikisWhereCollection Creator_Between(this WikisWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Creator]" }, "Creator", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Wikis_Creator_Between(this SqlWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Creator]" }, "Creator", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static WikisWhereCollection Updator_Between(this WikisWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Updator]" }, "Updator", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Wikis_Updator_Between(this SqlWhereCollection self, int begin, int end, bool _using = true) { return self.Add(new string[] { "[t0].[Updator]" }, "Updator", _operator: " between ", raw: "{0} and {1} ".Params(begin, end), _using: _using); }
        public static WikisWhereCollection UpdatedTime_Between(this WikisWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[UpdatedTime]" }, "UpdatedTime", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Wikis_UpdatedTime_Between(this SqlWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[UpdatedTime]" }, "UpdatedTime", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static WikisWhereCollection CreatedTime_Between(this WikisWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[CreatedTime]" }, "CreatedTime", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static SqlWhereCollection Wikis_CreatedTime_Between(this SqlWhereCollection self, DateTime begin, DateTime end, bool _using = true) { return self.Add(new string[] { "[t0].[CreatedTime]" }, "CreatedTime", _operator: " between ", raw: "'{0}' and '{1}' ".Params(begin, end), _using: _using); }
        public static WikisWhereCollection Sub(this WikisWhereCollection self, SqlStatement sub, object value = null, string _operator = "=", bool _using = true) { return self.Add(null, null, value, _operator, sub: sub, _using: _using); }
        public static WikisWhereCollection Or(this WikisWhereCollection self, SqlWhereCollection or, bool _using = true) { return self.Add(null, null, or: or, _using: _using); }
        public static WikisGroupByCollection SiteId(this WikisGroupByCollection self) { return self.Add("[t0].[SiteId]"); }
        public static SqlGroupByCollection Wikis_SiteId(this SqlGroupByCollection self) { return self.Add("[t0].[SiteId]"); }
        public static WikisGroupByCollection UpdatedTime(this WikisGroupByCollection self) { return self.Add("[t0].[UpdatedTime]"); }
        public static SqlGroupByCollection Wikis_UpdatedTime(this SqlGroupByCollection self) { return self.Add("[t0].[UpdatedTime]"); }
        public static WikisGroupByCollection WikiId(this WikisGroupByCollection self) { return self.Add("[t0].[WikiId]"); }
        public static SqlGroupByCollection Wikis_WikiId(this SqlGroupByCollection self) { return self.Add("[t0].[WikiId]"); }
        public static WikisGroupByCollection Ver(this WikisGroupByCollection self) { return self.Add("[t0].[Ver]"); }
        public static SqlGroupByCollection Wikis_Ver(this SqlGroupByCollection self) { return self.Add("[t0].[Ver]"); }
        public static WikisGroupByCollection Title(this WikisGroupByCollection self) { return self.Add("[t0].[Title]"); }
        public static SqlGroupByCollection Wikis_Title(this SqlGroupByCollection self) { return self.Add("[t0].[Title]"); }
        public static WikisGroupByCollection Body(this WikisGroupByCollection self) { return self.Add("[t0].[Body]"); }
        public static SqlGroupByCollection Wikis_Body(this SqlGroupByCollection self) { return self.Add("[t0].[Body]"); }
        public static WikisGroupByCollection TitleBody(this WikisGroupByCollection self) { return self.Add("[t0].[Title]", "[t0].[Body]"); }
        public static SqlGroupByCollection Wikis_TitleBody(this SqlGroupByCollection self) { return self.Add("[t0].[Title]", "[t0].[Body]"); }
        public static WikisGroupByCollection Comments(this WikisGroupByCollection self) { return self.Add("[t0].[Comments]"); }
        public static SqlGroupByCollection Wikis_Comments(this SqlGroupByCollection self) { return self.Add("[t0].[Comments]"); }
        public static WikisGroupByCollection Creator(this WikisGroupByCollection self) { return self.Add("[t0].[Creator]"); }
        public static SqlGroupByCollection Wikis_Creator(this SqlGroupByCollection self) { return self.Add("[t0].[Creator]"); }
        public static WikisGroupByCollection Updator(this WikisGroupByCollection self) { return self.Add("[t0].[Updator]"); }
        public static SqlGroupByCollection Wikis_Updator(this SqlGroupByCollection self) { return self.Add("[t0].[Updator]"); }
        public static WikisGroupByCollection CreatedTime(this WikisGroupByCollection self) { return self.Add("[t0].[CreatedTime]"); }
        public static SqlGroupByCollection Wikis_CreatedTime(this SqlGroupByCollection self) { return self.Add("[t0].[CreatedTime]"); }
        public static WikisHavingCollection WikisCount(this WikisHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "count(*)", name: "WikisCount", value: value, _operator: _operator); }
        public static WikisHavingCollection CreatedTimeMax(this WikisHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[CreatedTime])", name: "CreatedTimeMax", value: value, _operator: _operator); }
        public static SqlHavingCollection Wikis_CreatedTimeMax(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "max([t0].[CreatedTime])", name: "CreatedTimeMax", value: value, _operator: _operator); }
        public static WikisHavingCollection CreatedTimeMin(this WikisHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[CreatedTime])", name: "CreatedTimeMin", value: value, _operator: _operator); }
        public static SqlHavingCollection Wikis_CreatedTimeMin(this SqlHavingCollection self, object value, string _operator) { return self.Add(columnBracket: "min([t0].[CreatedTime])", name: "CreatedTimeMin", value: value, _operator: _operator); }
        public static WikisOrderByCollection SiteId(this WikisOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[SiteId]"); }
        public static WikisOrderByCollection UpdatedTime(this WikisOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[UpdatedTime]"); }
        public static WikisOrderByCollection WikiId(this WikisOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[WikiId]"); }
        public static WikisOrderByCollection Ver(this WikisOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Ver]"); }
        public static WikisOrderByCollection Title(this WikisOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Title]"); }
        public static WikisOrderByCollection Body(this WikisOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Body]"); }
        public static WikisOrderByCollection TitleBody(this WikisOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Title]", "[t0].[Body]"); }
        public static WikisOrderByCollection Comments(this WikisOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Comments]"); }
        public static WikisOrderByCollection Creator(this WikisOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Creator]"); }
        public static WikisOrderByCollection Updator(this WikisOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[Updator]"); }
        public static WikisOrderByCollection CreatedTime(this WikisOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "[t0].[CreatedTime]"); }
        public static SqlOrderByCollection Wikis_SiteId(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[SiteId]"); }
        public static SqlOrderByCollection Wikis_UpdatedTime(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[UpdatedTime]"); }
        public static SqlOrderByCollection Wikis_WikiId(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[WikiId]"); }
        public static SqlOrderByCollection Wikis_Ver(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Ver]"); }
        public static SqlOrderByCollection Wikis_Title(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Title]"); }
        public static SqlOrderByCollection Wikis_Body(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Body]"); }
        public static SqlOrderByCollection Wikis_TitleBody(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Title]", "[" + tableName + "].[Body]"); }
        public static SqlOrderByCollection Wikis_Comments(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Comments]"); }
        public static SqlOrderByCollection Wikis_Creator(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Creator]"); }
        public static SqlOrderByCollection Wikis_Updator(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[Updator]"); }
        public static SqlOrderByCollection Wikis_CreatedTime(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc, string tableName = "t0") { return self.Add(type, "[" + tableName + "].[CreatedTime]"); }
        public static WikisOrderByCollection WikisCount(this WikisOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "count(*)"); }
        public static WikisOrderByCollection CreatedTimeMax(this WikisOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[CreatedTime])"); }
        public static SqlOrderByCollection Wikis_CreatedTimeMax(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "max([t0].[CreatedTime])"); }
        public static WikisOrderByCollection CreatedTimeMin(this WikisOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[CreatedTime])"); }
        public static SqlOrderByCollection Wikis_CreatedTimeMin(this SqlOrderByCollection self, SqlOrderBy.Types type = SqlOrderBy.Types.asc) { return self.Add(type, "min([t0].[CreatedTime])"); }

        public static WikisParamCollection ItemId(this WikisParamCollection self, long itemId)
        {
            if (itemId == 0)
            {
                return self.WikiId(raw: Def.Sql.Identity);
            }
            else
            {
                return self.WikiId(value: itemId);
            }
        }

        public static WikisParamCollection SiteId(this WikisParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[SiteId]", "SiteId", value, sub, raw, _using); }
        public static SqlParamCollection Wikis_SiteId(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[SiteId]", "SiteId", value, sub, raw, _using); }
        public static WikisParamCollection UpdatedTime(this WikisParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[UpdatedTime]", "UpdatedTime", value, sub, raw, _using); }
        public static SqlParamCollection Wikis_UpdatedTime(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[UpdatedTime]", "UpdatedTime", value, sub, raw, _using); }
        public static WikisParamCollection WikiId(this WikisParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[WikiId]", "WikiId", value, sub, raw, _using); }
        public static SqlParamCollection Wikis_WikiId(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[WikiId]", "WikiId", value, sub, raw, _using); }
        public static WikisParamCollection Ver(this WikisParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Ver]", "Ver", value, sub, raw, _using); }
        public static SqlParamCollection Wikis_Ver(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Ver]", "Ver", value, sub, raw, _using); }
        public static WikisParamCollection Title(this WikisParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Title]", "Title", value, sub, raw, _using); }
        public static SqlParamCollection Wikis_Title(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Title]", "Title", value, sub, raw, _using); }
        public static WikisParamCollection Body(this WikisParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Body]", "Body", value, sub, raw, _using); }
        public static SqlParamCollection Wikis_Body(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Body]", "Body", value, sub, raw, _using); }
        public static WikisParamCollection Comments(this WikisParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Comments]", "Comments", value, sub, raw, _using); }
        public static SqlParamCollection Wikis_Comments(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Comments]", "Comments", value, sub, raw, _using); }
        public static WikisParamCollection Creator(this WikisParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Creator]", "Creator", value, sub, raw, _using); }
        public static SqlParamCollection Wikis_Creator(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Creator]", "Creator", value, sub, raw, _using); }
        public static WikisParamCollection Updator(this WikisParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Updator]", "Updator", value, sub, raw, _using); }
        public static SqlParamCollection Wikis_Updator(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[Updator]", "Updator", value, sub, raw, _using); }
        public static WikisParamCollection CreatedTime(this WikisParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CreatedTime]", "CreatedTime", value, sub, raw, _using); }
        public static SqlParamCollection Wikis_CreatedTime(this SqlParamCollection self, object value = null, SqlStatement sub = null, string raw = null, bool _using = true) { return self.Add("[CreatedTime]", "CreatedTime", value, sub, raw, _using); }

        public static TenantsColumnCollection TenantsColumnDefault()
        {
            return Rds.TenantsColumn()
                .TenantId()
                .Ver()
                .TenantName()
                .Title()
                .Body()
                .Comments()
                .Creator()
                .Updator()
                .CreatedTime()
                .UpdatedTime();
        }

        public static TenantsJoinCollection TenantsJoinDefault()
        {
            return Rds.TenantsJoin();
        }

        public static TenantsWhereCollection TenantsWhereDefault(TenantModel tenantModel)
        {
            return Rds.TenantsWhere()
                .TenantId(tenantModel.TenantId);
        }

        public static TenantsParamCollection TenantsParamDefault(
            TenantModel tenantModel, bool setDefault = false, bool paramAll = false)
        {
            return Rds.TenantsParam()
                .Ver(tenantModel.Ver, _using: tenantModel.Ver_Updated || setDefault || paramAll)
                .TenantName(tenantModel.TenantName.MaxLength(1024), _using: tenantModel.TenantName_Updated || setDefault || paramAll)
                .Title(tenantModel.Title.Value.MaxLength(1024), _using: tenantModel.Title_Updated || paramAll)
                .Body(tenantModel.Body, _using: tenantModel.Body_Updated || paramAll)
                .Comments(tenantModel.Comments.ToJson(), _using: tenantModel.Comments_Updated || paramAll);
        }

        public static DemosColumnCollection DemosColumnDefault()
        {
            return Rds.DemosColumn()
                .DemoId()
                .Ver()
                .TenantId()
                .Title()
                .Passphrase()
                .MailAddress()
                .Initialized()
                .Comments()
                .Creator()
                .Updator()
                .CreatedTime()
                .UpdatedTime();
        }

        public static DemosJoinCollection DemosJoinDefault()
        {
            return Rds.DemosJoin();
        }

        public static DemosWhereCollection DemosWhereDefault(DemoModel demoModel)
        {
            return Rds.DemosWhere()
                .DemoId(demoModel.DemoId);
        }

        public static DemosParamCollection DemosParamDefault(
            DemoModel demoModel, bool setDefault = false, bool paramAll = false)
        {
            return Rds.DemosParam()
                .Ver(demoModel.Ver, _using: demoModel.Ver_Updated || setDefault || paramAll)
                .TenantId(demoModel.TenantId, _using: demoModel.TenantId_Updated || setDefault || paramAll)
                .Title(demoModel.Title.Value.MaxLength(1024), _using: demoModel.Title_Updated || paramAll)
                .Passphrase(demoModel.Passphrase.MaxLength(34), _using: demoModel.Passphrase_Updated || setDefault || paramAll)
                .MailAddress(demoModel.MailAddress.MaxLength(2048), _using: demoModel.MailAddress_Updated || setDefault || paramAll)
                .Initialized(demoModel.Initialized, _using: demoModel.Initialized_Updated || setDefault || paramAll)
                .Comments(demoModel.Comments.ToJson(), _using: demoModel.Comments_Updated || paramAll);
        }

        public static SysLogsColumnCollection SysLogsColumnDefault()
        {
            return Rds.SysLogsColumn()
                .CreatedTime()
                .SysLogId()
                .Ver()
                .SysLogType()
                .OnAzure()
                .MachineName()
                .ServiceName()
                .TenantName()
                .Application()
                .Class()
                .Method()
                .RequestData()
                .HttpMethod()
                .RequestSize()
                .ResponseSize()
                .Elapsed()
                .ApplicationAge()
                .ApplicationRequestInterval()
                .SessionAge()
                .SessionRequestInterval()
                .WorkingSet64()
                .VirtualMemorySize64()
                .ProcessId()
                .ProcessName()
                .BasePriority()
                .Url()
                .UrlReferer()
                .UserHostName()
                .UserHostAddress()
                .UserLanguage()
                .UserAgent()
                .SessionGuid()
                .ErrMessage()
                .ErrStackTrace()
                .InDebug()
                .AssemblyVersion()
                .Comments()
                .Creator()
                .Updator()
                .UpdatedTime();
        }

        public static SysLogsJoinCollection SysLogsJoinDefault()
        {
            return Rds.SysLogsJoin();
        }

        public static SysLogsWhereCollection SysLogsWhereDefault(SysLogModel sysLogModel)
        {
            return Rds.SysLogsWhere()
                .SysLogId(sysLogModel.SysLogId);
        }

        public static SysLogsParamCollection SysLogsParamDefault(
            SysLogModel sysLogModel, bool setDefault = false, bool paramAll = false)
        {
            return Rds.SysLogsParam()
                .Ver(sysLogModel.Ver, _using: sysLogModel.Ver_Updated || setDefault || paramAll)
                .SysLogType(sysLogModel.SysLogType.ToInt(), _using: sysLogModel.SysLogType_Updated || setDefault || paramAll)
                .OnAzure(sysLogModel.OnAzure, _using: sysLogModel.OnAzure_Updated || paramAll)
                .MachineName(sysLogModel.MachineName.MaxLength(64), _using: sysLogModel.MachineName_Updated || paramAll)
                .ServiceName(sysLogModel.ServiceName.MaxLength(64), _using: sysLogModel.ServiceName_Updated || paramAll)
                .TenantName(sysLogModel.TenantName.MaxLength(64), _using: sysLogModel.TenantName_Updated || paramAll)
                .Application(sysLogModel.Application.MaxLength(64), _using: sysLogModel.Application_Updated || paramAll)
                .Class(sysLogModel.Class.MaxLength(256), _using: sysLogModel.Class_Updated || paramAll)
                .Method(sysLogModel.Method.MaxLength(256), _using: sysLogModel.Method_Updated || paramAll)
                .RequestData(sysLogModel.RequestData, _using: sysLogModel.RequestData_Updated || paramAll)
                .HttpMethod(sysLogModel.HttpMethod.MaxLength(8), _using: sysLogModel.HttpMethod_Updated || paramAll)
                .RequestSize(sysLogModel.RequestSize, _using: sysLogModel.RequestSize_Updated || paramAll)
                .ResponseSize(sysLogModel.ResponseSize, _using: sysLogModel.ResponseSize_Updated || paramAll)
                .Elapsed(sysLogModel.Elapsed, _using: sysLogModel.Elapsed_Updated || paramAll)
                .ApplicationAge(sysLogModel.ApplicationAge, _using: sysLogModel.ApplicationAge_Updated || paramAll)
                .ApplicationRequestInterval(sysLogModel.ApplicationRequestInterval, _using: sysLogModel.ApplicationRequestInterval_Updated || paramAll)
                .SessionAge(sysLogModel.SessionAge, _using: sysLogModel.SessionAge_Updated || paramAll)
                .SessionRequestInterval(sysLogModel.SessionRequestInterval, _using: sysLogModel.SessionRequestInterval_Updated || paramAll)
                .WorkingSet64(sysLogModel.WorkingSet64, _using: sysLogModel.WorkingSet64_Updated || paramAll)
                .VirtualMemorySize64(sysLogModel.VirtualMemorySize64, _using: sysLogModel.VirtualMemorySize64_Updated || paramAll)
                .ProcessId(sysLogModel.ProcessId, _using: sysLogModel.ProcessId_Updated || paramAll)
                .ProcessName(sysLogModel.ProcessName.MaxLength(256), _using: sysLogModel.ProcessName_Updated || paramAll)
                .BasePriority(sysLogModel.BasePriority, _using: sysLogModel.BasePriority_Updated || paramAll)
                .Url(sysLogModel.Url, _using: sysLogModel.Url_Updated || paramAll)
                .UrlReferer(sysLogModel.UrlReferer, _using: sysLogModel.UrlReferer_Updated || paramAll)
                .UserHostName(sysLogModel.UserHostName.MaxLength(32), _using: sysLogModel.UserHostName_Updated || paramAll)
                .UserHostAddress(sysLogModel.UserHostAddress.MaxLength(16), _using: sysLogModel.UserHostAddress_Updated || paramAll)
                .UserLanguage(sysLogModel.UserLanguage.MaxLength(32), _using: sysLogModel.UserLanguage_Updated || paramAll)
                .UserAgent(sysLogModel.UserAgent, _using: sysLogModel.UserAgent_Updated || paramAll)
                .SessionGuid(sysLogModel.SessionGuid.MaxLength(34), _using: sysLogModel.SessionGuid_Updated || paramAll)
                .ErrMessage(sysLogModel.ErrMessage.MaxLength(256), _using: sysLogModel.ErrMessage_Updated || paramAll)
                .ErrStackTrace(sysLogModel.ErrStackTrace, _using: sysLogModel.ErrStackTrace_Updated || paramAll)
                .InDebug(sysLogModel.InDebug, _using: sysLogModel.InDebug_Updated || paramAll)
                .AssemblyVersion(sysLogModel.AssemblyVersion.MaxLength(32), _using: sysLogModel.AssemblyVersion_Updated || paramAll)
                .Comments(sysLogModel.Comments.ToJson(), _using: sysLogModel.Comments_Updated || paramAll);
        }

        public static DeptsColumnCollection DeptsColumnDefault()
        {
            return Rds.DeptsColumn()
                .TenantId()
                .DeptId()
                .Ver()
                .ParentDeptId()
                .ParentDept()
                .DeptCode()
                .Dept()
                .DeptName()
                .Body()
                .Comments()
                .Creator()
                .Updator()
                .CreatedTime()
                .UpdatedTime();
        }

        public static DeptsJoinCollection DeptsJoinDefault()
        {
            return Rds.DeptsJoin();
        }

        public static DeptsWhereCollection DeptsWhereDefault(DeptModel deptModel)
        {
            return Rds.DeptsWhere()
                .TenantId(deptModel.TenantId)
                .DeptId(deptModel.DeptId);
        }

        public static DeptsParamCollection DeptsParamDefault(
            DeptModel deptModel, bool setDefault = false, bool paramAll = false)
        {
            return Rds.DeptsParam()
                .TenantId(deptModel.TenantId, _using: deptModel.TenantId_Updated || setDefault || paramAll)
                .Ver(deptModel.Ver, _using: deptModel.Ver_Updated || setDefault || paramAll)
                .ParentDeptId(deptModel.ParentDeptId, _using: deptModel.ParentDeptId_Updated || setDefault || paramAll)
                .DeptCode(deptModel.DeptCode.MaxLength(32), _using: deptModel.DeptCode_Updated || setDefault || paramAll)
                .DeptName(deptModel.DeptName.MaxLength(256), _using: deptModel.DeptName_Updated || setDefault || paramAll)
                .Body(deptModel.Body, _using: deptModel.Body_Updated || paramAll)
                .Comments(deptModel.Comments.ToJson(), _using: deptModel.Comments_Updated || paramAll);
        }

        public static UsersColumnCollection UsersColumnDefault()
        {
            return Rds.UsersColumn()
                .TenantId()
                .UserId()
                .Ver()
                .LoginId()
                .Disabled()
                .UserCode()
                .Password()
                .LastName()
                .FirstName()
                .Birthday()
                .Sex()
                .Language()
                .TimeZone()
                .DeptId()
                .Dept()
                .FirstAndLastNameOrder()
                .LastLoginTime()
                .PasswordExpirationTime()
                .PasswordChangeTime()
                .NumberOfLogins()
                .NumberOfDenial()
                .TenantAdmin()
                .ServiceAdmin()
                .Developer()
                .Comments()
                .Creator()
                .Updator()
                .CreatedTime()
                .UpdatedTime();
        }

        public static UsersJoinCollection UsersJoinDefault()
        {
            return Rds.UsersJoin();
        }

        public static UsersWhereCollection UsersWhereDefault(UserModel userModel)
        {
            return Rds.UsersWhere()
                .TenantId(userModel.TenantId)
                .UserId(userModel.UserId);
        }

        public static UsersParamCollection UsersParamDefault(
            UserModel userModel, bool setDefault = false, bool paramAll = false)
        {
            return Rds.UsersParam()
                .TenantId(userModel.TenantId, _using: userModel.TenantId_Updated || setDefault || paramAll)
                .Ver(userModel.Ver, _using: userModel.Ver_Updated || setDefault || paramAll)
                .LoginId(userModel.LoginId.MaxLength(32), _using: userModel.LoginId_Updated || setDefault || paramAll)
                .Disabled(userModel.Disabled, _using: userModel.Disabled_Updated || setDefault || paramAll)
                .UserCode(userModel.UserCode.MaxLength(32), _using: userModel.UserCode_Updated || paramAll)
                .Password(userModel.Password.MaxLength(128), _using: userModel.Password_Updated || paramAll)
                .LastName(userModel.LastName.MaxLength(32), _using: userModel.LastName_Updated || setDefault || paramAll)
                .FirstName(userModel.FirstName.MaxLength(32), _using: userModel.FirstName_Updated || setDefault || paramAll)
                .Birthday(userModel.Birthday.Value, _using: userModel.Birthday_Updated || paramAll)
                .Sex(userModel.Sex.MaxLength(2), _using: userModel.Sex_Updated || paramAll)
                .Language(userModel.Language.MaxLength(32), _using: userModel.Language_Updated || setDefault || paramAll)
                .TimeZone(userModel.TimeZone.MaxLength(32), _using: userModel.TimeZone_Updated || paramAll)
                .DeptId(userModel.DeptId, _using: userModel.DeptId_Updated || setDefault || paramAll)
                .FirstAndLastNameOrder(userModel.FirstAndLastNameOrder.ToInt(), _using: userModel.FirstAndLastNameOrder_Updated || setDefault || paramAll)
                .LastLoginTime(userModel.LastLoginTime.Value, _using: userModel.LastLoginTime_Updated || paramAll)
                .PasswordExpirationTime(userModel.PasswordExpirationTime.Value, _using: userModel.PasswordExpirationTime_Updated || paramAll)
                .PasswordChangeTime(userModel.PasswordChangeTime.Value, _using: userModel.PasswordChangeTime_Updated || paramAll)
                .NumberOfLogins(userModel.NumberOfLogins, _using: userModel.NumberOfLogins_Updated || setDefault || paramAll)
                .NumberOfDenial(userModel.NumberOfDenial, _using: userModel.NumberOfDenial_Updated || setDefault || paramAll)
                .TenantAdmin(userModel.TenantAdmin, _using: userModel.TenantAdmin_Updated || setDefault || paramAll)
                .ServiceAdmin(userModel.ServiceAdmin, _using: userModel.ServiceAdmin_Updated || setDefault || paramAll)
                .Developer(userModel.Developer, _using: userModel.Developer_Updated || setDefault || paramAll)
                .Comments(userModel.Comments.ToJson(), _using: userModel.Comments_Updated || paramAll);
        }

        public static MailAddressesColumnCollection MailAddressesColumnDefault()
        {
            return Rds.MailAddressesColumn()
                .OwnerId()
                .OwnerType()
                .MailAddressId()
                .Ver()
                .MailAddress()
                .Comments()
                .Creator()
                .Updator()
                .CreatedTime()
                .UpdatedTime();
        }

        public static MailAddressesJoinCollection MailAddressesJoinDefault()
        {
            return Rds.MailAddressesJoin();
        }

        public static MailAddressesWhereCollection MailAddressesWhereDefault(MailAddressModel mailAddressModel)
        {
            return Rds.MailAddressesWhere()
                .OwnerId(mailAddressModel.OwnerId)
                .OwnerType(mailAddressModel.OwnerType.MaxLength(32))
                .MailAddressId(mailAddressModel.MailAddressId);
        }

        public static MailAddressesParamCollection MailAddressesParamDefault(
            MailAddressModel mailAddressModel, bool setDefault = false, bool paramAll = false)
        {
            return Rds.MailAddressesParam()
                .OwnerId(mailAddressModel.OwnerId, _using: mailAddressModel.OwnerId_Updated || setDefault || paramAll)
                .OwnerType(mailAddressModel.OwnerType.MaxLength(32), _using: mailAddressModel.OwnerType_Updated || setDefault || paramAll)
                .Ver(mailAddressModel.Ver, _using: mailAddressModel.Ver_Updated || setDefault || paramAll)
                .MailAddress(mailAddressModel.MailAddress.MaxLength(2048), _using: mailAddressModel.MailAddress_Updated || setDefault || paramAll)
                .Comments(mailAddressModel.Comments.ToJson(), _using: mailAddressModel.Comments_Updated || paramAll);
        }

        public static PermissionsColumnCollection PermissionsColumnDefault()
        {
            return Rds.PermissionsColumn()
                .ReferenceType()
                .ReferenceId()
                .DeptId()
                .UserId()
                .Ver()
                .DeptName()
                .FullName1()
                .FullName2()
                .FirstAndLastNameOrder()
                .PermissionType()
                .Comments()
                .Creator()
                .Updator()
                .CreatedTime()
                .UpdatedTime();
        }

        public static PermissionsJoinCollection PermissionsJoinDefault()
        {
            return Rds.PermissionsJoin().Add("left outer join [Depts] as [t1] on [t0].[DeptId]=[t1].[DeptId]").Add("left outer join [Users] as [t2] on [t0].[UserId]=[t2].[UserId]");
        }

        public static PermissionsWhereCollection PermissionsWhereDefault(PermissionModel permissionModel)
        {
            return Rds.PermissionsWhere()
                .ReferenceId(permissionModel.ReferenceId);
        }

        public static PermissionsParamCollection PermissionsParamDefault(
            PermissionModel permissionModel, bool setDefault = false, bool paramAll = false)
        {
            return Rds.PermissionsParam()
                .ReferenceType(permissionModel.ReferenceType.MaxLength(32), _using: permissionModel.ReferenceType_Updated || setDefault || paramAll)
                .ReferenceId(permissionModel.ReferenceId, _using: permissionModel.ReferenceId_Updated || setDefault || paramAll)
                .DeptId(permissionModel.DeptId, _using: permissionModel.DeptId_Updated || setDefault || paramAll)
                .UserId(permissionModel.UserId, _using: permissionModel.UserId_Updated || setDefault || paramAll)
                .Ver(permissionModel.Ver, _using: permissionModel.Ver_Updated || setDefault || paramAll)
                .PermissionType(permissionModel.PermissionType.ToLong(), _using: permissionModel.PermissionType_Updated || setDefault || paramAll)
                .Comments(permissionModel.Comments.ToJson(), _using: permissionModel.Comments_Updated || paramAll);
        }

        public static OutgoingMailsColumnCollection OutgoingMailsColumnDefault()
        {
            return Rds.OutgoingMailsColumn()
                .ReferenceType()
                .ReferenceId()
                .ReferenceVer()
                .OutgoingMailId()
                .Ver()
                .Host()
                .Port()
                .From()
                .To()
                .Cc()
                .Bcc()
                .Title()
                .Body()
                .SentTime()
                .Comments()
                .Creator()
                .Updator()
                .CreatedTime()
                .UpdatedTime();
        }

        public static OutgoingMailsJoinCollection OutgoingMailsJoinDefault()
        {
            return Rds.OutgoingMailsJoin();
        }

        public static OutgoingMailsWhereCollection OutgoingMailsWhereDefault(OutgoingMailModel outgoingMailModel)
        {
            return Rds.OutgoingMailsWhere()
                .ReferenceType(outgoingMailModel.ReferenceType.MaxLength(32))
                .ReferenceId(outgoingMailModel.ReferenceId)
                .ReferenceVer(outgoingMailModel.ReferenceVer)
                .OutgoingMailId(outgoingMailModel.OutgoingMailId);
        }

        public static OutgoingMailsParamCollection OutgoingMailsParamDefault(
            OutgoingMailModel outgoingMailModel, bool setDefault = false, bool paramAll = false)
        {
            return Rds.OutgoingMailsParam()
                .ReferenceType(outgoingMailModel.ReferenceType.MaxLength(32), _using: outgoingMailModel.ReferenceType_Updated || setDefault || paramAll)
                .ReferenceId(outgoingMailModel.ReferenceId, _using: outgoingMailModel.ReferenceId_Updated || setDefault || paramAll)
                .ReferenceVer(outgoingMailModel.ReferenceVer, _using: outgoingMailModel.ReferenceVer_Updated || setDefault || paramAll)
                .Ver(outgoingMailModel.Ver, _using: outgoingMailModel.Ver_Updated || setDefault || paramAll)
                .Host(outgoingMailModel.Host.MaxLength(1024), _using: outgoingMailModel.Host_Updated || paramAll)
                .Port(outgoingMailModel.Port, _using: outgoingMailModel.Port_Updated || paramAll)
                .From(outgoingMailModel.From.ToString(), _using: outgoingMailModel.From_Updated || paramAll)
                .To(outgoingMailModel.To, _using: outgoingMailModel.To_Updated || paramAll)
                .Cc(outgoingMailModel.Cc, _using: outgoingMailModel.Cc_Updated || paramAll)
                .Bcc(outgoingMailModel.Bcc, _using: outgoingMailModel.Bcc_Updated || paramAll)
                .Title(outgoingMailModel.Title.Value.MaxLength(1024), _using: outgoingMailModel.Title_Updated || paramAll)
                .Body(outgoingMailModel.Body, _using: outgoingMailModel.Body_Updated || paramAll)
                .SentTime(outgoingMailModel.SentTime.Value, _using: outgoingMailModel.SentTime_Updated || paramAll)
                .Comments(outgoingMailModel.Comments.ToJson(), _using: outgoingMailModel.Comments_Updated || paramAll);
        }

        public static SearchIndexesColumnCollection SearchIndexesColumnDefault()
        {
            return Rds.SearchIndexesColumn()
                .Word()
                .ReferenceId()
                .Ver()
                .Priority()
                .ReferenceType()
                .Title()
                .Subset()
                .PermissionType()
                .Comments()
                .Creator()
                .Updator()
                .CreatedTime()
                .UpdatedTime();
        }

        public static SearchIndexesJoinCollection SearchIndexesJoinDefault()
        {
            return Rds.SearchIndexesJoin().Add("inner join [Items] as [t1] on [t0].[ReferenceId]=[t1].[ReferenceId]").Add("inner join [Sites] as [t2] on [t1].[SiteId]=[t2].[SiteId]");
        }

        public static SearchIndexesWhereCollection SearchIndexesWhereDefault(SearchIndexModel searchIndexModel)
        {
            return Rds.SearchIndexesWhere()
                .Word(searchIndexModel.Word.MaxLength(256))
                .ReferenceId(searchIndexModel.ReferenceId);
        }

        public static SearchIndexesParamCollection SearchIndexesParamDefault(
            SearchIndexModel searchIndexModel, bool setDefault = false, bool paramAll = false)
        {
            return Rds.SearchIndexesParam()
                .Word(searchIndexModel.Word.MaxLength(256), _using: searchIndexModel.Word_Updated || setDefault || paramAll)
                .ReferenceId(searchIndexModel.ReferenceId, _using: searchIndexModel.ReferenceId_Updated || setDefault || paramAll)
                .Ver(searchIndexModel.Ver, _using: searchIndexModel.Ver_Updated || setDefault || paramAll)
                .Priority(searchIndexModel.Priority, _using: searchIndexModel.Priority_Updated || setDefault || paramAll)
                .Comments(searchIndexModel.Comments.ToJson(), _using: searchIndexModel.Comments_Updated || paramAll);
        }

        public static ItemsColumnCollection ItemsColumnDefault()
        {
            return Rds.ItemsColumn()
                .ReferenceId()
                .Ver()
                .ReferenceType()
                .SiteId()
                .Title()
                .Subset()
                .MaintenanceTarget()
                .Comments()
                .Creator()
                .Updator()
                .CreatedTime()
                .UpdatedTime();
        }

        public static ItemsJoinCollection ItemsJoinDefault()
        {
            return Rds.ItemsJoin();
        }

        public static ItemsWhereCollection ItemsWhereDefault(ItemModel itemModel)
        {
            return Rds.ItemsWhere()
                .ReferenceId(itemModel.ReferenceId);
        }

        public static ItemsParamCollection ItemsParamDefault(
            ItemModel itemModel, bool setDefault = false, bool paramAll = false)
        {
            return Rds.ItemsParam()
                .Ver(itemModel.Ver, _using: itemModel.Ver_Updated || setDefault || paramAll)
                .ReferenceType(itemModel.ReferenceType.MaxLength(32), _using: itemModel.ReferenceType_Updated || setDefault || paramAll)
                .SiteId(itemModel.SiteId, _using: itemModel.SiteId_Updated || setDefault || paramAll)
                .Title(itemModel.Title.MaxLength(1024), _using: itemModel.Title_Updated || paramAll)
                .Subset(itemModel.Subset, _using: itemModel.Subset_Updated || paramAll)
                .MaintenanceTarget(itemModel.MaintenanceTarget, _using: itemModel.MaintenanceTarget_Updated || paramAll)
                .Comments(itemModel.Comments.ToJson(), _using: itemModel.Comments_Updated || paramAll);
        }

        public static SitesColumnCollection SitesColumnDefault()
        {
            return Rds.SitesColumn()
                .TenantId()
                .SiteId()
                .UpdatedTime()
                .Ver()
                .Title()
                .Body()
                .TitleBody()
                .ReferenceType()
                .ParentId()
                .InheritPermission()
                .PermissionType()
                .SiteSettings()
                .Comments()
                .Creator()
                .Updator()
                .CreatedTime();
        }

        public static SitesJoinCollection SitesJoinDefault()
        {
            return Rds.SitesJoin();
        }

        public static SitesWhereCollection SitesWhereDefault(SiteModel siteModel)
        {
            return Rds.SitesWhere()
                .TenantId(siteModel.TenantId)
                .SiteId(siteModel.SiteId);
        }

        public static SitesParamCollection SitesParamDefault(
            SiteModel siteModel, bool setDefault = false, bool paramAll = false)
        {
            return Rds.SitesParam()
                .ItemId(siteModel.SiteId)
                .TenantId(siteModel.TenantId, _using: siteModel.TenantId_Updated || setDefault || paramAll)
                .Ver(siteModel.Ver, _using: siteModel.Ver_Updated || setDefault || paramAll)
                .Title(siteModel.Title.Value.MaxLength(1024), _using: siteModel.Title_Updated || setDefault || paramAll)
                .Body(siteModel.Body, _using: siteModel.Body_Updated || paramAll)
                .ReferenceType(siteModel.ReferenceType.MaxLength(32), _using: siteModel.ReferenceType_Updated || setDefault || paramAll)
                .ParentId(siteModel.ParentId, _using: siteModel.ParentId_Updated || setDefault || paramAll)
                .InheritPermission(siteModel.InheritPermission, _using: siteModel.InheritPermission_Updated || setDefault || paramAll)
                .SiteSettings(siteModel.SiteSettings.RecordingJson(), _using: siteModel.SiteSettings_Updated || paramAll)
                .Comments(siteModel.Comments.ToJson(), _using: siteModel.Comments_Updated || paramAll);
        }

        public static OrdersColumnCollection OrdersColumnDefault()
        {
            return Rds.OrdersColumn()
                .ReferenceId()
                .ReferenceType()
                .OwnerId()
                .Ver()
                .Data()
                .Comments()
                .Creator()
                .Updator()
                .CreatedTime()
                .UpdatedTime();
        }

        public static OrdersJoinCollection OrdersJoinDefault()
        {
            return Rds.OrdersJoin();
        }

        public static OrdersWhereCollection OrdersWhereDefault(OrderModel orderModel)
        {
            return Rds.OrdersWhere()
                .ReferenceId(orderModel.ReferenceId)
                .ReferenceType(orderModel.ReferenceType.MaxLength(32))
                .OwnerId(orderModel.OwnerId);
        }

        public static OrdersParamCollection OrdersParamDefault(
            OrderModel orderModel, bool setDefault = false, bool paramAll = false)
        {
            return Rds.OrdersParam()
                .ReferenceId(orderModel.ReferenceId, _using: orderModel.ReferenceId_Updated || setDefault || paramAll)
                .ReferenceType(orderModel.ReferenceType.MaxLength(32), _using: orderModel.ReferenceType_Updated || setDefault || paramAll)
                .OwnerId(orderModel.OwnerId, _using: orderModel.OwnerId_Updated || setDefault || paramAll)
                .Ver(orderModel.Ver, _using: orderModel.Ver_Updated || setDefault || paramAll)
                .Data(orderModel.Data.ToJson(), _using: orderModel.Data_Updated || setDefault || paramAll)
                .Comments(orderModel.Comments.ToJson(), _using: orderModel.Comments_Updated || paramAll);
        }

        public static ExportSettingsColumnCollection ExportSettingsColumnDefault()
        {
            return Rds.ExportSettingsColumn()
                .ReferenceType()
                .ReferenceId()
                .Title()
                .ExportSettingId()
                .Ver()
                .AddHeader()
                .ExportColumns()
                .Comments()
                .Creator()
                .Updator()
                .CreatedTime()
                .UpdatedTime();
        }

        public static ExportSettingsJoinCollection ExportSettingsJoinDefault()
        {
            return Rds.ExportSettingsJoin();
        }

        public static ExportSettingsWhereCollection ExportSettingsWhereDefault(ExportSettingModel exportSettingModel)
        {
            return Rds.ExportSettingsWhere()
                .ReferenceId(exportSettingModel.ReferenceId)
                .Title(exportSettingModel.Title.Value.MaxLength(1024))
                .ExportSettingId(exportSettingModel.ExportSettingId);
        }

        public static ExportSettingsParamCollection ExportSettingsParamDefault(
            ExportSettingModel exportSettingModel, bool setDefault = false, bool paramAll = false)
        {
            return Rds.ExportSettingsParam()
                .ReferenceType(exportSettingModel.ReferenceType.MaxLength(32), _using: exportSettingModel.ReferenceType_Updated || setDefault || paramAll)
                .ReferenceId(exportSettingModel.ReferenceId, _using: exportSettingModel.ReferenceId_Updated || setDefault || paramAll)
                .Title(exportSettingModel.Title.Value.MaxLength(1024), _using: exportSettingModel.Title_Updated || setDefault || paramAll)
                .Ver(exportSettingModel.Ver, _using: exportSettingModel.Ver_Updated || setDefault || paramAll)
                .AddHeader(exportSettingModel.AddHeader, _using: exportSettingModel.AddHeader_Updated || setDefault || paramAll)
                .ExportColumns(exportSettingModel.ExportColumns.ToJson(), _using: exportSettingModel.ExportColumns_Updated || setDefault || paramAll)
                .Comments(exportSettingModel.Comments.ToJson(), _using: exportSettingModel.Comments_Updated || paramAll);
        }

        public static LinksColumnCollection LinksColumnDefault()
        {
            return Rds.LinksColumn()
                .DestinationId()
                .SourceId()
                .Ver()
                .ReferenceType()
                .SiteId()
                .Title()
                .Subset()
                .SiteTitle()
                .Comments()
                .Creator()
                .Updator()
                .CreatedTime()
                .UpdatedTime();
        }

        public static LinksJoinCollection LinksJoinDefault()
        {
            return Rds.LinksJoin().Add("inner join [Items] as [t1] on [t0].[SourceId]=[t1].[ReferenceId]").Add("inner join [Sites] as [t2] on [t1].[SiteId]=[t2].[SiteId]");
        }

        public static LinksWhereCollection LinksWhereDefault(LinkModel linkModel)
        {
            return Rds.LinksWhere()
                .DestinationId(linkModel.DestinationId)
                .SourceId(linkModel.SourceId);
        }

        public static LinksParamCollection LinksParamDefault(
            LinkModel linkModel, bool setDefault = false, bool paramAll = false)
        {
            return Rds.LinksParam()
                .DestinationId(linkModel.DestinationId, _using: linkModel.DestinationId_Updated || setDefault || paramAll)
                .SourceId(linkModel.SourceId, _using: linkModel.SourceId_Updated || setDefault || paramAll)
                .Ver(linkModel.Ver, _using: linkModel.Ver_Updated || setDefault || paramAll)
                .Comments(linkModel.Comments.ToJson(), _using: linkModel.Comments_Updated || paramAll);
        }

        public static BinariesColumnCollection BinariesColumnDefault()
        {
            return Rds.BinariesColumn()
                .ReferenceId()
                .BinaryId()
                .Ver()
                .BinaryType()
                .Title()
                .Body()
                .Bin()
                .Thumbnail()
                .Icon()
                .FileName()
                .Extension()
                .Size()
                .BinarySettings()
                .Comments()
                .Creator()
                .Updator()
                .CreatedTime()
                .UpdatedTime();
        }

        public static BinariesJoinCollection BinariesJoinDefault()
        {
            return Rds.BinariesJoin();
        }

        public static BinariesWhereCollection BinariesWhereDefault(BinaryModel binaryModel)
        {
            return Rds.BinariesWhere()
                .ReferenceId(binaryModel.ReferenceId)
                .BinaryId(binaryModel.BinaryId);
        }

        public static BinariesParamCollection BinariesParamDefault(
            BinaryModel binaryModel, bool setDefault = false, bool paramAll = false)
        {
            return Rds.BinariesParam()
                .ReferenceId(binaryModel.ReferenceId, _using: binaryModel.ReferenceId_Updated || setDefault || paramAll)
                .Ver(binaryModel.Ver, _using: binaryModel.Ver_Updated || setDefault || paramAll)
                .BinaryType(binaryModel.BinaryType.MaxLength(32), _using: binaryModel.BinaryType_Updated || setDefault || paramAll)
                .Title(binaryModel.Title.Value.MaxLength(1024), _using: binaryModel.Title_Updated || setDefault || paramAll)
                .Body(binaryModel.Body, _using: binaryModel.Body_Updated || paramAll)
                .Bin(binaryModel.Bin, _using: binaryModel.Bin_Updated || setDefault || paramAll)
                .Thumbnail(binaryModel.Thumbnail, _using: binaryModel.Thumbnail_Updated || setDefault || paramAll)
                .Icon(binaryModel.Icon, _using: binaryModel.Icon_Updated || setDefault || paramAll)
                .FileName(binaryModel.FileName.MaxLength(1024), _using: binaryModel.FileName_Updated || setDefault || paramAll)
                .Extension(binaryModel.Extension.MaxLength(32), _using: binaryModel.Extension_Updated || setDefault || paramAll)
                .Size(binaryModel.Size, _using: binaryModel.Size_Updated || setDefault || paramAll)
                .BinarySettings(binaryModel.BinarySettings.ToJson(), _using: binaryModel.BinarySettings_Updated || paramAll)
                .Comments(binaryModel.Comments.ToJson(), _using: binaryModel.Comments_Updated || paramAll);
        }

        public static IssuesColumnCollection IssuesColumnDefault()
        {
            return Rds.IssuesColumn()
                .SiteId()
                .UpdatedTime()
                .IssueId()
                .Ver()
                .Title()
                .Body()
                .TitleBody()
                .StartTime()
                .CompletionTime()
                .WorkValue()
                .ProgressRate()
                .RemainingWorkValue()
                .Status()
                .Manager()
                .Owner()
                .ClassA()
                .ClassB()
                .ClassC()
                .ClassD()
                .ClassE()
                .ClassF()
                .ClassG()
                .ClassH()
                .ClassI()
                .ClassJ()
                .ClassK()
                .ClassL()
                .ClassM()
                .ClassN()
                .ClassO()
                .ClassP()
                .NumA()
                .NumB()
                .NumC()
                .NumD()
                .NumE()
                .NumF()
                .NumG()
                .NumH()
                .NumI()
                .NumJ()
                .NumK()
                .NumL()
                .NumM()
                .NumN()
                .NumO()
                .NumP()
                .DateA()
                .DateB()
                .DateC()
                .DateD()
                .DateE()
                .DateF()
                .DateG()
                .DateH()
                .DateI()
                .DateJ()
                .DateK()
                .DateL()
                .DateM()
                .DateN()
                .DateO()
                .DateP()
                .DescriptionA()
                .DescriptionB()
                .DescriptionC()
                .DescriptionD()
                .DescriptionE()
                .DescriptionF()
                .DescriptionG()
                .DescriptionH()
                .DescriptionI()
                .DescriptionJ()
                .DescriptionK()
                .DescriptionL()
                .DescriptionM()
                .DescriptionN()
                .DescriptionO()
                .DescriptionP()
                .CheckA()
                .CheckB()
                .CheckC()
                .CheckD()
                .CheckE()
                .CheckF()
                .CheckG()
                .CheckH()
                .CheckI()
                .CheckJ()
                .CheckK()
                .CheckL()
                .CheckM()
                .CheckN()
                .CheckO()
                .CheckP()
                .Comments()
                .Creator()
                .Updator()
                .CreatedTime();
        }

        public static IssuesJoinCollection IssuesJoinDefault()
        {
            return Rds.IssuesJoin();
        }

        public static IssuesWhereCollection IssuesWhereDefault(IssueModel issueModel)
        {
            return Rds.IssuesWhere()
                .IssueId(issueModel.IssueId);
        }

        public static IssuesParamCollection IssuesParamDefault(
            IssueModel issueModel, bool setDefault = false, bool paramAll = false)
        {
            return Rds.IssuesParam()
                .ItemId(issueModel.IssueId)
                .SiteId(issueModel.SiteId, _using: issueModel.SiteId_Updated || setDefault || paramAll)
                .Ver(issueModel.Ver, _using: issueModel.Ver_Updated || setDefault || paramAll)
                .Title(issueModel.Title.Value.MaxLength(1024), _using: issueModel.Title_Updated || setDefault || paramAll)
                .Body(issueModel.Body, _using: issueModel.Body_Updated || paramAll)
                .StartTime(issueModel.StartTime, _using: issueModel.StartTime_Updated || paramAll)
                .CompletionTime(issueModel.CompletionTime.Value, _using: issueModel.CompletionTime_Updated || setDefault || paramAll)
                .WorkValue(issueModel.WorkValue.Value, _using: issueModel.WorkValue_Updated || paramAll)
                .ProgressRate(issueModel.ProgressRate.Value, _using: issueModel.ProgressRate_Updated || paramAll)
                .Status(issueModel.Status.Value, _using: issueModel.Status_Updated || setDefault || paramAll)
                .Manager(issueModel.Manager.Id, _using: issueModel.Manager_Updated || paramAll)
                .Owner(issueModel.Owner.Id, _using: issueModel.Owner_Updated || paramAll)
                .ClassA(issueModel.ClassA.MaxLength(1024), _using: issueModel.ClassA_Updated || paramAll)
                .ClassB(issueModel.ClassB.MaxLength(1024), _using: issueModel.ClassB_Updated || paramAll)
                .ClassC(issueModel.ClassC.MaxLength(1024), _using: issueModel.ClassC_Updated || paramAll)
                .ClassD(issueModel.ClassD.MaxLength(1024), _using: issueModel.ClassD_Updated || paramAll)
                .ClassE(issueModel.ClassE.MaxLength(1024), _using: issueModel.ClassE_Updated || paramAll)
                .ClassF(issueModel.ClassF.MaxLength(1024), _using: issueModel.ClassF_Updated || paramAll)
                .ClassG(issueModel.ClassG.MaxLength(1024), _using: issueModel.ClassG_Updated || paramAll)
                .ClassH(issueModel.ClassH.MaxLength(1024), _using: issueModel.ClassH_Updated || paramAll)
                .ClassI(issueModel.ClassI.MaxLength(1024), _using: issueModel.ClassI_Updated || paramAll)
                .ClassJ(issueModel.ClassJ.MaxLength(1024), _using: issueModel.ClassJ_Updated || paramAll)
                .ClassK(issueModel.ClassK.MaxLength(1024), _using: issueModel.ClassK_Updated || paramAll)
                .ClassL(issueModel.ClassL.MaxLength(1024), _using: issueModel.ClassL_Updated || paramAll)
                .ClassM(issueModel.ClassM.MaxLength(1024), _using: issueModel.ClassM_Updated || paramAll)
                .ClassN(issueModel.ClassN.MaxLength(1024), _using: issueModel.ClassN_Updated || paramAll)
                .ClassO(issueModel.ClassO.MaxLength(1024), _using: issueModel.ClassO_Updated || paramAll)
                .ClassP(issueModel.ClassP.MaxLength(1024), _using: issueModel.ClassP_Updated || paramAll)
                .NumA(issueModel.NumA, _using: issueModel.NumA_Updated || paramAll)
                .NumB(issueModel.NumB, _using: issueModel.NumB_Updated || paramAll)
                .NumC(issueModel.NumC, _using: issueModel.NumC_Updated || paramAll)
                .NumD(issueModel.NumD, _using: issueModel.NumD_Updated || paramAll)
                .NumE(issueModel.NumE, _using: issueModel.NumE_Updated || paramAll)
                .NumF(issueModel.NumF, _using: issueModel.NumF_Updated || paramAll)
                .NumG(issueModel.NumG, _using: issueModel.NumG_Updated || paramAll)
                .NumH(issueModel.NumH, _using: issueModel.NumH_Updated || paramAll)
                .NumI(issueModel.NumI, _using: issueModel.NumI_Updated || paramAll)
                .NumJ(issueModel.NumJ, _using: issueModel.NumJ_Updated || paramAll)
                .NumK(issueModel.NumK, _using: issueModel.NumK_Updated || paramAll)
                .NumL(issueModel.NumL, _using: issueModel.NumL_Updated || paramAll)
                .NumM(issueModel.NumM, _using: issueModel.NumM_Updated || paramAll)
                .NumN(issueModel.NumN, _using: issueModel.NumN_Updated || paramAll)
                .NumO(issueModel.NumO, _using: issueModel.NumO_Updated || paramAll)
                .NumP(issueModel.NumP, _using: issueModel.NumP_Updated || paramAll)
                .DateA(issueModel.DateA, _using: issueModel.DateA_Updated || paramAll)
                .DateB(issueModel.DateB, _using: issueModel.DateB_Updated || paramAll)
                .DateC(issueModel.DateC, _using: issueModel.DateC_Updated || paramAll)
                .DateD(issueModel.DateD, _using: issueModel.DateD_Updated || paramAll)
                .DateE(issueModel.DateE, _using: issueModel.DateE_Updated || paramAll)
                .DateF(issueModel.DateF, _using: issueModel.DateF_Updated || paramAll)
                .DateG(issueModel.DateG, _using: issueModel.DateG_Updated || paramAll)
                .DateH(issueModel.DateH, _using: issueModel.DateH_Updated || paramAll)
                .DateI(issueModel.DateI, _using: issueModel.DateI_Updated || paramAll)
                .DateJ(issueModel.DateJ, _using: issueModel.DateJ_Updated || paramAll)
                .DateK(issueModel.DateK, _using: issueModel.DateK_Updated || paramAll)
                .DateL(issueModel.DateL, _using: issueModel.DateL_Updated || paramAll)
                .DateM(issueModel.DateM, _using: issueModel.DateM_Updated || paramAll)
                .DateN(issueModel.DateN, _using: issueModel.DateN_Updated || paramAll)
                .DateO(issueModel.DateO, _using: issueModel.DateO_Updated || paramAll)
                .DateP(issueModel.DateP, _using: issueModel.DateP_Updated || paramAll)
                .DescriptionA(issueModel.DescriptionA, _using: issueModel.DescriptionA_Updated || paramAll)
                .DescriptionB(issueModel.DescriptionB, _using: issueModel.DescriptionB_Updated || paramAll)
                .DescriptionC(issueModel.DescriptionC, _using: issueModel.DescriptionC_Updated || paramAll)
                .DescriptionD(issueModel.DescriptionD, _using: issueModel.DescriptionD_Updated || paramAll)
                .DescriptionE(issueModel.DescriptionE, _using: issueModel.DescriptionE_Updated || paramAll)
                .DescriptionF(issueModel.DescriptionF, _using: issueModel.DescriptionF_Updated || paramAll)
                .DescriptionG(issueModel.DescriptionG, _using: issueModel.DescriptionG_Updated || paramAll)
                .DescriptionH(issueModel.DescriptionH, _using: issueModel.DescriptionH_Updated || paramAll)
                .DescriptionI(issueModel.DescriptionI, _using: issueModel.DescriptionI_Updated || paramAll)
                .DescriptionJ(issueModel.DescriptionJ, _using: issueModel.DescriptionJ_Updated || paramAll)
                .DescriptionK(issueModel.DescriptionK, _using: issueModel.DescriptionK_Updated || paramAll)
                .DescriptionL(issueModel.DescriptionL, _using: issueModel.DescriptionL_Updated || paramAll)
                .DescriptionM(issueModel.DescriptionM, _using: issueModel.DescriptionM_Updated || paramAll)
                .DescriptionN(issueModel.DescriptionN, _using: issueModel.DescriptionN_Updated || paramAll)
                .DescriptionO(issueModel.DescriptionO, _using: issueModel.DescriptionO_Updated || paramAll)
                .DescriptionP(issueModel.DescriptionP, _using: issueModel.DescriptionP_Updated || paramAll)
                .CheckA(issueModel.CheckA, _using: issueModel.CheckA_Updated || paramAll)
                .CheckB(issueModel.CheckB, _using: issueModel.CheckB_Updated || paramAll)
                .CheckC(issueModel.CheckC, _using: issueModel.CheckC_Updated || paramAll)
                .CheckD(issueModel.CheckD, _using: issueModel.CheckD_Updated || paramAll)
                .CheckE(issueModel.CheckE, _using: issueModel.CheckE_Updated || paramAll)
                .CheckF(issueModel.CheckF, _using: issueModel.CheckF_Updated || paramAll)
                .CheckG(issueModel.CheckG, _using: issueModel.CheckG_Updated || paramAll)
                .CheckH(issueModel.CheckH, _using: issueModel.CheckH_Updated || paramAll)
                .CheckI(issueModel.CheckI, _using: issueModel.CheckI_Updated || paramAll)
                .CheckJ(issueModel.CheckJ, _using: issueModel.CheckJ_Updated || paramAll)
                .CheckK(issueModel.CheckK, _using: issueModel.CheckK_Updated || paramAll)
                .CheckL(issueModel.CheckL, _using: issueModel.CheckL_Updated || paramAll)
                .CheckM(issueModel.CheckM, _using: issueModel.CheckM_Updated || paramAll)
                .CheckN(issueModel.CheckN, _using: issueModel.CheckN_Updated || paramAll)
                .CheckO(issueModel.CheckO, _using: issueModel.CheckO_Updated || paramAll)
                .CheckP(issueModel.CheckP, _using: issueModel.CheckP_Updated || paramAll)
                .Comments(issueModel.Comments.ToJson(), _using: issueModel.Comments_Updated || paramAll);
        }

        public static ResultsColumnCollection ResultsColumnDefault()
        {
            return Rds.ResultsColumn()
                .SiteId()
                .UpdatedTime()
                .ResultId()
                .Ver()
                .Title()
                .Body()
                .TitleBody()
                .Status()
                .Manager()
                .Owner()
                .ClassA()
                .ClassB()
                .ClassC()
                .ClassD()
                .ClassE()
                .ClassF()
                .ClassG()
                .ClassH()
                .ClassI()
                .ClassJ()
                .ClassK()
                .ClassL()
                .ClassM()
                .ClassN()
                .ClassO()
                .ClassP()
                .NumA()
                .NumB()
                .NumC()
                .NumD()
                .NumE()
                .NumF()
                .NumG()
                .NumH()
                .NumI()
                .NumJ()
                .NumK()
                .NumL()
                .NumM()
                .NumN()
                .NumO()
                .NumP()
                .DateA()
                .DateB()
                .DateC()
                .DateD()
                .DateE()
                .DateF()
                .DateG()
                .DateH()
                .DateI()
                .DateJ()
                .DateK()
                .DateL()
                .DateM()
                .DateN()
                .DateO()
                .DateP()
                .DescriptionA()
                .DescriptionB()
                .DescriptionC()
                .DescriptionD()
                .DescriptionE()
                .DescriptionF()
                .DescriptionG()
                .DescriptionH()
                .DescriptionI()
                .DescriptionJ()
                .DescriptionK()
                .DescriptionL()
                .DescriptionM()
                .DescriptionN()
                .DescriptionO()
                .DescriptionP()
                .CheckA()
                .CheckB()
                .CheckC()
                .CheckD()
                .CheckE()
                .CheckF()
                .CheckG()
                .CheckH()
                .CheckI()
                .CheckJ()
                .CheckK()
                .CheckL()
                .CheckM()
                .CheckN()
                .CheckO()
                .CheckP()
                .Comments()
                .Creator()
                .Updator()
                .CreatedTime();
        }

        public static ResultsJoinCollection ResultsJoinDefault()
        {
            return Rds.ResultsJoin();
        }

        public static ResultsWhereCollection ResultsWhereDefault(ResultModel resultModel)
        {
            return Rds.ResultsWhere()
                .ResultId(resultModel.ResultId);
        }

        public static ResultsParamCollection ResultsParamDefault(
            ResultModel resultModel, bool setDefault = false, bool paramAll = false)
        {
            return Rds.ResultsParam()
                .ItemId(resultModel.ResultId)
                .SiteId(resultModel.SiteId, _using: resultModel.SiteId_Updated || setDefault || paramAll)
                .Ver(resultModel.Ver, _using: resultModel.Ver_Updated || setDefault || paramAll)
                .Title(resultModel.Title.Value.MaxLength(1024), _using: resultModel.Title_Updated || paramAll)
                .Body(resultModel.Body, _using: resultModel.Body_Updated || paramAll)
                .Status(resultModel.Status.Value, _using: resultModel.Status_Updated || paramAll)
                .Manager(resultModel.Manager.Id, _using: resultModel.Manager_Updated || paramAll)
                .Owner(resultModel.Owner.Id, _using: resultModel.Owner_Updated || paramAll)
                .ClassA(resultModel.ClassA.MaxLength(1024), _using: resultModel.ClassA_Updated || paramAll)
                .ClassB(resultModel.ClassB.MaxLength(1024), _using: resultModel.ClassB_Updated || paramAll)
                .ClassC(resultModel.ClassC.MaxLength(1024), _using: resultModel.ClassC_Updated || paramAll)
                .ClassD(resultModel.ClassD.MaxLength(1024), _using: resultModel.ClassD_Updated || paramAll)
                .ClassE(resultModel.ClassE.MaxLength(1024), _using: resultModel.ClassE_Updated || paramAll)
                .ClassF(resultModel.ClassF.MaxLength(1024), _using: resultModel.ClassF_Updated || paramAll)
                .ClassG(resultModel.ClassG.MaxLength(1024), _using: resultModel.ClassG_Updated || paramAll)
                .ClassH(resultModel.ClassH.MaxLength(1024), _using: resultModel.ClassH_Updated || paramAll)
                .ClassI(resultModel.ClassI.MaxLength(1024), _using: resultModel.ClassI_Updated || paramAll)
                .ClassJ(resultModel.ClassJ.MaxLength(1024), _using: resultModel.ClassJ_Updated || paramAll)
                .ClassK(resultModel.ClassK.MaxLength(1024), _using: resultModel.ClassK_Updated || paramAll)
                .ClassL(resultModel.ClassL.MaxLength(1024), _using: resultModel.ClassL_Updated || paramAll)
                .ClassM(resultModel.ClassM.MaxLength(1024), _using: resultModel.ClassM_Updated || paramAll)
                .ClassN(resultModel.ClassN.MaxLength(1024), _using: resultModel.ClassN_Updated || paramAll)
                .ClassO(resultModel.ClassO.MaxLength(1024), _using: resultModel.ClassO_Updated || paramAll)
                .ClassP(resultModel.ClassP.MaxLength(1024), _using: resultModel.ClassP_Updated || paramAll)
                .NumA(resultModel.NumA, _using: resultModel.NumA_Updated || paramAll)
                .NumB(resultModel.NumB, _using: resultModel.NumB_Updated || paramAll)
                .NumC(resultModel.NumC, _using: resultModel.NumC_Updated || paramAll)
                .NumD(resultModel.NumD, _using: resultModel.NumD_Updated || paramAll)
                .NumE(resultModel.NumE, _using: resultModel.NumE_Updated || paramAll)
                .NumF(resultModel.NumF, _using: resultModel.NumF_Updated || paramAll)
                .NumG(resultModel.NumG, _using: resultModel.NumG_Updated || paramAll)
                .NumH(resultModel.NumH, _using: resultModel.NumH_Updated || paramAll)
                .NumI(resultModel.NumI, _using: resultModel.NumI_Updated || paramAll)
                .NumJ(resultModel.NumJ, _using: resultModel.NumJ_Updated || paramAll)
                .NumK(resultModel.NumK, _using: resultModel.NumK_Updated || paramAll)
                .NumL(resultModel.NumL, _using: resultModel.NumL_Updated || paramAll)
                .NumM(resultModel.NumM, _using: resultModel.NumM_Updated || paramAll)
                .NumN(resultModel.NumN, _using: resultModel.NumN_Updated || paramAll)
                .NumO(resultModel.NumO, _using: resultModel.NumO_Updated || paramAll)
                .NumP(resultModel.NumP, _using: resultModel.NumP_Updated || paramAll)
                .DateA(resultModel.DateA, _using: resultModel.DateA_Updated || paramAll)
                .DateB(resultModel.DateB, _using: resultModel.DateB_Updated || paramAll)
                .DateC(resultModel.DateC, _using: resultModel.DateC_Updated || paramAll)
                .DateD(resultModel.DateD, _using: resultModel.DateD_Updated || paramAll)
                .DateE(resultModel.DateE, _using: resultModel.DateE_Updated || paramAll)
                .DateF(resultModel.DateF, _using: resultModel.DateF_Updated || paramAll)
                .DateG(resultModel.DateG, _using: resultModel.DateG_Updated || paramAll)
                .DateH(resultModel.DateH, _using: resultModel.DateH_Updated || paramAll)
                .DateI(resultModel.DateI, _using: resultModel.DateI_Updated || paramAll)
                .DateJ(resultModel.DateJ, _using: resultModel.DateJ_Updated || paramAll)
                .DateK(resultModel.DateK, _using: resultModel.DateK_Updated || paramAll)
                .DateL(resultModel.DateL, _using: resultModel.DateL_Updated || paramAll)
                .DateM(resultModel.DateM, _using: resultModel.DateM_Updated || paramAll)
                .DateN(resultModel.DateN, _using: resultModel.DateN_Updated || paramAll)
                .DateO(resultModel.DateO, _using: resultModel.DateO_Updated || paramAll)
                .DateP(resultModel.DateP, _using: resultModel.DateP_Updated || paramAll)
                .DescriptionA(resultModel.DescriptionA, _using: resultModel.DescriptionA_Updated || paramAll)
                .DescriptionB(resultModel.DescriptionB, _using: resultModel.DescriptionB_Updated || paramAll)
                .DescriptionC(resultModel.DescriptionC, _using: resultModel.DescriptionC_Updated || paramAll)
                .DescriptionD(resultModel.DescriptionD, _using: resultModel.DescriptionD_Updated || paramAll)
                .DescriptionE(resultModel.DescriptionE, _using: resultModel.DescriptionE_Updated || paramAll)
                .DescriptionF(resultModel.DescriptionF, _using: resultModel.DescriptionF_Updated || paramAll)
                .DescriptionG(resultModel.DescriptionG, _using: resultModel.DescriptionG_Updated || paramAll)
                .DescriptionH(resultModel.DescriptionH, _using: resultModel.DescriptionH_Updated || paramAll)
                .DescriptionI(resultModel.DescriptionI, _using: resultModel.DescriptionI_Updated || paramAll)
                .DescriptionJ(resultModel.DescriptionJ, _using: resultModel.DescriptionJ_Updated || paramAll)
                .DescriptionK(resultModel.DescriptionK, _using: resultModel.DescriptionK_Updated || paramAll)
                .DescriptionL(resultModel.DescriptionL, _using: resultModel.DescriptionL_Updated || paramAll)
                .DescriptionM(resultModel.DescriptionM, _using: resultModel.DescriptionM_Updated || paramAll)
                .DescriptionN(resultModel.DescriptionN, _using: resultModel.DescriptionN_Updated || paramAll)
                .DescriptionO(resultModel.DescriptionO, _using: resultModel.DescriptionO_Updated || paramAll)
                .DescriptionP(resultModel.DescriptionP, _using: resultModel.DescriptionP_Updated || paramAll)
                .CheckA(resultModel.CheckA, _using: resultModel.CheckA_Updated || paramAll)
                .CheckB(resultModel.CheckB, _using: resultModel.CheckB_Updated || paramAll)
                .CheckC(resultModel.CheckC, _using: resultModel.CheckC_Updated || paramAll)
                .CheckD(resultModel.CheckD, _using: resultModel.CheckD_Updated || paramAll)
                .CheckE(resultModel.CheckE, _using: resultModel.CheckE_Updated || paramAll)
                .CheckF(resultModel.CheckF, _using: resultModel.CheckF_Updated || paramAll)
                .CheckG(resultModel.CheckG, _using: resultModel.CheckG_Updated || paramAll)
                .CheckH(resultModel.CheckH, _using: resultModel.CheckH_Updated || paramAll)
                .CheckI(resultModel.CheckI, _using: resultModel.CheckI_Updated || paramAll)
                .CheckJ(resultModel.CheckJ, _using: resultModel.CheckJ_Updated || paramAll)
                .CheckK(resultModel.CheckK, _using: resultModel.CheckK_Updated || paramAll)
                .CheckL(resultModel.CheckL, _using: resultModel.CheckL_Updated || paramAll)
                .CheckM(resultModel.CheckM, _using: resultModel.CheckM_Updated || paramAll)
                .CheckN(resultModel.CheckN, _using: resultModel.CheckN_Updated || paramAll)
                .CheckO(resultModel.CheckO, _using: resultModel.CheckO_Updated || paramAll)
                .CheckP(resultModel.CheckP, _using: resultModel.CheckP_Updated || paramAll)
                .Comments(resultModel.Comments.ToJson(), _using: resultModel.Comments_Updated || paramAll);
        }

        public static WikisColumnCollection WikisColumnDefault()
        {
            return Rds.WikisColumn()
                .SiteId()
                .UpdatedTime()
                .WikiId()
                .Ver()
                .Title()
                .Body()
                .TitleBody()
                .Comments()
                .Creator()
                .Updator()
                .CreatedTime();
        }

        public static WikisJoinCollection WikisJoinDefault()
        {
            return Rds.WikisJoin();
        }

        public static WikisWhereCollection WikisWhereDefault(WikiModel wikiModel)
        {
            return Rds.WikisWhere()
                .WikiId(wikiModel.WikiId);
        }

        public static WikisParamCollection WikisParamDefault(
            WikiModel wikiModel, bool setDefault = false, bool paramAll = false)
        {
            return Rds.WikisParam()
                .ItemId(wikiModel.WikiId)
                .SiteId(wikiModel.SiteId, _using: wikiModel.SiteId_Updated || setDefault || paramAll)
                .Ver(wikiModel.Ver, _using: wikiModel.Ver_Updated || setDefault || paramAll)
                .Title(wikiModel.Title.Value.MaxLength(1024), _using: wikiModel.Title_Updated || setDefault || paramAll)
                .Body(wikiModel.Body, _using: wikiModel.Body_Updated || paramAll)
                .Comments(wikiModel.Comments.ToJson(), _using: wikiModel.Comments_Updated || paramAll);
        }

        public static IssuesColumnCollection IssuesTitleColumn(SiteSettings siteSettings)
        {
            var column = IssuesColumn();
            siteSettings.TitleColumnCollection().Select(o => o.ColumnName).ForEach(columnName =>
            {
                switch (columnName)
                {
                    case "Title": column.Title(); break;
                    case "ClassA": column.ClassA(); break;
                    case "ClassB": column.ClassB(); break;
                    case "ClassC": column.ClassC(); break;
                    case "ClassD": column.ClassD(); break;
                    case "ClassE": column.ClassE(); break;
                    case "ClassF": column.ClassF(); break;
                    case "ClassG": column.ClassG(); break;
                    case "ClassH": column.ClassH(); break;
                    case "ClassI": column.ClassI(); break;
                    case "ClassJ": column.ClassJ(); break;
                    case "ClassK": column.ClassK(); break;
                    case "ClassL": column.ClassL(); break;
                    case "ClassM": column.ClassM(); break;
                    case "ClassN": column.ClassN(); break;
                    case "ClassO": column.ClassO(); break;
                    case "ClassP": column.ClassP(); break;
                }
            });
            return column;
        }

        public static ResultsColumnCollection ResultsTitleColumn(SiteSettings siteSettings)
        {
            var column = ResultsColumn();
            siteSettings.TitleColumnCollection().Select(o => o.ColumnName).ForEach(columnName =>
            {
                switch (columnName)
                {
                    case "Title": column.Title(); break;
                    case "ClassA": column.ClassA(); break;
                    case "ClassB": column.ClassB(); break;
                    case "ClassC": column.ClassC(); break;
                    case "ClassD": column.ClassD(); break;
                    case "ClassE": column.ClassE(); break;
                    case "ClassF": column.ClassF(); break;
                    case "ClassG": column.ClassG(); break;
                    case "ClassH": column.ClassH(); break;
                    case "ClassI": column.ClassI(); break;
                    case "ClassJ": column.ClassJ(); break;
                    case "ClassK": column.ClassK(); break;
                    case "ClassL": column.ClassL(); break;
                    case "ClassM": column.ClassM(); break;
                    case "ClassN": column.ClassN(); break;
                    case "ClassO": column.ClassO(); break;
                    case "ClassP": column.ClassP(); break;
                }
            });
            return column;
        }

        public static WikisColumnCollection WikisTitleColumn(SiteSettings siteSettings)
        {
            var column = WikisColumn();
            siteSettings.TitleColumnCollection().Select(o => o.ColumnName).ForEach(columnName =>
            {
                switch (columnName)
                {
                    case "Title": column.Title(); break;
                }
            });
            return column;
        }
    }
}
